<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>http://weld.cdi-spec.org/</id>
  <title>Weld</title>
  <updated>2017-09-22T09:45:46+02:00</updated>
  <link href="http://weld.cdi-spec.org/news.atom" rel="self" type="application/atom+xml" />
  <link href="http://weld.cdi-spec.org/" rel="alternate" type="text/html" />
  <entry>
    <id>http://weld.cdi-spec.org/news/2017/09/11/weld-245Final/</id>
    <title>Weld 2.4.5.Final</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2017-09-11T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2017/09/11/weld-245Final/" rel="alternate" type="text/html" />
    <author>
      <name>Matej Novotny</name>
    </author>
    <category term="release"></category>
    <summary>
      
      It&#8217;s about time we delivered another regular bugfix release for Weld 2.
      And while the list of fixes isn&#8217;t exhausting, some of them are quite crucial.
      
      
      Notable fixes and improvements:
      
      
      
      
      Weld Core:
      
      
      
      Revise Java 8 default methods plus proxies/sublasing behaviour (WELD-2407 and WELD-2405)
      
      
      All POMs in Weld core project should now have correct MIME types; this corrects issues with Nexus 3 (WELD-2417)
      
      
      Proxies for signed packages should now be generated in custom packages (WELD-2402)
      
      
      The behaviour of Weld Core and integrator provided implementation of org.jboss.weld.bootstrap.api.Environment is back to what it was in Weld 2.4.3.Final (WELD-2401)
      
      
      
      We found out this change could cause serious headaches to integrators so we...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It’s about time we delivered another regular bugfix release for Weld 2.
      And while the list of fixes isn’t exhausting, some of them are quite crucial.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Weld Core:&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Revise Java 8 default methods plus proxies/sublasing behaviour (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2407&quot; target=&quot;_blank&quot;&gt;WELD-2407&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2405&quot; target=&quot;_blank&quot;&gt;WELD-2405&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;All POMs in Weld core project should now have correct MIME types; this corrects issues with Nexus 3 (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2417&quot; target=&quot;_blank&quot;&gt;WELD-2417&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Proxies for signed packages should now be generated in custom packages (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2402&quot; target=&quot;_blank&quot;&gt;WELD-2402&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The behaviour of Weld Core and integrator provided implementation of &lt;code&gt;org.jboss.weld.bootstrap.api.Environment&lt;/code&gt; is back to what it was in Weld 2.4.3.Final (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2401&quot; target=&quot;_blank&quot;&gt;WELD-2401&lt;/a&gt;)&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;We found out this change could cause serious headaches to integrators so we will leave it as it is - sorry for the mess&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;For Weld 3, we already have a better solution in &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2398&quot; target=&quot;_blank&quot;&gt;place&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld SE and Servlet&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Both, Weld SE and Weld Servlet, will now explicitly bring in dependency on jboss-classfilewriter 1.2+ (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2406&quot; target=&quot;_blank&quot;&gt;WELD-2406&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Other&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Under the &lt;code&gt;jboss-as&lt;/code&gt; directory of Weld source code, you can now make use of new profiles to create WildFly patches yourself &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2397&quot; target=&quot;_blank&quot;&gt;WELD-2397&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.5.Final/wildfly-10.1.0.Final-weld-2.4.5.Final-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly 10.1.0.Final&lt;/a&gt; is available.
      But since WildFly 11 has already reached CR stage, we have decided to also provide you with &lt;a href=&quot;http://download.jboss.org/weld/2.4.5.Final/wildfly-11.0.0.CR1-weld-2.4.5.Final-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly 11.0.0.CR1&lt;/a&gt;.
      If you’re not familiar with patching WildFly, check the &lt;a href=&quot;http://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.5.Final/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?version=12334958&amp;amp;styleName=Html&amp;amp;projectId=12310891&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2017/08/25/weld-301Final/</id>
    <title>Weld 3.0.1.Final</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2017-08-25T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2017/08/25/weld-301Final/" rel="alternate" type="text/html" />
    <author>
      <name>Matej Novotny</name>
    </author>
    <category term="release"></category>
    <summary>
      
      Weld 3.0.1.Final is out and it brings some bugfixes as well as new version of Weld API - 3.0.SP1.
      Among the new things you can find sweet stuff such as an expansion to CDI 2 BeanConfigurator API or the ability to detect that injected object is Weld proxy.
      Wait, not only detect - you can also use it do get Metadata or even retrieve the actual contextual instance hidden beneath.
      So let&#8217;s see the summary of fixes and improvements, shall we?
      
      
      Notable fixes and improvements:
      
      
      
      
      Weld Core
      
      
      
      Revised support for Java 8 default methods (WELD-2407 and WELD-2405)
      
      
      Corrected MIME types for all POMs in Weld core -...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 3.0.1.Final is out and it brings some bugfixes as well as new version of Weld API - 3.0.SP1.
      Among the new things you can find sweet stuff such as an expansion to CDI 2 &lt;code&gt;BeanConfigurator&lt;/code&gt; API or the ability to detect that injected object is Weld proxy.
      Wait, not only detect - you can also use it do get &lt;code&gt;Metadata&lt;/code&gt; or even retrieve the actual contextual instance hidden beneath.
      So let’s see the summary of fixes and improvements, shall we?&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Weld Core&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Revised support for Java 8 default methods (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2407&quot; target=&quot;_blank&quot;&gt;WELD-2407&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2405&quot; target=&quot;_blank&quot;&gt;WELD-2405&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Corrected MIME types for all POMs in Weld core - Nexus 3 will love us now! (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2417&quot; target=&quot;_blank&quot;&gt;WELD-2417&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Fixed how proxies are created for signed packages (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2402&quot; target=&quot;_blank&quot;&gt;WELD-2402&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Portable extension events should now be fired in accordance with specification &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2393&quot; target=&quot;_blank&quot;&gt;WELD-2393&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld SE&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Synthetic bean archive can now have discovery mode &lt;code&gt;annotated&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2386&quot; target=&quot;_blank&quot;&gt;WELD-2386&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Added a convenient static method &lt;code&gt;WeldContainer.current()&lt;/code&gt; allowing you to quickly grab your running instance (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2399&quot; target=&quot;_blank&quot;&gt;WELD-2399&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Fixed a glitch when starting SE container and adding packages via &lt;code&gt;Weld.addPackages()&lt;/code&gt; &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2395&quot; target=&quot;_blank&quot;&gt;WELD-2395&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld API/SPI&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Added a way to detect proxies and subclasses (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2407&quot; target=&quot;_blank&quot;&gt;WELD-2407&lt;/a&gt;)&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Every Weld-enhanced object (subclass/proxy) will now implement &lt;a href=&quot;https://github.com/weld/api/tree/3.0.SP1/weld/src/main/java/org/jboss/weld/proxy&quot;&gt;new marker interface(s)&lt;/a&gt; which grant access to additional data about the bean&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;This also allows to retrieve the underlying contextual instance&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Added &lt;code&gt;WeldBeanConfigurator&lt;/code&gt; to API - allows to select an &lt;code&gt;@Alternative&lt;/code&gt; which was created using &lt;code&gt;BeanConfigurator&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2412&quot; target=&quot;_blank&quot;&gt;WELD-2412&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;We have enhanced the &lt;code&gt;Environment&lt;/code&gt; in Weld SPI so that integrators define whether their bean archives are &quot;EE module aware&quot; or not (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2398&quot; target=&quot;_blank&quot;&gt;WELD-2398&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Other&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Under the &lt;code&gt;jboss-as&lt;/code&gt; directory of Weld source code, you can now make use of new profiles to create WildFly patches yourself &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2397&quot; target=&quot;_blank&quot;&gt;WELD-2397&lt;/a&gt;&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;To learn more about this, please refer to the &lt;a href=&quot;https://github.com/weld/core/blob/3.0.1.Final/README.md#creating-a-patch-file-for-wildfly&quot;&gt;&lt;code&gt;README&lt;/code&gt; file in our repository&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld SE and Weld Servlet now explicitly depends on &lt;code&gt;jboss-classfilewriter&lt;/code&gt; in version 1.2+ &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2406&quot; target=&quot;_blank&quot;&gt;WELD-2406&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, there is a &lt;a href=&quot;http://download.jboss.org/weld/3.0.1.Final/wildfly-10.1.0.Final-weld-3.0.1.Final-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly 10.1.0.Final&lt;/a&gt; is available.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;But, for those of you who like to stay sharp, we have also created a &lt;a href=&quot;http://download.jboss.org/weld/3.0.1.Final/wildfly-11.0.0.Beta1-weld-3.0.1.Final-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly 11.0.0.Beta1&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Please note that there is currently a &lt;a href=&quot;https://issues.jboss.org/browse/WFLY-9240&quot;&gt;known issue&lt;/a&gt; with security context propagation in Weld 3 for WildFly 11.
      Though this should only concern people who use the combination of Elytron subsystem and asynchronous CDI events.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you’re not familiar with patching WildFly, check the &lt;a href=&quot;http://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.1.Final/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12334698&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2017/08/07/weld-vertx-next/</id>
    <title>Weld Vert.x Next?</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2017-08-07T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2017/08/07/weld-vertx-next/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="vertx"></category>
    <category term="integration"></category>
    <summary>
      
      Contents
      
      What Is It Good For?
      
      Modules
      
      
      How Do I Use It In My Vert.x Webapp?
      
      1. Project Configuration
      2. Start CDI Container
      3. Observe Events
      4. Declare Routes
      5. Enjoy and Celebrate
      
      
      Future and Plans
      
      
      
      Last year Weld team announced the weld-vertx project (see also Weld meets Vert.x and Update on weld-vertx articles).
      The goal was clear - bring the CDI programming model into the Vert.x ecosystem.
      Since then, several things have changed.
      Two new modules were added, CDI 2 and Weld 3 is now used by default, and two final versions were released.
      I think it&#8217;s a good time to summarize the features and plans for future.
      
      
      What Is It Good For?
      
      
      First of...
    </summary>
    <content type="html">
      &lt;div class=&quot;toc&quot; id=&quot;toc&quot;&gt;
      &lt;div class=&quot;title&quot; id=&quot;toctitle&quot;&gt;Contents&lt;/div&gt;
      &lt;ul class=&quot;sectlevel1&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#_what_is_it_good_for&quot;&gt;What Is It Good For?&lt;/a&gt;
      &lt;ul class=&quot;sectlevel2&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#_modules&quot;&gt;Modules&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_how_do_i_use_it_in_my_vert_x_webapp&quot;&gt;How Do I Use It In My Vert.x Webapp?&lt;/a&gt;
      &lt;ul class=&quot;sectlevel2&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#_1_project_configuration&quot;&gt;1. Project Configuration&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_2_start_cdi_container&quot;&gt;2. Start CDI Container&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_3_observe_events&quot;&gt;3. Observe Events&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_4_declare_routes&quot;&gt;4. Declare Routes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_5_enjoy_and_celebrate&quot;&gt;5. Enjoy and Celebrate&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_future_and_plans&quot;&gt;Future and Plans&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Last year Weld team announced the &lt;a href=&quot;https://github.com/weld/weld-vertx&quot; target=&quot;_blank&quot;&gt;weld-vertx&lt;/a&gt; project (see also &lt;a href=&quot;http://weld.cdi-spec.org/news/2016/04/11/weld-meets-vertx/&quot; target=&quot;_blank&quot;&gt;Weld meets Vert.x&lt;/a&gt; and &lt;a href=&quot;http://weld.cdi-spec.org/news/2016/06/21/update-on-weld-vertx/&quot; target=&quot;_blank&quot;&gt;Update on weld-vertx&lt;/a&gt; articles).
      The goal was clear - bring the CDI programming model into the Vert.x ecosystem.
      Since then, several things have changed.
      Two new modules were added, &lt;strong&gt;CDI 2&lt;/strong&gt; and &lt;strong&gt;Weld 3&lt;/strong&gt; is now used by default, and &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cweld-vertx&quot; target=&quot;_blank&quot;&gt;two final versions&lt;/a&gt; were released.
      I think it’s a good time to summarize the features and plans for future.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_what_is_it_good_for&quot;&gt;What Is It Good For?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;First of all, it offers a mature component model for business logic in your Vert.x applications.
      A reasonable component model helps making your applications maintainable and scalable in terms of development and reusability.
      So the primary intention is to &lt;em&gt;implement the business logic as CDI beans and use Vert.x APIs for everything else&lt;/em&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_modules&quot;&gt;Modules&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So far there are four modules available:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;The &lt;em&gt;Core&lt;/em&gt; module starts/stops the Weld SE container and to notifies CDI observer methods when a message is sent via Vert.x event bus. Also you can inject &lt;code&gt;io.vertx.core.Vertx&lt;/code&gt; and &lt;code&gt;io.vertx.core.Context&lt;/code&gt; in any CDI bean.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The &lt;em&gt;Web&lt;/em&gt; module allows to configure the router (a component responsible to find the &quot;logic&quot; to handle an HTTP request) in a declarative way, using &lt;code&gt;@org.jboss.weld.vertx.web.WebRoute&lt;/code&gt; annotation. Of course, you can register routes programatically. But what if there are hundreds of routes? The more complicated the REST API is the more difficult it is to maintain the code.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The &lt;em&gt;Service Proxy&lt;/em&gt; module makes it possible to inject and invoke service proxies (as defined in &lt;a class=&quot;bare&quot; href=&quot;https://github.com/vert-x3/vertx-service-proxy&quot;&gt;https://github.com/vert-x3/vertx-service-proxy&lt;/a&gt;).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The &lt;em&gt;Probe&lt;/em&gt; module enables Weld Probe development tool in a Vert.x application.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_how_do_i_use_it_in_my_vert_x_webapp&quot;&gt;How Do I Use It In My Vert.x Webapp?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let’s enhance an existing webapp in four simple steps.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_1_project_configuration&quot;&gt;1. Project Configuration&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jus add the following dependency to your &lt;code&gt;pom.xml&lt;/code&gt; and &lt;a href=&quot;https://github.com/weld/weld-vertx/blob/master/examples/hello/src/main/resources/META-INF/beans.xml&quot;&gt;beans.xml&lt;/a&gt; into &lt;code&gt;src/main/resources/META-INF&lt;/code&gt; (this will enable CDI).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.jboss.weld.vertx&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;weld-vertx-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${version.weld-vertx}&amp;lt;/version&amp;gt;
      &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      This also brings in &lt;code&gt;org.jboss.weld.vertx:weld-vertx-core&lt;/code&gt;, Vert.x and Weld dependencies.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_2_start_cdi_container&quot;&gt;2. Start CDI Container&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Deploy &lt;code&gt;WeldWebVerticle&lt;/code&gt; and configure router:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class MyVertxApp {
      
           public static void main(String[] args) {
               final Vertx vertx = Vertx.vertx();
               // ...deploy other existing verticles
               final WeldWebVerticle weldVerticle = new WeldWebVerticle();
               vertx.deployVerticle(weldVerticle, result -&amp;gt; {
                   if (result.succeeded()) {
                       vertx.createHttpServer().requestHandler(weldVerticle.createRouter()::accept).listen(8080);
                   }
               });
           }
       }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_3_observe_events&quot;&gt;3. Observe Events&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Create a CDI observer method to consume messages from the Vert.x event bus.
      &lt;code&gt;@VertxConsumer&lt;/code&gt; qualifier is used to specify the address the consumer will be registered to.
      &lt;code&gt;VertxEvent&lt;/code&gt; is a wrapper of a Vert.x message.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
      class HelloBean {
      
        void consumerWithDependencies(@Observes @VertxConsumer(&quot;hello.address&quot;) VertxEvent event, HelloService service) {
          // Reply to the message - io.vertx.core.eventbus.Message.reply(Object)
          event.setReply(service.hello());
        }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      Since we’re working with regular observer methods, additional parameters may be declared (next to the event parameter) - these parameters are injection points.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_4_declare_routes&quot;&gt;4. Declare Routes&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Annotate a class implementing &lt;code&gt;Handler&amp;lt;RoutingContext&amp;gt;&lt;/code&gt; with &lt;code&gt;@org.jboss.weld.vertx.web.WebRoute&lt;/code&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@WebRoute(&quot;/hello&quot;) // Matches all HTTP methods
      class HelloHandler implements Handler&amp;lt;RoutingContext&amp;gt; {
      
          @Inject
          HelloService service;
      
          @Override
          public void handle(RoutingContext ctx) {
              ctx.response().setStatusCode(200).end(service.hello());
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This will be translated into something like:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;void integrationPseudoCode() {
        HelloHandler hello = produceInjectedInstanceOfHelloHandler();
        Router router = obtainRouterInstance();
        router.route(&quot;/hello&quot;).handler(hello);
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;code&gt;@WebRoute&lt;/code&gt; is repeatable, i.e. if multiple annotations are declared on a handler class a single handler instance is used for multiple routes.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_5_enjoy_and_celebrate&quot;&gt;5. Enjoy and Celebrate&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;And that’s it.
      Fairly straightforward, isn’t it?&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_future_and_plans&quot;&gt;Future and Plans&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So far there are no new features on the roadmap.
      The plan is to provide bugfix releases as needed.
      But &lt;code&gt;weld-vertx&lt;/code&gt; is an open source project and so the future is in hands of the community.
      Feel free to &lt;a href=&quot;https://github.com/weld/weld-vertx/issues&quot;&gt;create issues, share ideas, throw feature requests&lt;/a&gt; and send pull requests!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2017/06/14/weld-244Final/</id>
    <title>Weld 2.4.4.Final</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2017-06-14T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2017/06/14/weld-244Final/" rel="alternate" type="text/html" />
    <author>
      <name>Matej Novotny</name>
    </author>
    <category term="release"></category>
    <summary>
      
      We have been busy chasing down some annoying little bugs and it&#8217;s high time you got the fruits of those efforts into your hands.
      Say hello to Weld 2.4.4.Final.
      
      
      Notable fixes and improvements:
      
      
      
      
      Weld Core
      
      
      
      Fixed bean discovery event ordering when processing producers (WELD-2393)
      
      
      Eliminated an NPE for a corner case with abstract decorator (WELD-2273)
      
      
      Corrected @Initialized(RequestScoped.class) event firing in @PostConstruct callbacks (WELD-2372)
      
      
      Fixed BeanManager.isStereotype() behavior when checking a qualifier annotated with yet another qualifier (WELD-2390)
      
      
      
      
      
      Weld SE
      
      
      
      Added a convenience static method WeldContainer.current(), a shortcut for CDI.current() with no need to cast the result (WELD-2399)
      
      
      Allowed to specify bean discovery mode for synthetic archives (WELD-2386)
      
      
      Fixed bean class discovery problem...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We have been busy chasing down some annoying little bugs and it’s high time you got the fruits of those efforts into your hands.
      Say hello to Weld 2.4.4.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Weld Core&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Fixed bean discovery event ordering when processing producers (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2393&quot; target=&quot;_blank&quot;&gt;WELD-2393&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Eliminated an NPE for a corner case with abstract decorator (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2273&quot; target=&quot;_blank&quot;&gt;WELD-2273&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Corrected &lt;code&gt;@Initialized(RequestScoped.class)&lt;/code&gt; event firing in &lt;code&gt;@PostConstruct&lt;/code&gt; callbacks (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2372&quot; target=&quot;_blank&quot;&gt;WELD-2372&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Fixed &lt;code&gt;BeanManager.isStereotype()&lt;/code&gt; behavior when checking a qualifier annotated with yet another qualifier (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2390&quot; target=&quot;_blank&quot;&gt;WELD-2390&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld SE&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Added a convenience static method &lt;code&gt;WeldContainer.current()&lt;/code&gt;, a shortcut for &lt;code&gt;CDI.current()&lt;/code&gt; with no need to cast the result (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2399&quot; target=&quot;_blank&quot;&gt;WELD-2399&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Allowed to specify bean discovery mode for synthetic archives (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2386&quot; target=&quot;_blank&quot;&gt;WELD-2386&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Fixed bean class discovery problem when adding whole packages (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2395&quot; target=&quot;_blank&quot;&gt;WELD-2395&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld Servlet&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Improved logging and make checks more lenient in case the container is not yet bootstrapped (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2382&quot; target=&quot;_blank&quot;&gt;WELD-2382&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Configuration options&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;In SE and Servlet environments, Jandex can now be forcibly prohibited from processing your archives. This is useful when a third-party dependecy brings in some unsupported Jandex version (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2374&quot; target=&quot;_blank&quot;&gt;WELD-2374&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Development tools&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;If a deployment validation fails and the development mode is enabled, a simple &lt;strong&gt;validation HTML report&lt;/strong&gt; (which contains a lot of useful information) is generated&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Users are encouraged to always attach this report when asking a question on the mailing list or any other communication channel&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.4.Final/wildfly-10.1.0.Final-weld-2.4.4.Final-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly&lt;/a&gt; is available.
      Target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.
      If you’re not familiar with patching WildFly, check the &lt;a href=&quot;http://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.4.Final/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?version=12334296&amp;amp;styleName=Html&amp;amp;projectId=12310891&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2017/05/19/tour-around-weld-3/</id>
    <title>Tour around Weld 3</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2017-05-19T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2017/05/19/tour-around-weld-3/" rel="alternate" type="text/html" />
    <author>
      <name>Matej Novotny</name>
    </author>
    <summary>
      
      Contents
      
      Async Events and Notification Options
      Configurators API
      SE Bootstrap API
      On-demand Request Context Activation
      Observer Method Ordering
      Intercepting Produced Beans
      Trimmed Bean Archives
      
      
      
      This post briefly describes all the main CDI 2.0 features and elaborates on Weld-specific features we added on top of that.
      It is not intended as a deep-dive but rather to give you the overall idea of what is going on and what can the new release offer.
      So, enough talk, let&#8217;s get the show on the road!
      
      
      Async Events and Notification Options
      
      
      Up until now, the only way to send events was to do so synchronously.
      That meant stopping the work of your current thread to instead occupy...
    </summary>
    <content type="html">
      &lt;div class=&quot;toc&quot; id=&quot;toc&quot;&gt;
      &lt;div class=&quot;title&quot; id=&quot;toctitle&quot;&gt;Contents&lt;/div&gt;
      &lt;ul class=&quot;sectlevel1&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#_async_events_and_notification_options&quot;&gt;Async Events and Notification Options&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_configurators_api&quot;&gt;Configurators API&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_se_bootstrap_api&quot;&gt;SE Bootstrap API&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_on_demand_request_context_activation&quot;&gt;On-demand Request Context Activation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_observer_method_ordering&quot;&gt;Observer Method Ordering&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_intercepting_produced_beans&quot;&gt;Intercepting Produced Beans&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_trimmed_bean_archives&quot;&gt;Trimmed Bean Archives&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This post briefly describes all the main CDI 2.0 features and elaborates on Weld-specific features we added on top of that.
      It is not intended as a deep-dive but rather to give you the overall idea of what is going on and what can the new release offer.
      So, enough talk, let’s get the show on the road!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_async_events_and_notification_options&quot;&gt;Async Events and Notification Options&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Up until now, the only way to send events was to do so synchronously.
      That meant stopping the work of your current thread to instead occupy it with observer resolution and subsequent notification of observer methods.
      Once all that was done, the thread resumed it’s work.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;With CDI 2.0 there are asynchronous events - a 'fire &amp;amp; forget' way of handling things.
      Here is how to fire such and event and how to observe it:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// nothing new here, plain old Event is used
      @Inject Event&amp;lt;Payload&amp;gt; event;
      
      public void sendAsyncEvent() {
          // we use a new fireAsync method for asynchronous events
          CompletionStage&amp;lt;Payload&amp;gt; eventResult = event.fireAsync(new Payload()).thenAccept(...);
      }
      
      public void asyncObserver (@ObservesAsync Payload payload){ … }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Few things to note here - first of all, the return value of &lt;code&gt;fireAsync&lt;/code&gt; is &lt;code&gt;CompletionStage&lt;/code&gt; allowing you to chain the work for when the event is done.
      You can follow-up with more tasks, react on exceptional return value and so on.
      Another noticeable detail is that observers which are to be notified have to have &lt;code&gt;@ObservesAsync&lt;/code&gt; annotation.
      As you might have guessed, an observer can be notified of either synchronous (&lt;code&gt;@Observes&lt;/code&gt;) or asynchronous (&lt;code&gt;@ObservesAsync&lt;/code&gt;) events but never both!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Apart from this very basic usage, async events allow you to specify &lt;code&gt;NotificationOptions&lt;/code&gt; - an option allowing you to tweak the way notification works.
      From CDI perspective, there is currently only one standardized option and that enables usage of custom executors which will be used for notifications.
      But the API was designed in a generic way so that implementation can enrich it with its own options.
      Weld currently offers two more options - timeout and parallel execution - both of which are well described in &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.Final/en-US/html/events.html#_notification_options&quot; target=&quot;_blank&quot;&gt;Weld docs&lt;/a&gt;.
      And here is a snippet showing it in action:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public void sendAsyncEventWithOptions() {
          // we use a secondary version of fireAsync method with NotificationOptions parameter
          event.fireAsync(new Payload(), NotificationOptions.of(&quot;weld.async.notification.timeout&quot;, 2000));
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_configurators_api&quot;&gt;Configurators API&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Another of the key features are &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#configurators&quot; target=&quot;blank&quot;&gt;&lt;code&gt;Configurators&lt;/code&gt;&lt;/a&gt;.
      They are here to ease our work when doing small tweaks in extensions.
      Here is a snippet showing how easy it can be to register a new bean in &lt;code&gt;AfterBeanDiscovery&lt;/code&gt; using configurator.
      You don’t have to create a new class implementing &lt;code&gt;Bean&amp;lt;X&amp;gt;&lt;/code&gt; anymore:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public void addABean(@Observes AfterBeanDiscovery event) {
          // get an instance of BeanConfigurator
          event.addBean()
            // set the desired data
            .types(Foo.class)
            .scope(RequestScoped.class)
            .addQualifier(Custom.CustomLiteral.INSTANCE);
            //finally, add a callback to tell CDI how to instantiate this bean
            .produceWith(obj -&amp;gt; new Foo());
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Following configurators were added:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;AnnotatedTypeConfigurator&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;InjectionPointConfigurator&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;BeanAttributesConfigurator&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;BeanConfigurator&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;ObserverMethodConfigurator&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;ProducerConfigurator&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;On top of that, Weld adds one additional configurator - &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest-master/en-US/html_single/#_weld_enriched_container_lifecycle_events&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;InterceptorConfigurator&lt;/code&gt;&lt;/a&gt;.
      This one allows you to observe &lt;code&gt;WeldAfterBeanDiscovery&lt;/code&gt; and then use this configurator to create and register a custom interceptor from scratch.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_se_bootstrap_api&quot;&gt;SE Bootstrap API&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A big change in CDI 2.0 is the SE support.
      Of course, Weld fans have had this for years now, but it has gone official, so that still counts, right?&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The official CDI API is very similar to that of Weld, here is how it looks like:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public void bootBasicContainer() {
          SeContainerInitializer initializer = SeContainerInitializer.newInstance();
          try (SeContainer container = initializer.initialize()) {
              Assert.assertTrue(container.isRunning());
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This is the very basic way; you can also opt to use synthetic bean archive where you cherry-pick all the beans/interceptors/…​ in your archive.
      &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#se_bootstrap&quot; target=&quot;_blank&quot;&gt;CDI spec&lt;/a&gt; describes this fairly well, so how about we instead shift our attention to what Weld SE offers on top of that?&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A small reminder of how to boot SE container using pure Weld API:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public void bootWeldSeContainer() {
          Weld weld = new Weld();
          try (WeldContainer container = weld.initialize()) {
              container.select(FooBean.class).get();
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;One of the things Weld makes easier, is when you want to create a quick extension, but don’t really want to write a whole new class which you then need to place in &lt;code&gt;META-INF/services&lt;/code&gt; or register on bootstrap.
      You can easily create a 'synthetic extension' programatically:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Extension testExtension = ContainerLifecycleObserver.extensionBuilder()
          .add(afterBeanDiscovery((e) -&amp;gt; System.out.println(&quot;Bean discovery completed!&quot;)))
          .add(processAnnotatedType().notify((e) -&amp;gt; {
                  if (e.getAnnotatedType().getJavaClass().getName().startsWith(&quot;com.foo&quot;)) {
                      e.veto();
                  }
              })).build();
      
      try (WeldContainer container = new Weld().addExtension(testExtension).initialize()) {
          // Use the container...
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;What we just did was to create an extension with two container lifecycle observer methods.
      It follows a familiar builder pattern and the body of the observer methods is specified as lambda expression.
      Before booting SE container, we register this extension as we would any other.
      For more information about this, don’t hesitate to check our older &lt;a href=&quot;http://weld.cdi-spec.org/news/2016/02/08/weld-se-synth-lifecycle-events/&quot;&gt;news post&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_on_demand_request_context_activation&quot;&gt;On-demand Request Context Activation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Especially in SE (although not only there) you might want to activate a &lt;code&gt;RequestContext&lt;/code&gt; manually for certain period of time.
      There are two ways to achieve that, first of which is an interceptor - &lt;code&gt;@ActivateRequestContext&lt;/code&gt;.
      You can use that on either a method or a type (enabling it for all methods).
      As you might expect, it will activate the context before executing your method and shut it down afterwards.
      The other way is through means of built-in bean named &lt;code&gt;RequestContextController&lt;/code&gt;.
      This bean can be injected as any other CDI bean and offers to self-explanatory methods: &lt;code&gt;activate&lt;/code&gt; and &lt;code&gt;deactivate&lt;/code&gt;.
      The obvious advantage of this approach is that you can enable the context for an extended period of time.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_observer_method_ordering&quot;&gt;Observer Method Ordering&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A small but noteworthy improvement to observer methods.
      You can not leverage &lt;code&gt;@Priority&lt;/code&gt; annotation in observer methods hence ordering them as you wish.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public void observeFirst (@Observes @Priority(1) EventPayload payload) {...}
      
      public void observeSecond (@Observes @Priority(2) EventPayload payload) {...}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_intercepting_produced_beans&quot;&gt;Intercepting Produced Beans&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Up until now, anything you created using producers could not be easily intercepted.
      CDI 2.0 allows this for &lt;code&gt;@AroundInvoke&lt;/code&gt; interceptors in two ways.
      There is a new method on &lt;code&gt;BeanManager&lt;/code&gt; named &lt;code&gt;createInterceptionFactory&lt;/code&gt; but most of the time you will rather use a built-in bean &lt;code&gt;InterceptionFactory&lt;/code&gt; which can be injected as a producer method parameter.
      Here is a snippet:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Produces
      @Dependent
      public ProducedBean produceFoo(InterceptionFactory&amp;lt;ProducedBean&amp;gt; factory) {
          factory.configure().add(Counter.Literal.INSTANCE);
          return factory.createInterceptedInstance(new ProducedBean());
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To explain this a bit, we first inject the built-in bean with the type equal to the produced type we wish to intercept.
      Then we &lt;code&gt;configure()&lt;/code&gt; it, which returns an &lt;code&gt;AnnotatedTypeConfigurator&lt;/code&gt; allowing us to add interceptor binding.
      Finally, we invoke &lt;code&gt;InterceptionFactory.createInterceptedInstance()&lt;/code&gt; which takes a the object we produce as a parameter.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can read more about this in &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#interception_factory&quot; target=&quot;_blank&quot;&gt;this CDI spec chapter&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_trimmed_bean_archives&quot;&gt;Trimmed Bean Archives&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Last but not least feature we will mention are so called 'trimmed' bean archives.
      You can mark an explicit bean archive as trimmed in &lt;code&gt;beans.xml&lt;/code&gt; by adding the &lt;code&gt;&amp;lt;/trim&amp;gt;&lt;/code&gt; element.
      Such bean archive will perform an annotated type discovery as with &lt;code&gt;bean-discovery-mode=&quot;all&quot;&lt;/code&gt; but all types that don’t have a bean defining annotation or any scope annotation are then removed from the set of discovered types.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Even in this case, Weld allows you to go one step further and &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest-master/en-US/html/configure.html#veto-types-without-bean-defining-annotation&quot;&gt;veto types based on regular expression&lt;/a&gt;.
      It works on a similar principle but affects your whole application - it processess all types from all bean archives.
      Your archives will be scanned as they would be with bean discovery mode &lt;code&gt;all&lt;/code&gt; and &lt;code&gt;ProcessAnnotatedType&lt;/code&gt; will be fired for all found annotated types.
      Then, based on the regular expression you provide, annotated types which do not have a bean defining annotation and match the regular expression will be vetoed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2017/05/15/weld-300Final/</id>
    <title>Weld 3.0.0.Final - the first implementation of CDI 2.0!</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2017-05-15T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2017/05/15/weld-300Final/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <summary>
      
      I am very pleased to announce the release of Weld 3.0.0.Final - the first implementation of CDI 2.0!
      I would like to thank not only to everyone involved in this particular release but also to the Weld community as a whole and also to all active CDI EG members who invested a lot of energy into the specification process!
      
      
      
      /**
       * TODO: Continue to deliver bugfixes and improvements
       */
      public class WeldTeam extends OpenSourceCommunity {
      
        @Inject
        @AwesomeNews
        Event&lt;String&gt; event;
      
        public void release() {
          // Fire asynchronously so that we don't need to wait for observer notification...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I am very pleased to announce the release of Weld &lt;strong&gt;3.0.0.Final&lt;/strong&gt; - the first implementation of &lt;strong&gt;CDI 2.0&lt;/strong&gt;!
      I would like to thank not only to everyone involved in this particular release but also to the Weld community as a whole and also to all active CDI EG members who invested a lot of energy into the specification process!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
       * TODO: Continue to deliver bugfixes and improvements
       */
      public class WeldTeam extends OpenSourceCommunity {
      
        @Inject
        @AwesomeNews
        Event&amp;lt;String&amp;gt; event;
      
        public void release() {
          // Fire asynchronously so that we don't need to wait for observer notification before we start celebrating!
          event.fireAsync(&quot;CDI 1.2 is dead, long live CDI 2.0!&quot;);
          celebrate();
        }
      
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      Weld 3 is an IMPORTANT MILESTONE.
      Therefore, we’re preparing a special blogpost summarizing all the important stuff that was added.
      Expect the &lt;strong&gt;Tour around Weld 3&lt;/strong&gt; blogpost within a few days.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let’s sum up the notable changes since &lt;strong&gt;3.0.0.CR2&lt;/strong&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Weld defines two non-portable &lt;strong&gt;notification options&lt;/strong&gt; to configure the notification of asynchronous observer methods (see also &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.Final/en-US/html/events.html#_notification_options&quot; target=&quot;_blank&quot;&gt;Notification options&lt;/a&gt; for more info):&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;weld.async.notification.mode&lt;/code&gt; - the notification mode, possible values are: &lt;code&gt;SERIAL&lt;/code&gt; (default) and &lt;code&gt;PARALLEL&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;weld.async.notification.timeout&lt;/code&gt; - the notification timeout (in milliseconds) after which the returned completion stage must be completed.&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;If the time expires the stage is completed exceptionally with a &lt;code&gt;CompletionException&lt;/code&gt; holding the &lt;code&gt;java.util.concurrent.TimeoutException&lt;/code&gt; as its cause&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The expiration does not abort the notification of the observers&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Session replication - handle situation when &lt;code&gt;HTTPSessionBean&lt;/code&gt; might not be serializable (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2346&quot; target=&quot;_blank&quot;&gt;WELD-2346&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Fire &lt;code&gt;@Initialied(RequestScoped.class)&lt;/code&gt;/&lt;code&gt;@Destroyed(RequestScoped.class)&lt;/code&gt; events for a &lt;code&gt;@PostConstruct&lt;/code&gt; callback if the request context was activated for the specific callback&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld SE&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;It’s possible to easily register a &lt;code&gt;org.jboss.weld.bootstrap.api.Service&lt;/code&gt; during container bootstrap (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2360&quot; target=&quot;_blank&quot;&gt;WELD-2360&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Any &lt;code&gt;javax.enterprise.inject.spi.CDI&lt;/code&gt; method can now be called during &lt;code&gt;AfterDeploymentValidation&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2371&quot; target=&quot;_blank&quot;&gt;WELD-2371&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;ContainerInitialized&lt;/code&gt; and &lt;code&gt;ContainerShutdown&lt;/code&gt; now implement &lt;code&gt;toString()&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2354&quot; target=&quot;_blank&quot;&gt;WELD-2354&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld Servlet&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Fixed usage of Jandex on Tomcat when using &lt;code&gt;unpackWars=false&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2357&quot; target=&quot;_blank&quot;&gt;WELD-2357&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Added option to disable Jandex in Weld SE and Weld Servlet (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2374&quot; target=&quot;_blank&quot;&gt;WELD-2374&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Development tools&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;If a deployment validation fails and the development mode is enabled a simple &lt;strong&gt;validation HTML report&lt;/strong&gt; (which contains a lot of useful information) is generated&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Users are encouraged to always attach this report when asking a question on the mailing list or any other communication channel&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Updated documentation and migration notes for integrators&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Examples cleanup (dropped GAE support, etc.)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://wildfly.org/&quot; target=&quot;_blank&quot;&gt;patch for WildFly&lt;/a&gt; is available.
      This time the target platforms are &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Final/wildfly-10.1.0.Final-weld-3.0.0.Final-patch.zip&quot; target=&quot;_blank&quot;&gt;WildFly 10.1.0.Final&lt;/a&gt; and &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Final/wildfly-11.0.0.Alpha1-weld-3.0.0.Final-patch.zip&quot; target=&quot;_blank&quot;&gt;WildFly 11.0.0.Alpha1&lt;/a&gt;.
      If you’re not familiar with patching WildFly, check the &lt;a href=&quot;http://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.Final/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12333608&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2017/04/07/weld-243Final/</id>
    <title>Weld 2.4.3.Final</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2017-04-07T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2017/04/07/weld-243Final/" rel="alternate" type="text/html" />
    <author>
      <name>Matej Novotny</name>
    </author>
    <category term="release"></category>
    <summary>
      
      Even as we get ever closer to CDI 2.0 final version, we shan&#8217;t forget about our stable 2.4 branch.
      Ladies and gentlemen, here comes the next-in-line 2.4 release - Weld 2.4.3.Final!
      
      
      Notable fixes and improvements:
      
      
      
      
      Weld now shares proxy classes for built-in beans of the same type (WELD-2344)
      
      
      Fixed usage of Jandex on Tomcat when using unpackWars=false (WELD-2357)
      
      
      Weld now supports wider variety of non-portable extension observer methods (WELD-2338)
      
      
      There is now new debug level logging during bootstrap which allows to monitor name, start, end and duration of all bootstrap phases (WELD-2336)
      
      
      Session replication
      
      
      
      Built-in session and conversation scoped beans are not part of the bean identifier index...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Even as we get ever closer to CDI 2.0 final version, we shan’t forget about our stable 2.4 branch.
      Ladies and gentlemen, here comes the next-in-line 2.4 release - Weld 2.4.3.Final!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Weld now shares proxy classes for built-in beans of the same type (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2344&quot; target=&quot;_blank&quot;&gt;WELD-2344&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Fixed usage of Jandex on Tomcat when using &lt;code&gt;unpackWars=false&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2357&quot; target=&quot;_blank&quot;&gt;WELD-2357&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld now supports wider variety of non-portable extension observer methods (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2338&quot; target=&quot;_blank&quot;&gt;WELD-2338&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;There is now new debug level logging during bootstrap which allows to monitor name, start, end and duration of all bootstrap phases (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2336&quot; target=&quot;_blank&quot;&gt;WELD-2336&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Session replication&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Built-in session and conversation scoped beans are not part of the bean identifier index anymore (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2343&quot; target=&quot;_blank&quot;&gt;WELD-2343&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Handle situation when &lt;code&gt;HTTPSessionBean&lt;/code&gt; might not be serializable (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2346&quot; target=&quot;_blank&quot;&gt;WELD-2346&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld SE&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;You can now easily register new &lt;code&gt;org.jboss.weld.bootstrap.api.Service&lt;/code&gt; during container bootstrap (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2360&quot; target=&quot;_blank&quot;&gt;WELD-2360&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Any &lt;code&gt;javax.enterprise.inject.spi.CDI&lt;/code&gt; method can now be called during &lt;code&gt;AfterDeploymentValidation&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2371&quot; target=&quot;_blank&quot;&gt;WELD-2371&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;ContainerInitialized&lt;/code&gt; event is now correctly fired after registration of shutdown hook (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2340&quot; target=&quot;_blank&quot;&gt;WELD-2340&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;ContainerInitialized&lt;/code&gt; and &lt;code&gt;ContainerShutdown&lt;/code&gt; now implement &lt;code&gt;toString()&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2354&quot; target=&quot;_blank&quot;&gt;WELD-2354&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Probe development tool&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Allow monitoring of bean instance creation using &lt;code&gt;AroundConstruct&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2332&quot; target=&quot;_blank&quot;&gt;WELD-2332&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Fixed a situation when bean was wrongly marked as unused when injected as parameter (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2342&quot; target=&quot;_blank&quot;&gt;WELD-2342&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12333607&quot; target=&quot;_blank&quot;&gt;the release details&lt;/a&gt;.
      Thanks to everyone involved in this release!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.3.Final/wildfly-10.1.0.Final-weld-2.4.3.Final-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly&lt;/a&gt; is available.
      This time the target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.
      If you’re not familiar with patching WildFly, check the &lt;a href=&quot;http://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.3.Final/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12333607&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2017/03/03/weld-300CR2/</id>
    <title>Weld 3.0.0.CR2</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2017-03-03T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2017/03/03/weld-300CR2/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <summary>
      
      I am very pleased to announce the release of Weld 3.0.0.CR2 (CDI 2.0-PFD).
      The intention is to provide the latest updates so that early adopters and reviewers can work with up-to-date reference implementation during the JCP review process.
      
      
      Notable fixes and improvements:
      
      
      
      
      InterceptionFactory handles interface correctly (WELD-2335)
      
      
      Enable to obtain InjectionPoint metadata from within BeanConfigurator#produceWith() (WELD-2333)
      
      
      ObserverMethodConfigurator.beanClass() should be preset to the extension class (WELD-2324)
      
      
      Performance improvements in javax.enterprise.inject.Instance implementation (WELD-2322 and WELD-2323)
      
      
      Don&#8217;t include built-in session and conversation scoped beans in the bean identifier index (WELD-2343)
      
      
      Support InjectionPoint metadata injected into dependent singleton session bean (WELD-2341)
      
      
      Logging
      
      
      
      Log DEBUG info about important phases during bootstrap (WELD-2336)
      
      
      Fix the error message...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I am very pleased to announce the release of Weld &lt;strong&gt;3.0.0.CR2&lt;/strong&gt; (&lt;strong&gt;CDI 2.0-PFD&lt;/strong&gt;).
      The intention is to provide the latest updates so that early adopters and reviewers can work with up-to-date reference implementation during the JCP review process.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;InterceptionFactory&lt;/code&gt; handles interface correctly (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2335&quot; target=&quot;_blank&quot;&gt;WELD-2335&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Enable to obtain &lt;code&gt;InjectionPoint&lt;/code&gt; metadata from within &lt;code&gt;BeanConfigurator#produceWith()&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2333&quot; target=&quot;_blank&quot;&gt;WELD-2333&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;ObserverMethodConfigurator.beanClass()&lt;/code&gt; should be preset to the extension class (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2324&quot; target=&quot;_blank&quot;&gt;WELD-2324&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Performance improvements in &lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt; implementation (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2322&quot; target=&quot;_blank&quot;&gt;WELD-2322&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2323&quot; target=&quot;_blank&quot;&gt;WELD-2323&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Don’t include built-in session and conversation scoped beans in the bean identifier index (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2343&quot; target=&quot;_blank&quot;&gt;WELD-2343&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Support &lt;code&gt;InjectionPoint&lt;/code&gt; metadata injected into dependent singleton session bean (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2341&quot; target=&quot;_blank&quot;&gt;WELD-2341&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Logging&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Log DEBUG info about important phases during bootstrap (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2336&quot; target=&quot;_blank&quot;&gt;WELD-2336&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Fix the error message when an extension observer method is static (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2331&quot; target=&quot;_blank&quot;&gt;WELD-2331&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Improved transactional observer methods logging in case of failure (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2330&quot; target=&quot;_blank&quot;&gt;WELD-2330&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld SE - &lt;code&gt;ContainerInitialized&lt;/code&gt; should be fired after the container is initialized and shutdown hook is registered (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2340&quot; target=&quot;_blank&quot;&gt;WELD-2340&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Probe development tool&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Extended bean archive info&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Monitor bean instance creation&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Do not mark a bean as unused if only injected into an observer method or disposer method&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;org.jboss.weld.probe&lt;/code&gt; package is vetoed&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12333159&quot; target=&quot;_blank&quot;&gt;the release details&lt;/a&gt;.
      Thanks to everyone involved in this release!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.CR2/wildfly-10.1.0.Final-weld-3.0.0.CR2-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly&lt;/a&gt; is available.
      This time the target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.
      If you’re not familiar with patching WildFly, check the &lt;a href=&quot;http://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.CR2/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12333159&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2017/02/02/weld-242Final/</id>
    <title>Weld 2.4.2.Final</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2017-02-02T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2017/02/02/weld-242Final/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <summary>
      
      As you may know, CDI 2 (JSR 365) is in Public Review phase.
      That&#8217;s great news for early adopters.
      But for now, I am very pleased to announce another production-ready version of Weld 2.4 (CDI 1.2).
      See also the release details.
      Thanks to everyone involved in this release!
      
      
      
      
      
      Warning
      
      
      There is a regression in Weld 2.4.2.Final. The problem only occurs if a Security Manager is used. However, users are encouraged to upgrade to 2.4.2.SP1 which contains a fix for the issue.
      
      
      
      
      
      Notable fixes and improvements:
      
      
      
      
      Added trimmed bean archives support (CDI 2.0, WELD-2314)
      
      
      Fixed Weld SE and Weld Servlet cooperation (WELD-2260 and WELD-2262)
      
      
      Fixed ActivateRequestContextInterceptor - align the priority with...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As you may know, CDI 2 (JSR 365) is in Public Review phase.
      That’s great news for early adopters.
      But for now, I am very pleased to announce another production-ready version of &lt;strong&gt;Weld 2.4&lt;/strong&gt; (CDI 1.2).
      See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12332808&quot; target=&quot;_blank&quot;&gt;the release details&lt;/a&gt;.
      Thanks to everyone involved in this release!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock warning&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Warning&lt;/div&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      There is a &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2328&quot; target=&quot;_blank&quot;&gt;regression&lt;/a&gt; in Weld &lt;strong&gt;2.4.2.Final&lt;/strong&gt;. The problem only occurs if a &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/environment/security.html&quot; target=&quot;_blank&quot;&gt;Security Manager&lt;/a&gt; is used. However, users are encouraged to upgrade to &lt;strong&gt;2.4.2.SP1&lt;/strong&gt; which contains a fix for the issue.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Added &lt;strong&gt;trimmed bean archives&lt;/strong&gt; support (CDI 2.0, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2314&quot; target=&quot;_blank&quot;&gt;WELD-2314&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Fixed Weld SE and Weld Servlet cooperation (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2260&quot; target=&quot;_blank&quot;&gt;WELD-2260&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2262&quot; target=&quot;_blank&quot;&gt;WELD-2262&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Fixed &lt;code&gt;ActivateRequestContextInterceptor&lt;/code&gt; - align the priority with CDI 2.0, fire &lt;code&gt;@Initialized&lt;/code&gt; and &lt;code&gt;@Destroyed&lt;/code&gt; events (CDI 2.0, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2281&quot; target=&quot;_blank&quot;&gt;WELD-2281&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Fixed JDK9 build problems (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2303&quot; target=&quot;_blank&quot;&gt;WELD-2303&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2301&quot; target=&quot;_blank&quot;&gt;WELD-2301&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Validation - allow to use CDI 2 rules when validating selected alternatives in &lt;code&gt;bean.xml&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2313&quot; target=&quot;_blank&quot;&gt;WELD-2313&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Performance improvements in &lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt; implementation (CDI 2.0, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2323&quot; target=&quot;_blank&quot;&gt;WELD-2323&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Illegal bean types ignored for a session bean (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2315&quot; target=&quot;_blank&quot;&gt;WELD-2315&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Dependency upgrade - &lt;code&gt;jboss-classfilewriter&lt;/code&gt; to 1.2.1.Final (enables interception of default methods, see also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2093&quot; target=&quot;_blank&quot;&gt;WELD-2093&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld SE - addded useful methods from &lt;code&gt;SeContainerInitializer&lt;/code&gt; (CDI 2.0, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2316&quot; target=&quot;_blank&quot;&gt;WELD-2316&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Probe development tool - extended bean archive info&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.2.Final/wildfly-10.1.0.Final-weld-2.4.2.Final-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly&lt;/a&gt; is available.
      This time the target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.
      If you’re not familiar with patching WildFly, check the &lt;a href=&quot;http://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot; target=&quot;_blank&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
      [ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.0.Final/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12332808&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2017/02/01/tip4-testing/</id>
    <title>Weld Tip 4 - Testing CDI/Weld apps</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2017-02-01T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2017/02/01/tip4-testing/" rel="alternate" type="text/html" />
    <author>
      <name>Tomas Remes, Matej Novotny</name>
    </author>
    <category term="tips"></category>
    <summary>
      
      Contents
      
      Using Weld in JUnit tests
      Arquillian as the chosen framework for testing
      Java EE application server
      Servlet environment
      Java SE environment
      Arquillian Weld Embedded container
      
      
      
      In this follow-up article of our Weld Tips series we are going to focus on testing of CDI/Weld applications.
      Let&#8217;s discover options for unit testing in the first part and then continue with integration testing.
      To set things straight - by integration testing we mean testing in some kind of container and hence in certain environment (SE, servlet, full EE server).
      However, no matter the environment we always make use of Arquillian integration testing framework.
      
      
      Using Weld in JUnit tests
      
      
      Recently we created Weld JUnit extension...
    </summary>
    <content type="html">
      &lt;div class=&quot;toc&quot; id=&quot;toc&quot;&gt;
      &lt;div class=&quot;title&quot; id=&quot;toctitle&quot;&gt;Contents&lt;/div&gt;
      &lt;ul class=&quot;sectlevel1&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#_using_weld_in_junit_tests&quot;&gt;Using Weld in JUnit tests&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_arquillian_as_the_chosen_framework_for_testing&quot;&gt;Arquillian as the chosen framework for testing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_java_ee_application_server&quot;&gt;Java EE application server&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_servlet_environment&quot;&gt;Servlet environment&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_java_se_environment&quot;&gt;Java SE environment&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_arquillian_weld_embedded_container&quot;&gt;Arquillian Weld Embedded container&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In this follow-up article of our Weld Tips series we are going to focus on testing of CDI/Weld applications.
      Let’s discover options for unit testing in the first part and then continue with integration testing.
      To set things straight - by integration testing we mean testing in some kind of container and hence in certain environment (SE, servlet, full EE server).
      However, no matter the environment we always make use of &lt;a href=&quot;http://arquillian.org/&quot;&gt;Arquillian&lt;/a&gt; integration testing framework.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_using_weld_in_junit_tests&quot;&gt;Using Weld in JUnit tests&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Recently we created Weld JUnit extension which uses JUnit4 &lt;code&gt;@Rule&lt;/code&gt; to initialize a Weld SE container before each test method execution. For further information please check following &lt;a href=&quot;https://developer.jboss.org/people/mkouba/blog/2017/01/24/easy-testing-of-cdi-components-with-weld-and-junit4/&quot;&gt;blogpost&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_arquillian_as_the_chosen_framework_for_testing&quot;&gt;Arquillian as the chosen framework for testing&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;While Arquillian may look complex at first, it is certainly worth it. Here are some of the advantages it gives you:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Allows usage of CDI &lt;code&gt;@javax.inject.Inject&lt;/code&gt; directly in test classes&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Works well with ShrinkWrap making archive creation and deployment a breeze&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://arquillian.org/guides/shrinkwrap_introduction/&quot;&gt;ShrinkWrap&lt;/a&gt; can create any type of deployment archive (WAR, JAR, even infamous EAR) with exactly the capabilities you wish it to have&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;You can use dedicated &lt;code&gt;beans.xml&lt;/code&gt; or &lt;code&gt;@Alternatives&lt;/code&gt; for given test case&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Portability - allows to write one test and run it on any container&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Arquillian only needs correct adapter; therefore, combined with Maven profiles this gives you some nice fire power for matrix testing&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Allows for very complex testing scenarios&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;For instance you can create several deployments which you then manually (if you so wish) deploy/undeploy&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;This makes it viable even for cluster testing (session replication, failover scenarios, …​)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Can start the application server itself or can just connect to running one&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In fact writing tests with Arquillian is quite straightforward. It’s basically about right usage of right annotations. Basic test could like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; package org.arquillian.example;
      
       import javax.inject.Inject;
       import org.jboss.arquillian.container.test.api.Deployment;
       import org.jboss.arquillian.junit.Arquillian;
       import org.jboss.shrinkwrap.api.ShrinkWrap;
       import org.jboss.shrinkwrap.api.asset.EmptyAsset;
       import org.jboss.shrinkwrap.api.spec.JavaArchive;
       import org.junit.Assert;
       import org.junit.Test;
       import org.junit.runner.RunWith;
      
       @RunWith(Arquillian.class)
       public class GreeterTest {
      
           // This static method builds the virtual test deployment archive
           @Deployment
           public static JavaArchive createDeployment() {
               return ShrinkWrap.create(JavaArchive.class)
                   .addClass(Greeter.class)
                   .addAsManifestResource(EmptyAsset.INSTANCE, &quot;beans.xml&quot;);
           }
      
           @Inject
           Greeter greeter;
      
           @Test
           public void should_create_greeting() {
              Assert.assertEquals(&quot;Hello, Earthling!&quot;, greeter.createGreeting(&quot;Earthling&quot;));
           }
       }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you are a complete Arquillian rookie, you might want to look at their &lt;a href=&quot;http://arquillian.org/guides/getting_started_rinse_and_repeat/&quot;&gt;Getting started guide&lt;/a&gt;.
      Should you just need an inspiration, you needn’t look any further than our &lt;a href=&quot;https://github.com/weld/core/tree/master/tests-arquillian/src/test/java/org/jboss/weld/tests&quot;&gt;testsuite&lt;/a&gt;.
      To support the though of Arquillian usefulness for CDI/Weld testing, we may also point out that even &lt;a href=&quot;https://github.com/cdi-spec/cdi-tck/tree/master/impl/src/main/java/org/jboss/cdi/tck/tests&quot;&gt;CDI TCK tests&lt;/a&gt; use it.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Now, let’s take a look at different environments and then round it up with &lt;a href=&quot;https://github.com/arquillian/arquillian-container-weld&quot;&gt;Arquillian Weld Embedded container&lt;/a&gt;, which can be used in each and every environment.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_java_ee_application_server&quot;&gt;Java EE application server&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When you want to test your application in Java EE application server you basically need to create your test deployment archive, deploy it, execute the test and undeploy the archive.
      As stated above, &lt;a href=&quot;http://arquillian.org/modules/shrinkwrap-shrinkwrap/&quot;&gt;ShrinkWrap&lt;/a&gt; covers the archive creation (typically WAR or EAR).
      When it comes to deployment/undeployment, Arquillian controls that, unless you take the reins and control it yourself - just keep an eye for dangling deployments.
      You also get to chose between using so called managed container, where Arquillian starts and stops the desired container for you, and remote container where Arquillian tries to connect to already running container.
      Since we are talking Java EE application server, you can use CDI out of the box.
      Just pay attention to &lt;a href=&quot;https://docs.jboss.org/author/display/ARQ/Test+run+modes&quot;&gt;test mode&lt;/a&gt; you are using.
      You can check available Arquillian container adapters &lt;a href=&quot;http://arquillian.org/modules/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For example to use Arquillian WildFly Managed container you need to define following dependency:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;               &amp;lt;dependency&amp;gt;
                         &amp;lt;groupId&amp;gt;org.wildfly.arquillian&amp;lt;/groupId&amp;gt;
                         &amp;lt;artifactId&amp;gt;wildfly-arquillian-container-managed&amp;lt;/artifactId&amp;gt;
                         &amp;lt;version&amp;gt;1.1.0.Final&amp;lt;/version&amp;gt;
                         &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
                     &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_servlet_environment&quot;&gt;Servlet environment&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In basic Servlet environment you need to deploy all the dependencies of Weld Servlet integration (as CDI API, Interceptors API, etc.) to your Servlet container and thus embedded container option could be sufficient.
      As you can &lt;a href=&quot;http://arquillian.org/modules/&quot;&gt;see&lt;/a&gt; Arquillian offers embedded container adapters for all well known Servlet containers such as Tomcat, Jetty and Undertow.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For example to use Arquillian Embedded Tomcat container you need to define following dependency:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;               &amp;lt;dependency&amp;gt;
                          &amp;lt;groupId&amp;gt;org.jboss.arquillian.container&amp;lt;/groupId&amp;gt;
                          &amp;lt;artifactId&amp;gt;arquillian-tomcat-embedded-8&amp;lt;/artifactId&amp;gt;
                          &amp;lt;version&amp;gt;1.0.0.CR8&amp;lt;/version&amp;gt;
                          &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
                      &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_java_se_environment&quot;&gt;Java SE environment&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Java SE is not effectively a container, however it could be very handy to have an option to easily configure classpath elements of your test.
      This is exactly what &lt;a href=&quot;https://github.com/arquillian/arquillian-container-se&quot;&gt;Arquillian container SE&lt;/a&gt; offers.
      With this extension you can build your test classpath and the test executes remotely over JMX in new isolated JVM process.
      You can find basic information in &lt;a href=&quot;https://github.com/arquillian/arquillian-container-se/blob/master/README.adoc&quot;&gt;README&lt;/a&gt; or you can take look into already mentioned &lt;a href=&quot;https://github.com/cdi-spec/cdi-tck/tree/master/impl/src/main/java/org/jboss/cdi/tck/tests&quot;&gt;CDI TCK tests&lt;/a&gt; where you can find &lt;a href=&quot;https://github.com/cdi-spec/cdi-tck/blob/master/impl/src/main/java/org/jboss/cdi/tck/TestGroups.java#L100&quot;&gt;SE testgroup&lt;/a&gt; which involves all SE related tests.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The maven dependency for this extension looks like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;               &amp;lt;dependency&amp;gt;
                         &amp;lt;groupId&amp;gt;org.jboss.arquillian.container&amp;lt;/groupId&amp;gt;
                         &amp;lt;artifactId&amp;gt;container-se-managed&amp;lt;/artifactId&amp;gt;
                         &amp;lt;version&amp;gt;1.0.1.Final&amp;lt;/version&amp;gt;
                     &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_arquillian_weld_embedded_container&quot;&gt;Arquillian Weld Embedded container&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;First of all - this test container is suitable in situations when you know you don’t need to work with full Java EE application server and you are OK with dummy mock EJB, JTA, JPA etc. services.
      As stated in the beginning of this article, you can use it for any environment but you have to keep it mind, that other technologies/services will be mocked only.
      By default, this container operates in SE mode, as you don’t need to mock anything there, but you can use a system property (&lt;code&gt;Denvironment=EE&lt;/code&gt;) or a programmatic approach in order to make it work in other environments.
      For full list of supported environments, see &lt;a href=&quot;https://github.com/weld/api/blob/master/weld-spi/src/main/java/org/jboss/weld/bootstrap/api/Environments.java&quot;&gt;&lt;code&gt;Environments.java&lt;/code&gt;&lt;/a&gt;.
      We recommend you to take a glance at &lt;a href=&quot;https://github.com/arquillian/arquillian-container-weld/blob/master/README.adoc&quot;&gt;README&lt;/a&gt; file - especially those few lines about flat deployment structure (this means this container is not very suitable for testing EAR deployments) and configuration property for setting testing environment.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The maven dependency for this container could look like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;               &amp;lt;dependency&amp;gt;
                          &amp;lt;groupId&amp;gt;org.jboss.arquillian.container&amp;lt;/groupId&amp;gt;
                          &amp;lt;artifactId&amp;gt;arquillian-weld-embedded&amp;lt;/artifactId&amp;gt;
                          &amp;lt;version&amp;gt;2.0.0.Beta4&amp;lt;/version&amp;gt;
                          &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
                      &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2017/01/23/weld-300CR1/</id>
    <title>Weld 3.0.0.CR1</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2017-01-23T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2017/01/23/weld-300CR1/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <summary>
      
      I am very pleased to announce the release of Weld 3.0.0.CR1 (aligned with CDI 2.0-PFD).
      See also the release details.
      Thanks to everyone involved in this release!
      This version of Weld will be part of the JSR 365 Approval Ballot (watch CDI spec website for news).
      The Beta1 version of Weld 3 turned out to be sufficiently stable and so the first release candidate is mostly dedicated to cleanup and minor optimizations.
      We would like to release Weld 3.0.0.Final (stable version of CDI 2.0) in early February.
      
      
      WildFly Patch
      
      
      As usual, a patch for WildFly is available.
      This time the target platform is WildFly 10.1.0.Final.
      If you’re not familiar...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I am very pleased to announce the release of Weld &lt;strong&gt;3.0.0.CR1&lt;/strong&gt; (aligned with &lt;strong&gt;CDI 2.0-PFD&lt;/strong&gt;).
      See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331714&quot; target=&quot;_blank&quot;&gt;the release details&lt;/a&gt;.
      Thanks to everyone involved in this release!
      This version of Weld will be part of the JSR 365 Approval Ballot (watch &lt;a href=&quot;http://cdi-spec.org/&quot; target=&quot;_blank&quot;&gt;CDI spec website&lt;/a&gt; for news).
      The Beta1 version of Weld 3 turned out to be sufficiently stable and so the first release candidate is mostly dedicated to cleanup and minor optimizations.
      We would like to release Weld &lt;strong&gt;3.0.0.Final&lt;/strong&gt; (stable version of CDI 2.0) in early February.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.CR1/wildfly-10.1.0.Final-weld-3.0.0.CR1-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly&lt;/a&gt; is available.
      This time the target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.
      If you’re not familiar with patching WildFly, check the &lt;a href=&quot;http://weld.cdi-spec.org/documentation/#12&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.CR1/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331714&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/12/19/weld-300Beta1/</id>
    <title>Weld 3.0.0.Beta1</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-12-19T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/12/19/weld-300Beta1/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <summary>
      
      I am very pleased to announce the first Beta version of Weld 3.0.0 (CDI 2.0).
      See also the release details.
      Thanks to everyone involved in this release!
      
      
      This is an important milestone.
      CDI 2.0 is now considered "feature complete" and so the next Weld 3 versions should be mostly dedicated to cleanup and optimization.
      The next version will be Weld 3.0.0.CR1 (ETA in mid January).
      Finally, we would like to release Weld 3.0.0.Final in early February.
      
      
      New and noteworthy
      
      
      
      
      javax.enterprise.inject.spi.InterceptionFactory implementation (WELD-2257)
      
      
      ProcessSyntheticObserverMethod container lifecycle event (WELD-2279)
      
      
      BeforeDestroyed event fired before a context is actually destroyed (WELD-2269)
      
      
      "trimmed" bean archives (WELD-2268)
      
      
      context control - ActivateRequestContext interceptor binding (WELD-2267) and RequestContextController built-in bean...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I am very pleased to announce the first &lt;strong&gt;Beta&lt;/strong&gt; version of Weld &lt;strong&gt;3.0.0&lt;/strong&gt; (CDI 2.0).
      See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331387&quot; target=&quot;_blank&quot;&gt;the release details&lt;/a&gt;.
      Thanks to everyone involved in this release!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This is an important milestone.
      CDI 2.0 is now considered &quot;feature complete&quot; and so the next Weld 3 versions should be mostly dedicated to cleanup and optimization.
      The next version will be Weld &lt;strong&gt;3.0.0.CR1&lt;/strong&gt; (ETA in mid January).
      Finally, we would like to release Weld &lt;strong&gt;3.0.0.Final&lt;/strong&gt; in early February.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_new_and_noteworthy&quot;&gt;New and noteworthy&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;javax.enterprise.inject.spi.InterceptionFactory&lt;/code&gt; implementation (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2257&quot; target=&quot;_blank&quot;&gt;WELD-2257&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;ProcessSyntheticObserverMethod&lt;/code&gt; container lifecycle event (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2279&quot; target=&quot;_blank&quot;&gt;WELD-2279&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;BeforeDestroyed&lt;/code&gt; event fired before a context is actually destroyed (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2269&quot; target=&quot;_blank&quot;&gt;WELD-2269&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&quot;trimmed&quot; bean archives (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2268&quot; target=&quot;_blank&quot;&gt;WELD-2268&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;context control - &lt;code&gt;ActivateRequestContext&lt;/code&gt; interceptor binding (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2267&quot; target=&quot;_blank&quot;&gt;WELD-2267&lt;/a&gt;) and &lt;code&gt;RequestContextController&lt;/code&gt; built-in bean (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2266&quot; target=&quot;_blank&quot;&gt;WELD-2266&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;ProcessSyntheticBean&lt;/code&gt; container lifecycle event (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2265&quot; target=&quot;_blank&quot;&gt;WELD-2265&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;few proposals did not make it into CDI 2.0 and so we enhanced the Weld API:&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;org.jboss.weld.inject.WeldInstance&lt;/code&gt; (already part of Weld 2.4 API)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;org.jboss.weld.interceptor.WeldInvocationContext&lt;/code&gt; allows to obtain a set of interceptor bindings for a lifecycle callback, business method, timeout method, or constructor (see also &lt;a href=&quot;https://issues.jboss.org/browse/CDI-468&quot; target=&quot;_blank&quot;&gt;CDI-468&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;org.jboss.weld.bootstrap.event.WeldAfterBeanDiscovery&lt;/code&gt; allows to obtain an &lt;code&gt;InterceptorConfigurator&lt;/code&gt; to configure a new &lt;code&gt;Interceptor&lt;/code&gt; bean&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Beta1/wildfly-10.1.0.Final-weld-3.0.0.Beta1-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.Beta1/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331387&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/11/18/weld-241Final/</id>
    <title>Weld 2.4.1.Final</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-11-18T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/11/18/weld-241Final/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <summary>
      
      The development of Weld 3 (CDI 2) is underway.
      However, we don&#8217;t forget about the maintenance of the stable branch of Weld!
      So I am very pleased to announce the first bugfix version of Weld 2.4 (CDI 1.2).
      See also the release details.
      Thanks to everyone involved in this release!
      
      
      Notable fixes and improvements:
      
      
      
      
      removed false positive warning about Jandex version used (WELD-2231)
      
      
      fixed Groovy support - only filter out relevant methods from Groovy objects when generating bean proxies (WELD-2255)
      
      
      optimized proxy class generation for "large classes" (WELD-2244)
      
      
      improved the way Weld configuration info is logged (WELD-2238)
      
      
      Weld SE
      
      
      
      added support for nested directories in uber jars, e.g. Spring Boot jar...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The development of &lt;strong&gt;Weld 3&lt;/strong&gt; (CDI 2) is underway.
      However, we don’t forget about the maintenance of the stable branch of Weld!
      So I am very pleased to announce the first bugfix version of &lt;strong&gt;Weld 2.4&lt;/strong&gt; (CDI 1.2).
      See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331553&quot; target=&quot;_blank&quot;&gt;the release details&lt;/a&gt;.
      Thanks to everyone involved in this release!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Notable fixes and improvements:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;removed false positive warning about Jandex version used (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2231&quot; target=&quot;_blank&quot;&gt;WELD-2231&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;fixed Groovy support - only filter out relevant methods from Groovy objects when generating bean proxies (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2255&quot; target=&quot;_blank&quot;&gt;WELD-2255&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;optimized proxy class generation for &quot;large classes&quot; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2244&quot; target=&quot;_blank&quot;&gt;WELD-2244&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;improved the way Weld configuration info is logged (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2238&quot; target=&quot;_blank&quot;&gt;WELD-2238&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld SE&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;added support for nested directories in uber jars, e.g. Spring Boot jar (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2254&quot; target=&quot;_blank&quot;&gt;WELD-2254&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;allow to use &lt;code&gt;CDI.getBeanManager()&lt;/code&gt; after &lt;code&gt;BeforeBeanDiscovery&lt;/code&gt; is fired (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2256&quot; target=&quot;_blank&quot;&gt;WELD-2256&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;don’t abort container initialization if &lt;code&gt;JandexClassFileServices&lt;/code&gt; is unable to load an annotation (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2232&quot; target=&quot;_blank&quot;&gt;WELD-2232&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld Servlet - document the usage of &lt;code&gt;org.jboss.weld.environment.container.class&lt;/code&gt; init param (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2236&quot; target=&quot;_blank&quot;&gt;WELD-2236&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.1.Final/wildfly-10.1.0.Final-weld-2.4.1.Final-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot; target=&quot;_blank&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
      [ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.0.Final/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331553&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/10/25/tip3-performance/</id>
    <title>Weld Tip 3 - Boost performance of Weld apps</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-10-25T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/10/25/tip3-performance/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="tips"></category>
    <summary>
      
      Contents
      
      Bootstrap
      
      Discovery mode
      Extensions
      Jandex
      
      
      Runtime
      
      Identify problematic components easily
      Lazy initialization of bean instances
      Drawbacks of @Dependent pseudo-scope
      Mapping CDI contexts to HTTP requests
      Bean identifier index optimization
      
      
      
      
      
      In this article we&#8217;re going to dive into various performance aspects of CDI applications.
      As you&#8217;ve probably noticed performance testing is sometimes tricky.
      First of all, it&#8217;s difficult to create a meaningful benchmark.
      One should understand the JVM specifics (the need for warmup, garbage collection, JVM settings, etc.) and also use appropriate tools (e.g. JMH for microbenchmarks) accordingly.
      But even that usually proves to be unsufficient.
      One should also run the test in a relevant context (data, load, etc.).
      Performance specialists also say that&#8217;s it&#8217;s good to...
    </summary>
    <content type="html">
      &lt;div class=&quot;toc&quot; id=&quot;toc&quot;&gt;
      &lt;div class=&quot;title&quot; id=&quot;toctitle&quot;&gt;Contents&lt;/div&gt;
      &lt;ul class=&quot;sectlevel1&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#_bootstrap&quot;&gt;Bootstrap&lt;/a&gt;
      &lt;ul class=&quot;sectlevel2&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#_discovery_mode&quot;&gt;Discovery mode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_extensions&quot;&gt;Extensions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jandex&quot;&gt;Jandex&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_runtime&quot;&gt;Runtime&lt;/a&gt;
      &lt;ul class=&quot;sectlevel2&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#_identify_problematic_components_easily&quot;&gt;Identify problematic components easily&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_lazy_initialization_of_bean_instances&quot;&gt;Lazy initialization of bean instances&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_drawbacks_of_code_dependent_code_pseudo_scope&quot;&gt;Drawbacks of &lt;code&gt;@Dependent&lt;/code&gt; pseudo-scope&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_mapping_cdi_contexts_to_http_requests&quot;&gt;Mapping CDI contexts to HTTP requests&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_bean_identifier_index_optimization&quot;&gt;Bean identifier index optimization&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In this article we’re going to dive into various performance aspects of CDI applications.
      As you’ve probably noticed performance testing is sometimes tricky.
      First of all, it’s difficult to create a meaningful benchmark.
      One should understand the JVM specifics (the need for warmup, garbage collection, JVM settings, etc.) and also use appropriate tools (e.g. &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot; target=&quot;_blank&quot;&gt;JMH&lt;/a&gt; for microbenchmarks) accordingly.
      But even that usually proves to be unsufficient.
      One should also run the test in a relevant context (data, load, etc.).
      Performance specialists also say that’s it’s good to avoid premature optimizations but keep performance aspects in mind when tuning the &quot;final&quot; code.
      But all these considerations are out of scope of this article.
      Let’s go through several areas where CDI affects the performance of your application and discuss the possibilities.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_bootstrap&quot;&gt;Bootstrap&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;During bootstrap the overhead of a framework should be minimal so that it does not &lt;em&gt;slow down&lt;/em&gt; the application startup and also does not eat all the memory available.
      However, CDI needs to do all that magic behind the scenes - read annotations, build and validate metadata, etc.
      The following sections describe what could be done to minimize the impact.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_discovery_mode&quot;&gt;Discovery mode&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In CDI 1.0 there was only one &lt;em&gt;&quot;discovery mode&quot;&lt;/em&gt;.
      How does it work?
      Simply put: find all bean archives (containing &lt;code&gt;beans.xml&lt;/code&gt;), discover and process all the found classes (identify beans, etc.).
      Needless to say, this might be a performance problem for large applications with thousands of classes.
      In CDI 1.1+ we call this mode &lt;code&gt;all&lt;/code&gt; and a bean archive with this mode is called &lt;strong&gt;EXPLICIT&lt;/strong&gt;.
      Since CDI 1.1+ a new discovery mode - &lt;code&gt;annotated&lt;/code&gt; - can be used.
      The difference is that if this mode is used only classes with a &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#bean_defining_annotations&quot; target=&quot;_blank&quot;&gt;bean defining annotation&lt;/a&gt; are considered.
      In other words, a component must be explicitly designated.
      A bean archive with this mode is called &lt;strong&gt;IMPLICIT&lt;/strong&gt;.
      To make things a little bit more complicated, an implicit bean archive does not have to contain a &lt;code&gt;beans.xml&lt;/code&gt; file at all.
      One class with a bean defining annotation or a session bean is enough.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Implicit bean archive has pros and cons:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-thumbs-o-up&quot;&gt;&lt;/i&gt;&lt;/span&gt; saves a lot of memory if an archive contains a lot of classes which should NOT become beans (the container does not have to store the metadata)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-thumbs-o-up&quot;&gt;&lt;/i&gt;&lt;/span&gt; speeds up the bootstrap (the container does not have to process all the types, fire events like &lt;code&gt;ProcessBean&lt;/code&gt;, etc.)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-thumbs-down&quot;&gt;&lt;/i&gt;&lt;/span&gt; does not fire &lt;code&gt;ProcessAnnotatedType&lt;/code&gt; for all types from the bean archive; this breaks some extensions (e.g. &lt;code&gt;MessageBundleExtension&lt;/code&gt; from DeltaSpike)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-thumbs-down&quot;&gt;&lt;/i&gt;&lt;/span&gt; does not pick up &lt;code&gt;@javax.inject.Singleton&lt;/code&gt; beans (it’s not a bean defining annotation)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;CONCLUSION&lt;/strong&gt;: If possible, use the &lt;code&gt;annotated&lt;/code&gt; discovery mode.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      Most Weld-based runtimes allow to suppress implicit bean archives without &lt;code&gt;beans.xml&lt;/code&gt;, i.e. to require the &lt;code&gt;beans.xml&lt;/code&gt; file in bean archives so that it’s not necessary to scan all the parts of the application. See also &lt;a href=&quot;http://weld.cdi-spec.org/documentation/#4&quot;&gt;FAQ&lt;/a&gt;.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      If it’s not possible to use &lt;code&gt;annotated&lt;/code&gt; mode, you can try a Weld-specific feature to conserve memory used: &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#veto-types-without-bean-defining-annotation&quot; target=&quot;_blank&quot;&gt;Veto types without bean defining annotation&lt;/a&gt;.
      A similar solution is going to be standardized in CDI 2.0 (see also &lt;a href=&quot;https://issues.jboss.org/browse/CDI-420&quot; target=&quot;_blank&quot;&gt;CDI-420&lt;/a&gt;).
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_extensions&quot;&gt;Extensions&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI portable extensions are essential integration points.
      And users love integrated technologies.
      However, the more extensions the more work must be done during bootstrap.
      For example, there is a &lt;code&gt;ProcessAnnotatedType&lt;/code&gt; container lifecycle event.
      This event is fired:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;for every type in an EXPLICIT bean archive,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;for every session bean and every type with a bean defining annotation in an IMPLICIT bean archive.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The delivery might be restricted by means of type arguments, e.g. for observer &lt;code&gt;void observeNumbers(@Observes ProcessAnnotatedType&amp;lt;? extends Number&amp;gt; event)&lt;/code&gt; an extension will be notified for every class assignable to &lt;code&gt;Number&lt;/code&gt;.
      However, if you do &lt;code&gt;&amp;lt;T&amp;gt; void observe(@Observes ProcessAnnotatedType&amp;lt;T&amp;gt; event)&lt;/code&gt; your extension will be notified for every class that is discovered.
      Now if we have an application with one EXPLICIT bean archive with 2000 classes, then a specific observer method on such extesion will be called 2000x.
      And if there are three similar extensions, the CDI container will have to create 2000 events and notify 6000 observers.
      This should be ok unless the observer logic is overly complex.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;CONCLUSION&lt;/strong&gt;: Pay attention to extensions used in your application.
      If you wonder what extensions are in service, use for example Weld Probe &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess/weld-probe#/observers?bda=undefined&amp;amp;kind=EXTENSION&quot; target=&quot;_blank&quot;&gt;observers view&lt;/a&gt; or &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess/weld-probe#/events&quot; target=&quot;_blank&quot;&gt;fired events view&lt;/a&gt; together with &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#config-dev-mode&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;org.jboss.weld.probe.eventMonitor.containerLifecycleEvents&lt;/code&gt; enabled&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      If possible, don’t use the extensions which observe all the annotated types from your application, i.e. which defined something like &lt;code&gt;void observe(@Observes ProcessAnnotatedType&amp;lt;?&amp;gt; event)&lt;/code&gt;.
      Since CDI 1.1 &lt;code&gt;@WithAnnotations&lt;/code&gt; should be used to restrict the set of types an extension is going to process. &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess/weld-probe#/observers?bda=undefined&amp;amp;kind=EXTENSION&amp;amp;observedType=javax.enterprise.inject.spi.ProcessAnnotatedType&quot; target=&quot;_blank&quot;&gt;Weld Probe&lt;/a&gt; warns you about these extensions.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;jandex&quot;&gt;Jandex&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In some environments (WildFly, Weld SE, and more) Weld can leverage an &quot;offline reflection library&quot;, such as &lt;a href=&quot;https://github.com/wildfly/jandex&quot; target=&quot;&amp;lt;em&amp;gt;blank&quot;&gt;Jandex&lt;/a&gt;, to speed up the scanning process.
      These libraries allow to effectively filter classes &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#what_classes_are_beans&quot; target=&quot;_blank&quot;&gt;which are not beans&lt;/a&gt; and vetoed classes.
      It works like this: Jandex generates an index (scans the bytecode) and Weld is using this index to filter out useless classes.
      As a result Weld does not even have to _load the classes or use &lt;em&gt;reflection API&lt;/em&gt; to detect types which should be ignored.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      In Weld SE and Servlet it’s also possible to generate the Jandex index beforehand, e.g. using the &lt;a href=&quot;https://github.com/wildfly/jandex#user-content-using-the-ant-task-to-index-your-project&quot; target=&quot;_blank&quot;&gt;Ant task&lt;/a&gt;.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_runtime&quot;&gt;Runtime&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In runtime the overhead of a framework should be minimal so that it’s not an application bottleneck.
      However, CDI needs to do all that magic behind the scenes - create bean instances, manage contexts, intercept and decorate invocations, etc.
      The following sections describe what could be done to minimize the impact.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_identify_problematic_components_easily&quot;&gt;Identify problematic components easily&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Before you start a profiler or a similar tool, it’s a good idea to identify all the CDI components involved in a problematic &quot;request&quot;.
      This means all the beans, observer methods, interceptors and decorators.
      The good start might be the Weld Probe &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess/weld-probe#/invocations&quot; target=&quot;_blank&quot;&gt;invocation trees&lt;/a&gt; view.
      An invocation tree shows all the business method invocations (including producers, disposers and observer methods).
      Once you spot a problematic component, you can check the business logic and associated interceptors and decorators.
      Sometimes profilers are just an overkill.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_lazy_initialization_of_bean_instances&quot;&gt;Lazy initialization of bean instances&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld initializes bean instances of normal scoped beans lazily.
      In other words, when injecting a normal scoped bean (&lt;code&gt;@RequestScoped&lt;/code&gt;, &lt;code&gt;@ApplicationScoped&lt;/code&gt;, etc.) a new instance is not created until actually used.
      Instead, a shared client proxy is injected.
      This proxy invokes a method upon the correct bean instance (created if necessary).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      Having many injection points resolving to normal scoped beans does not necessarily mean additional overhead associated with bean instance creation.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the following example, an &lt;code&gt;OrderProcessor&lt;/code&gt; instance is not created until its &lt;code&gt;OrderProcess.process()&lt;/code&gt; method is called:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
      class OrderProcessor {
        @PostConstruct
        void init() {
          // Do some expensive initialization logic
        }
        void process() {
          // Business logic
        }
      }
      @RequestScoped
      class OrderService {
        @Inject
        OrderProcessor processor; // A shared client proxy is injected
      
        void create(Order order) {
          if (order.isValid()) {
              // Processor is not initialized unless we have a valid order
              processor.process(order);
          }
        }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      Weld’s session context is also initilized lazily and doesn’t require an HTTP session to actually exist until a bean instance must be written (i.e. until a method of a &lt;code&gt;@SessionScoped&lt;/code&gt; bean is invoked).
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_drawbacks_of_code_dependent_code_pseudo_scope&quot;&gt;Drawbacks of &lt;code&gt;@Dependent&lt;/code&gt; pseudo-scope&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;From performance point of view &lt;code&gt;@Dependent&lt;/code&gt; is NOT a best fit for:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-thumbs-down&quot;&gt;&lt;/i&gt;&lt;/span&gt; a bean that declares a producer which is frequently used (i.e. the produced bean is created very often)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-thumbs-down&quot;&gt;&lt;/i&gt;&lt;/span&gt; a bean that declares an observer method which is frequently notified (i.e. the event is fired very often)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-thumbs-down&quot;&gt;&lt;/i&gt;&lt;/span&gt; a bean which is used in EL expressions&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For all these cases, a new &lt;code&gt;@Dependent&lt;/code&gt; bean instance is created to handle the logic and destroyed when the invocation/evaluation completes.
      In other words, the bean instances are not reused.
      That’s not necessarily a problem if a bean does not have an &quot;expensive&quot; initialization or depends on others &quot;heavyweight&quot; components.
      But very often, a wider scope is more suitable.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_mapping_cdi_contexts_to_http_requests&quot;&gt;Mapping CDI contexts to HTTP requests&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;By default, bult-in CDI contexts are activated at the beginning of an HTTP request processing and deactivated once the processing finishes.
      This might be an unnecessary overhead in certain situations, e.g. when serving static resources (images, JavaScript, etc.).
      Weld allows to activate the contexts only for a subset of requests only.
      A regular expression may be used for filtering HTTP requests that should have contexts active during their processing.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;web-app version=&quot;3.1&quot; xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee/&quot;
          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
          xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;&amp;gt;
          &amp;lt;context-param&amp;gt;
              &amp;lt;param-name&amp;gt;org.jboss.weld.context.mapping&amp;lt;/param-name&amp;gt;
              &amp;lt;param-value&amp;gt;.*\.html&amp;lt;/param-value&amp;gt; &amp;lt;!-- Only activate contexts for resources with html suffix, e.g. /some/path.html --&amp;gt;
          &amp;lt;/context-param&amp;gt;
      &amp;lt;/web-app&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_bean_identifier_index_optimization&quot;&gt;Bean identifier index optimization&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This optimization is used to &lt;strong&gt;reduce the HTTP session replication overhead&lt;/strong&gt; (clustering use case).
      Simply put: Weld tries to minimize the amount of bytes send over the network.
      However, the inconsistency detection mechanism may cause problems in environments where application stop does not imply HTTP session destruction.
      Thus it’s disabled by default in Servlet containers.
      See also the &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#_bean_identifier_index_optimization&quot;&gt;reference guide&lt;/a&gt; for more info.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/10/07/tip2-devmode/</id>
    <title>Weld Tip 2 - Development Mode</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-10-07T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/10/07/tip2-devmode/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="tips"></category>
    <summary>
      
      Contents
      
      How to enable the development mode
      
      Web application
      WildFly
      Weld SE
      
      
      How does it actually work?
      Probe UI
      What if I don&#8217;t have a webapp?
      Does it work offline?
      
      
      
      In this article we&#8217;re going to cover the special mode for application development.
      When enabled, a built-in tool called Probe provides a detailed insight into internals of a CDI application.
      Probe makes it easy to inspect:
      
      
      
      
      bean archives
      
      
      beans and their properties such as qualifiers, stereotypes and name
      
      
      a graph of bean dependencies
      
      
      observers and producers declared by beans
      
      
      interceptors and decorators bound to a bean
      
      
      extensions
      
      
      information about current contextual instances
      
      
      tracking of invocations and invocation trees
      
      
      tracking of fired events
      
      
      Weld configuration
      
      
      and more!
      
      
      
      
      Before you start reading, you might want...
    </summary>
    <content type="html">
      &lt;div class=&quot;toc&quot; id=&quot;toc&quot;&gt;
      &lt;div class=&quot;title&quot; id=&quot;toctitle&quot;&gt;Contents&lt;/div&gt;
      &lt;ul class=&quot;sectlevel1&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#_how_to_enable_the_development_mode&quot;&gt;How to enable the development mode&lt;/a&gt;
      &lt;ul class=&quot;sectlevel2&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#_web_application&quot;&gt;Web application&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_wildfly&quot;&gt;WildFly&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_weld_se&quot;&gt;Weld SE&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_how_does_it_actually_work&quot;&gt;How does it actually work?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_probe_ui&quot;&gt;Probe UI&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_what_if_i_don_t_have_a_webapp&quot;&gt;What if I don’t have a webapp?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#probe-offline&quot;&gt;Does it work offline?&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In this article we’re going to cover the &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/devmode.html&quot; target=&quot;_blank&quot;&gt;special mode for application development&lt;/a&gt;.
      When enabled, a built-in tool called &lt;strong&gt;Probe&lt;/strong&gt; provides a detailed insight into internals of a CDI application.
      Probe makes it easy to inspect:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;bean archives&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;beans and their properties such as qualifiers, stereotypes and name&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;a graph of bean dependencies&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;observers and producers declared by beans&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;interceptors and decorators bound to a bean&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;extensions&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;information about current contextual instances&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;tracking of invocations and invocation trees&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;tracking of fired events&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld configuration&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;and more!&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Before you start reading, you might want to check the &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess/weld-probe&quot; target=&quot;_blank&quot;&gt;live demo hosted on OpenShift&lt;/a&gt; and see what Probe can offer.
      Ok, now let’s get it working!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_how_to_enable_the_development_mode&quot;&gt;How to enable the development mode&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;No surprise that the development mode is &lt;em&gt;DISABLED&lt;/em&gt; by default.
      It should &lt;em&gt;NEVER&lt;/em&gt; be used in production as it may have negative impact on performance and/or represent a potential security risk.
      Note that if you successfully enable the development mode you should see &lt;code&gt;Weld Development Mode: ENABLED&lt;/code&gt; warning in the log during application bootstrap.
      Make sure to disable the development mode before deploying to production!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_web_application&quot;&gt;Web application&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For any web application, set the Servlet initialization parameter &lt;code&gt;org.jboss.weld.development&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;web-app&amp;gt;
          &amp;lt;context-param&amp;gt;
              &amp;lt;param-name&amp;gt;org.jboss.weld.development&amp;lt;/param-name&amp;gt;
              &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt;
          &amp;lt;/context-param&amp;gt;
      &amp;lt;/web-app&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_wildfly&quot;&gt;WildFly&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Since WildFly 10 it’s also possible to enable the Weld development mode globally (i.e. for all the applications deployed) by setting &lt;code&gt;development-mode&lt;/code&gt; attribute to true:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;/subsystem=weld:write-attribute(name=development-mode,value=true)&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See also &lt;a href=&quot;https://docs.jboss.org/author/display/WFLY10/CDI+Reference&quot; target=&quot;_blank&quot;&gt;WildFly CDI Reference&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_weld_se&quot;&gt;Weld SE&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For a Java SE application, set the system property &lt;code&gt;org.jboss.weld.development&lt;/code&gt; to true:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;java -cp myCoolApp.jar -Dorg.jboss.weld.development=true com.foo.MyMain&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;or use the &lt;code&gt;Weld.property()&lt;/code&gt; method:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;org.jboss.weld.environment.se.Weld;
      
      public static void main(String[] args) {
         Weld weld = new Weld().property(&quot;org.jboss.weld.development&quot;, true);
         try (WeldContainer container = weld.initialize()) {
            ...
         }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_how_does_it_actually_work&quot;&gt;How does it actually work?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Probe collects CDI-related data from your application and then makes the data available through the &lt;em&gt;REST API&lt;/em&gt;, eventually through the &lt;em&gt;MXBean&lt;/em&gt; of name &lt;code&gt;org.jboss.weld.probe:type=JsonData,context=ID&lt;/code&gt; where ID should be replaced with an idenfitier of an application.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_probe_ui&quot;&gt;Probe UI&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Probe has also a &lt;em&gt;web UI&lt;/em&gt; (single-page application) available at &lt;code&gt;{webapp-context-path}/weld-probe&lt;/code&gt; (once your webapp starts), e.g. &lt;code&gt;&lt;a class=&quot;bare&quot; href=&quot;http://localhost:8080/weld-numberguess/weld-probe&quot;&gt;http://localhost:8080/weld-numberguess/weld-probe&lt;/a&gt;&lt;/code&gt;.
      By default, Probe also embeds a tiny information bar directly into the application’s HTML output.
      That makes it easy to navigate to Probe directly from the application anytime.
      Furthermore, if invocation tracking is enabled, the information bar helps navigate directly to the invocation tree related to the request that rendered the output.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;The best place to start is probably the &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess/weld-probe#/beans&quot; target=&quot;_blank&quot;&gt;Beans view&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;You may also discover the &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess/weld-probe#/observers?bda=undefined&amp;amp;beanClass=ValidationExtension&quot; target=&quot;_blank&quot;&gt;observer methods declared by an extension&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Monitor all the &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess/weld-probe#/events&quot; target=&quot;_blank&quot;&gt;fired events&lt;/a&gt; and track which observer methods a particular event was delivered to&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;And more…​&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We believe the UI is quite intuitive but feel free to ask questions on any channel (irc, gitter, mailing list, etc.).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      There are some configuration properties which allow to tune or disable Probe features, e.g. to restrict the set of components which will be monitored. See also &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#config-dev-mode&quot; target=&quot;_blank&quot;&gt;Development Mode Configuration&lt;/a&gt;.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_what_if_i_don_t_have_a_webapp&quot;&gt;What if I don’t have a webapp?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Nothing is lost!
      JMX and &lt;a href=&quot;https://github.com/weld/weld-probe-client-adapter&quot; target=&quot;_blank&quot;&gt;weld-probe-client-adapter&lt;/a&gt; come to rescue.
      This &quot;adapter&quot; allows to reuse the default HTML UI even if there is no REST API available (non-web environments).
      The adapter either connects to a JMX server (&lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#config-dev-mode&quot; target=&quot;_blank&quot;&gt;Probe JMX support must be enabled&lt;/a&gt;) or loads data from an exported file (see also &lt;a href=&quot;#probe-offline&quot;&gt;Does it work offline?&lt;/a&gt;), then starts an embedded Undertow webserver instance and exposes the default HTML client but using the data from the first step.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;probe-offline&quot;&gt;Does it work offline?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Sometimes it’s not possible to inspect a running system (e.g. due to security reasons).
      Probe allows to &lt;em&gt;export&lt;/em&gt; the collected data and inspect it &lt;em&gt;offline&lt;/em&gt;.
      There are two ways to export the data:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;Using REST API: HTTP GET &lt;code&gt;{webapp-context-path}/weld-probe/export&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Configure Probe to export data after deployment (see also &lt;code&gt;org.jboss.weld.probe.exportDataAfterDeployment&lt;/code&gt; property in &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#config-dev-mode&quot; target=&quot;_blank&quot;&gt;Development Mode Configuration&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;And now use the &lt;a href=&quot;https://github.com/weld/weld-probe-client-adapter&quot; target=&quot;_blank&quot;&gt;weld-probe-client-adapter&lt;/a&gt; again:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;java -jar weld-probe-client-adapter-1.0.0.Final-shaded.jar /home/weld/weld-probe-export.zip&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/10/01/tip1-logging/</id>
    <title>Weld Tip 1 - Logging</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-10-01T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/10/01/tip1-logging/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="tips"></category>
    <summary>
      
      Contents
      
      Motivation
      Under the hood
      Set the log level and use categories to filter messages
      Monitoring bootstrap
      
      Registered beans
      Actions performed by extensions
      
      
      
      
      
      This is the first article from a series of short articles covering some useful Weld features.
      In this article we talk about logging.
      The topics for the next articles include: DEVELOPMENT MODE, PERFORMANCE, NON-EE ENVIRONMENTS and TESTING.
      
      
      Motivation
      
      
      Logging is usually no fancy stuff.
      But very often it&#8217;s the best thing to start with if problems arise.
      Moreover, it&#8217;s the easiest form of debugging.
      
      
      In this article you will find:
      
      
      
      
      Under the hood - how to control and configure the output
      
      
      Set the log level and use categories to filter messages - how...
    </summary>
    <content type="html">
      &lt;div class=&quot;toc&quot; id=&quot;toc&quot;&gt;
      &lt;div class=&quot;title&quot; id=&quot;toctitle&quot;&gt;Contents&lt;/div&gt;
      &lt;ul class=&quot;sectlevel1&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#_motivation&quot;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#under_the_hood&quot;&gt;Under the hood&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#filter&quot;&gt;Set the log level and use categories to filter messages&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bootstrap&quot;&gt;Monitoring bootstrap&lt;/a&gt;
      &lt;ul class=&quot;sectlevel2&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#_registered_beans&quot;&gt;Registered beans&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_actions_performed_by_extensions&quot;&gt;Actions performed by extensions&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This is the first article from a series of short articles covering some useful Weld features.
      In this article we talk about logging.
      The topics for the next articles include: &lt;strong&gt;DEVELOPMENT MODE&lt;/strong&gt;, &lt;strong&gt;PERFORMANCE&lt;/strong&gt;, &lt;strong&gt;NON-EE ENVIRONMENTS&lt;/strong&gt; and &lt;strong&gt;TESTING&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_motivation&quot;&gt;Motivation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Logging is usually no fancy stuff.
      But very often it’s &lt;em&gt;the best thing to start with if problems arise&lt;/em&gt;.
      Moreover, it’s the easiest form of debugging.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In this article you will find:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;#under_the_hood&quot;&gt;Under the hood&lt;/a&gt; - how to control and configure the output&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;#filter&quot;&gt;Set the log level and use categories to filter messages&lt;/a&gt; - how to keep logs small and to the point&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;#bootstrap&quot;&gt;Monitoring bootstrap&lt;/a&gt; - registered beans, actions performed by extensions&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;under_the_hood&quot;&gt;Under the hood&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld is using &lt;a href=&quot;https://developer.jboss.org/wiki/JBossLoggingTooling&quot;&gt;JBoss Logging&lt;/a&gt;.
      This is an abstraction layer wchich does not &quot;write&quot; any log messages at all.
      Instead, it effectively constructs a log message and then delegates to a back-end logging framework.
      The supported frameworks include &lt;a href=&quot;https://developer.jboss.org/wiki/StandaloneJBossLogManager&quot;&gt;jboss-logmanager&lt;/a&gt;, &lt;a href=&quot;http://logging.apache.org/log4j/2.x/&quot;&gt;Log4j&lt;/a&gt;, &lt;a href=&quot;http://www.slf4j.org/&quot;&gt;SLF4J&lt;/a&gt; and JDK logging.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So which logging framework is actually used to write the Weld messages?
      Well, it depends on the environment.
      In a &lt;strong&gt;Java EE container&lt;/strong&gt; (e.g. WildFly) the logging configuration is under the direction of the container.
      You should follow the container-specific guides to change the configuration (see for example &lt;a href=&quot;https://docs.jboss.org/author/display/WFLY10/Logging+Configuration&quot;&gt;WildFly - Logging Configuration&lt;/a&gt; and &lt;a href=&quot;http://weld.cdi-spec.org/documentation/#7&quot;&gt;How do I enable debug logging for Weld in a specific container?&lt;/a&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A web application deployed to a &lt;strong&gt;servlet container&lt;/strong&gt; usually bundles a logging framework and possibly some configuration file.
      In this case, the configuration is in hands of the application developer.
      If no logging framework is bundled follow the container-specific guides to change the configuration (e.g. &lt;a href=&quot;http://tomcat.apache.org/tomcat-8.0-doc/logging.html&quot;&gt;Logging in Tomcat&lt;/a&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      A system property &lt;code&gt;org.jboss.logging.provider&lt;/code&gt; can be used to specify the logging framework directly. If not set, the JBoss Logging will attempt to find the &quot;best match&quot; on the classpath. See also &lt;a href=&quot;https://github.com/jboss-logging/jboss-logging/blob/master/src/main/java/org/jboss/logging/LoggerProviders.java&quot; target=&quot;_blank&quot;&gt;LoggerProviders&lt;/a&gt;.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In &lt;strong&gt;Java SE&lt;/strong&gt; the situation is very similar to servlet containers except the class loading is usually even less complicated (see also &lt;a href=&quot;http://weld.cdi-spec.org/documentation/#10&quot;&gt; How do I enable debug logging for Weld SE?&lt;/a&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;filter&quot;&gt;Set the log level and use categories to filter messages&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The default log level is usually &lt;code&gt;INFO&lt;/code&gt;.
      Weld does not log that much information with this level.
      You will have to set the log level to &lt;code&gt;DEBUG&lt;/code&gt; (or even &lt;code&gt;TRACE&lt;/code&gt;) to see what’s going on in your application.
      If you set the level globally (for all frameworks and libraries), the log files will be bloated and it will be very hard to get some relevant info from there.
      If you set the level for Weld only (i.e. for &lt;code&gt;org.jboss.weld&lt;/code&gt;), it should be better.
      Moreover, it’s possible to use categories to filter messages from a particular &quot;domain&quot;.
      Weld log messages are grouped into several categories:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;org.jboss.weld.Bootstrap&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;org.jboss.weld.Validator&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;org.jboss.weld.Bean&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;org.jboss.weld.Context&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;org.jboss.weld.El&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;and others (see also &lt;a href=&quot;https://github.com/weld/core/blob/master/impl/src/main/java/org/jboss/weld/logging/Category.java&quot; target=&quot;_blank&quot;&gt;org.jboss.weld.logging.Category&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So for example, if you’re only interested in log messages related to &lt;strong&gt;EL resolution&lt;/strong&gt; set the log level for the &lt;code&gt;org.jboss.weld.El&lt;/code&gt; category to &lt;code&gt;TRACE&lt;/code&gt; (or level with corresponding priority).
      Another useful example is the check of &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#_weld_configuration&quot; target=&quot;_blank&quot;&gt;Weld configuration&lt;/a&gt;.
      Simply set the log level to &lt;code&gt;DEBUG&lt;/code&gt; and filter the &lt;code&gt;org.jboss.weld.Configuration&lt;/code&gt; category:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;DEBUG [Configuration] WELD-001907: Reading properties file: test.war/WEB-INF/classes/weld.properties
      DEBUG [Configuration] WELD-001903: Configuration key RESOLUTION_CACHE_SIZE already set to 1 000 in a source with higher priority, value 500 from system properties is ignored
      DEBUG [Configuration] WELD-001904: Unsupported configuration key found and ignored: com.foo.bar
      DEBUG [Configuration] WELD-001902: Configuration initialized: {CONCURRENT_DEPLOYMENT=false, RESOLUTION_CACHE_SIZE=1000, RELAXED_CONSTRUCTION=true}&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;bootstrap&quot;&gt;Monitoring bootstrap&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI is designed to fail fast.
      An extensive validation is performed during application initialization in order to avoid malicious errors at runtime.
      Container usually also logs a lot of interesting info during bootstrap.
      Let’s try to set the log level to &lt;strong&gt;DEBUG&lt;/strong&gt; for the &lt;code&gt;org.jboss.weld.Bootstrap&lt;/code&gt; category and see what we get.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_registered_beans&quot;&gt;Registered beans&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As simple as it looks - Weld logs &lt;em&gt;all the beans&lt;/em&gt; found in the application, e.g.:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;DEBUG [Bootstrap] WELD-000106: Bean: Managed Bean [class org.jboss.cdi.tck.tests.lookup.dependency.resolution.broken.unsatisfied.Vanilla] with qualifiers [@Any @Default]
      DEBUG [Bootstrap] WELD-000106: Bean: Producer Method [String[]] with qualifiers [@BatchProperty @Any] declared as [[UnbackedAnnotatedMethod] @Produces @BatchProperty public org.jberet.creation.BatchBeanProducer.getStringArray(InjectionPoint)]&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_actions_performed_by_extensions&quot;&gt;Actions performed by extensions&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There is no doubt that portable extensions are really powerful.
      They can change almost anything.
      That’s great for framework/libraries developers.
      On the other hand, this may cause problems when looking for a bug.
      There is an application class provided by a developer but what does the CDI container actually see?
      Well, it depends…​ because portable extensions are allowed to redefine this.
      And that’s why Weld logs all the &lt;em&gt;&quot;modification&quot;&lt;/em&gt; operations performed by extensions, such as &lt;code&gt;ProcessAnnotatedType.veto()&lt;/code&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;DEBUG [Bootstrap] WELD-000148: ProcessAnnotatedType.veto() called by com.foo.MyExtension@50fed5b1 for [BackedAnnotatedType] public class com.foo.Foo&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      If your application deploys successfully, you can use &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/devmode.html#devtools&quot;&gt;Development Tools&lt;/a&gt; to inspect the runtime info (will be covered in one of the follow-up articles).
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/09/13/weld-240Final/</id>
    <title>Weld 2.4.0.Final</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-09-13T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/09/13/weld-240Final/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <summary>
      
      I am very pleased to announce the first stable version of Weld 2.4 (CDI 1.2).
      See also the release details.
      From now on, 2.4 is the current stable version of Weld and 2.3 is not actively developed anymore.
      Thanks to everyone involved in this release!
      
      
      Most of the new features were already introduced in First release candidate of Weld 2.4.
      To sum it up:
      
      
      
      
      Removed dependency on com.google.guava:guava
      
      
      Enhanced version of javax.enterprise.inject.Instance
      
      
      Veto AnnotatedType not annotated with a bean defining annotation
      
      
      @ActivateRequestScope interceptor binding moved to Weld API and renamed to @ActivateRequestContext
      
      
      Improved rolling upgrades support
      
      
      Events - reflect the output of CDI-494
      
      
      Probe - allow to filter unused beans
      
      
      Cleanup, cleanup, cleanup&#8230;&#8203;
      
      
      Initial...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I am very pleased to announce the &lt;strong&gt;first stable version of Weld 2.4&lt;/strong&gt; (CDI 1.2).
      See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331363&quot; target=&quot;_blank&quot;&gt;the release details&lt;/a&gt;.
      From now on, 2.4 is the current stable version of Weld and 2.3 is not actively developed anymore.
      Thanks to everyone involved in this release!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Most of the new features were already introduced in &lt;a href=&quot;http://weld.cdi-spec.org/news/2016/08/19/weld-240CR1&quot; target=&quot;_blank&quot;&gt;First release candidate of Weld 2.4&lt;/a&gt;.
      To sum it up:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Removed dependency on &lt;code&gt;com.google.guava:guava&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Enhanced version of &lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Veto &lt;code&gt;AnnotatedType&lt;/code&gt; not annotated with a bean defining annotation&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;@ActivateRequestScope&lt;/code&gt; interceptor binding moved to Weld API and renamed to &lt;code&gt;@ActivateRequestContext&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Improved rolling upgrades support&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Events - reflect the output of CDI-494&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Probe - allow to filter unused beans&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Cleanup, cleanup, cleanup…​&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Initial Java 9 support&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Moreover, 2.4.0.Final allows to export the Probe development tool data (to be discussed in one of the following blog posts) and fixes a minor problem in non-EE environments (see also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2227&quot;&gt;WELD-2227&lt;/a&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the coming weeks, the Weld team is also going to publish &lt;strong&gt;&quot;Weld tips&quot;&lt;/strong&gt; - a series of concise articles.
      The intention is to familiarize developers with less known Weld features.
      There will be no hot news, just useful existing features (repetition is the mother of wisdom ;-).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.0.Final/wildfly-10.1.0.Final-weld-2.4.0.Final-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.1.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot; target=&quot;_blank&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
      [ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.0.Final/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12331363&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/08/19/weld-240CR1/</id>
    <title>First release candidate of Weld 2.4</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-08-19T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/08/19/weld-240CR1/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <summary>
      
      Contents
      
      Removed dependency on com.google.guava:guava
      Enhanced version of javax.enterprise.inject.Instance
      Veto AnnotatedType not annotated with bean defining annotation
      @ActivateRequestScope moved to Weld API
      Improved rolling upgrades support
      Events - reflect the output of CDI-494
      Probe - allow to filter unused beans
      Cleanup
      Initial Java 9 support
      Bugs
      WildFly Patch
      
      
      
      I am pleased to announce the first release candidate of Weld 2.4 (CDI 1.2).
      See also the release details.
      Thanks to everyone involved in this release!
      
      
      Removed dependency on com.google.guava:guava
      
      
      Weld does not depend on com.google.guava:guava anymore (actually, Weld 3 does not depend on guava since 3.0.0.Alpha2).
      This significantly reduces the footprint of both Weld SE and Weld Servlet.
      The dependency is also not bundled with shaded artifacts for Weld...
    </summary>
    <content type="html">
      &lt;div class=&quot;toc&quot; id=&quot;toc&quot;&gt;
      &lt;div class=&quot;title&quot; id=&quot;toctitle&quot;&gt;Contents&lt;/div&gt;
      &lt;ul class=&quot;sectlevel1&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#_removed_dependency_on_code_com_google_guava_guava_code&quot;&gt;Removed dependency on &lt;code&gt;com.google.guava:guava&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_enhanced_version_of_code_javax_enterprise_inject_instance_code&quot;&gt;Enhanced version of &lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_veto_code_annotatedtype_code_not_annotated_with_bean_defining_annotation&quot;&gt;Veto &lt;code&gt;AnnotatedType&lt;/code&gt; not annotated with bean defining annotation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#__code_activaterequestscope_code_moved_to_weld_api&quot;&gt;&lt;code&gt;@ActivateRequestScope&lt;/code&gt; moved to Weld API&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_improved_rolling_upgrades_support&quot;&gt;Improved rolling upgrades support&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_events_reflect_the_output_of_cdi_494&quot;&gt;Events - reflect the output of CDI-494&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_probe_allow_to_filter_unused_beans&quot;&gt;Probe - allow to filter unused beans&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_cleanup&quot;&gt;Cleanup&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_initial_java_9_support&quot;&gt;Initial Java 9 support&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_bugs&quot;&gt;Bugs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#_wildfly_patch&quot;&gt;WildFly Patch&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I am pleased to announce the first release candidate of Weld 2.4 (CDI 1.2).
      See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12330683&quot; target=&quot;_blank&quot;&gt;the release details&lt;/a&gt;.
      Thanks to everyone involved in this release!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_removed_dependency_on_code_com_google_guava_guava_code&quot;&gt;Removed dependency on &lt;code&gt;com.google.guava:guava&lt;/code&gt;&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld does not depend on &lt;code&gt;com.google.guava:guava&lt;/code&gt; anymore (actually, Weld 3 does not depend on guava since 3.0.0.Alpha2).
      This significantly reduces the footprint of both Weld SE and Weld Servlet.
      The dependency is also not bundled with shaded artifacts for Weld SE and Weld Servlet.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_enhanced_version_of_code_javax_enterprise_inject_instance_code&quot;&gt;Enhanced version of &lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt;&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld now provides &lt;code&gt;org.jboss.weld.inject.WeldInstance&lt;/code&gt; - an enhanced version of &lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt;.
      There are three additional methods - &lt;code&gt;getHandler()&lt;/code&gt;, &lt;code&gt;handlers()&lt;/code&gt; and &lt;code&gt;isResolvable()&lt;/code&gt;.
      A handler allows to inspect the metadata of the relevant bean and to destroy the underlying contextual instance.
      &lt;code&gt;isResolvable()&lt;/code&gt; is just a convenient method - a replacement for &lt;code&gt;!isUnsatisfied() &amp;amp;&amp;amp; !isAmbiguous()&lt;/code&gt;.
      For more details see also &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.0.CR1/en-US/html/injection.html#_enhanced_version_of_literal_javax_enterprise_inject_instance_literal&quot; target=&quot;_blank&quot;&gt;the reference guide&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;WeldInstance&lt;/code&gt; is automatically available in Weld SE and Weld Servlet where the Weld API is always on the class path.
      It is also available in Weld-powered EE containers. In this case, users would have to compile their application against the Weld API and exclude the Weld API artifact from the deployment (e.g. use provided scope in Maven).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This functionality is based on a new proposal for &lt;a href=&quot;https://issues.jboss.org/browse/CDI-589&quot; target=&quot;_blank&quot;&gt;CDI-589&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_veto_code_annotatedtype_code_not_annotated_with_bean_defining_annotation&quot;&gt;Veto &lt;code&gt;AnnotatedType&lt;/code&gt; not annotated with bean defining annotation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Sometimes it might be useful to process all types during bootstrap, i.e. fire/observe &lt;code&gt;ProcessAnnotatedType&lt;/code&gt; event for each Java class discovered, but veto types which are &lt;strong&gt;not annotated with a bean defining annotation&lt;/strong&gt;.
      The main reason is that not all classes that meet all of the necessary conditions are intended to become beans.
      And so vetoing such types helps to conserve memory used by the container.
      Note that if you use &lt;code&gt;bean-discovey-mode=annotated&lt;/code&gt; (implicit bean archive) then no &lt;code&gt;ProcessAnnotatedType&lt;/code&gt; will be fired for any such type because it’s not discovered at all.
      And there might be portable extensions which use &lt;code&gt;ProcessAnnotatedType&lt;/code&gt; to extract some important information from classes which are not beans.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Therefore, Weld allows to use &lt;code&gt;bean-discovey-mode=all&lt;/code&gt; (explicit bean archive) and veto types without a bean defining annotation whose &lt;code&gt;AnnotatedType#getJavaClass().getName()&lt;/code&gt; matches a &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.0.CR1/en-US/html/configure.html#veto-types-without-bean-defining-annotation&quot;&gt;regular expression&lt;/a&gt;.
      In other words, a type is vetoed if its name matches a regular expression and at the same time is not annotated with a bean defining annotation.
      This functionality is implemented as a built-in portable extension processing all types from all bean archives (it was already doable using an extension but we believe it’s more convenient to have this functionality out of the box).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This is a workaround for problems of &lt;code&gt;bean-discovey-mode=annotated&lt;/code&gt; mentioned in &lt;a href=&quot;https://issues.jboss.org/browse/CDI-420&quot; target=&quot;_blank&quot;&gt;CDI-420&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;__code_activaterequestscope_code_moved_to_weld_api&quot;&gt;&lt;code&gt;@ActivateRequestScope&lt;/code&gt; moved to Weld API&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This interceptor binding can be used to activate the request scope within a business method invocation.
      It was previously part of the Weld SE but we believe it might be useful in any environment.
      See also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2150&quot; target=&quot;_blank&quot;&gt;WELD-2150&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_improved_rolling_upgrades_support&quot;&gt;Improved rolling upgrades support&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ViewProfile.jspa?name=lprimak&quot;&gt;Lenny Primak&lt;/a&gt; (a Weld community member - thanks for the report again!) struggled with rolling upgrades on certain application servers (Payara, GlassFish).
      Therefore, a new configuration property was introduced.
      This property allows to specify a delimiter which is used to abbreviate a bean archive identifier (which is usually derived from the archive name) before used as a part of an identifier of an internal component (such as bean).
      See also &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.0.CR1/en-US/html/configure.html#_rolling_upgrades_id_delimiter&quot; target=&quot;_blank&quot;&gt;the reference guide&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2064&quot; target=&quot;_blank&quot;&gt;WELD-2064&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_events_reflect_the_output_of_cdi_494&quot;&gt;Events - reflect the output of CDI-494&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This change reflects the clarification around &lt;code&gt;Event&lt;/code&gt; operations - &lt;em&gt;&quot;A wildcard type is not considered an unresolvable type variable&quot;&lt;/em&gt;.
      See also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2137&quot; target=&quot;_blank&quot;&gt;WELD-2137&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/CDI-494&quot; target=&quot;_blank&quot;&gt;CDI-494&lt;/a&gt;.
      Simply said, the snippet below and similar ones should now work:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Inject Event&amp;lt;List&amp;lt;?&amp;gt;&amp;gt; event;
      
      public void fireLists() {
        List&amp;lt;String&amp;gt; stringList = new ArrayList&amp;lt;&amp;gt;();
        event.fire(stringList);
        List&amp;lt;Integer&amp;gt; intList = new ArrayList&amp;lt;&amp;gt;();
        event.fire(intList);
      }
      
      void observeAllLists(@Observes List&amp;lt;?&amp;gt; anyList) {
        // Will be notified
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_probe_allow_to_filter_unused_beans&quot;&gt;Probe - allow to filter unused beans&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Probe development tool now identifies beans which are most likely unused (a bean is considered unused if it has no direct dependents, does not declare any observer or producer methods, is not annotated with &lt;code&gt;@Named&lt;/code&gt; and is not a built-in bean, extension, interceptor or decorator).
      This might be useful to identify types suitable for vetoing as mentioned in &lt;a href=&quot;#_veto_code_annotatedtype_code_not_annotated_with_bean_defining_annotation&quot;&gt;Veto &lt;code&gt;AnnotatedType&lt;/code&gt; not annotated with bean defining annotation&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_cleanup&quot;&gt;Cleanup&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld has underwent an internal cleanup. A lot of deprecated and unused classes were removed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_initial_java_9_support&quot;&gt;Initial Java 9 support&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It’s now possible to build Weld with Java 9.
      Note that this does not mean that Weld is modularized in a &lt;a href=&quot;http://openjdk.java.net/projects/jigsaw/&quot; target=&quot;_blank&quot;&gt;Jigsaw way&lt;/a&gt;.
      It’s just the first step on a long road ;-).&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_bugs&quot;&gt;Bugs&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Last but not least - a few bugs were killed.
      Weld SE - provided &lt;code&gt;ClassLoader&lt;/code&gt; is also used to load extensions (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2209&quot; target=&quot;_blank&quot;&gt;WELD-2209&lt;/a&gt;).
      &lt;code&gt;AnnotatedTypeValidator&lt;/code&gt; does consider extended interfaces (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2221&quot; target=&quot;_blank&quot;&gt;WELD-2221&lt;/a&gt;).
      Invocation of a JDK8 default method should be intercepted (this only works if using &lt;code&gt;jboss-classfilewriter&lt;/code&gt; 1.2.0.Beta1+, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2093&quot; target=&quot;_blank&quot;&gt;WELD-2093&lt;/a&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.4.0.CR1/wildfly-10.0.0.Final-weld-2.4.0.CR1-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.0.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot; target=&quot;_blank&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
      [ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.4.0.CR1/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12330683&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/07/21/arq-container-weld-releasel/</id>
    <title>Arquillian container Weld 2.0.0.Beta1 released!</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-07-21T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/07/21/arq-container-weld-releasel/" rel="alternate" type="text/html" />
    <author>
      <name>Tomas Remes</name>
    </author>
    <category term="arquillian"></category>
    <category term="testing"></category>
    <summary>
      
      We are pleased to announce a release of embedded Arquillian container adapter for Weld.
      This container has deserved some love for really long time.
      We tried to refactor it and introduced new master branch which now corresponds to the 2.0.0.x version stream.
      The original master was branched in 1.0.
      There is no more any arquillian-weld-ee-embedded-1.1 or arquillian-weld-se-embedded.
      It&#8217;s squashed to one arquillian-weld-embedded and you can configure environments either programmatically or using configuration properties.
      See link:https://github.com/arquillian/arquillian-container-weld
      This new version is going to be used in Weld as soon as possible.
      
      
      Maven Coordinates:
      
          &lt;dependency&gt;
              &lt;groupId&gt;org.jboss.arquillian.container&lt;/groupId&gt;
           ...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are pleased to announce a release of embedded Arquillian container adapter for Weld.
      This container has deserved some love for really long time.
      We tried to refactor it and introduced new master branch which now corresponds to the 2.0.0.x version stream.
      The original master was branched in 1.0.
      There is no more any &lt;code&gt;arquillian-weld-ee-embedded-1.1&lt;/code&gt; or &lt;code&gt;arquillian-weld-se-embedded&lt;/code&gt;.
      It’s squashed to one &lt;code&gt;arquillian-weld-embedded&lt;/code&gt; and you can configure environments either programmatically or using configuration properties.
      See link:https://github.com/arquillian/arquillian-container-weld
      This new version is going to be used in Weld as soon as possible.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Maven Coordinates:&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &amp;lt;dependency&amp;gt;
              &amp;lt;groupId&amp;gt;org.jboss.arquillian.container&amp;lt;/groupId&amp;gt;
              &amp;lt;artifactId&amp;gt;arquillian-weld-embedded&amp;lt;/artifactId&amp;gt;
              &amp;lt;version&amp;gt;2.0.0.Beta1&amp;lt;/version&amp;gt;
          &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We would really appreciate if you can try it and let us know your experience!&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/07/01/weld-235Final/</id>
    <title>Weld 2.3.5.Final</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-07-01T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/07/01/weld-235Final/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <category term="plans"></category>
    <summary>
      
      The next version of the stable 2.3 branch has been released!
      See also the release details.
      Thanks to everyone involved in this release!
      
      
      We plan to create the 2.4 branch of Weld within a few weeks.
      Weld 2.4 will remain a CDI 1.2 implementation.
      We would like to do some cleanup (e.g. remove deprecated classes from Weld SE), enhance the API and also add some new features.
      See also the list of issues for 2.4.0.CR1.
      
      
      Notable bugfixes and improvements:
      
      
      
      
      fixed static disposer method invocation (WELD-2176)
      
      
      fixed private observer/producer/disposer invocation on a bean with decorator (WELD-2179)
      
      
      fixed Instance.destroy() for dependent session beans (WELD-2148)
      
      
      fixed ArraySet.hashCode() to comply with java.util.Set.hashCode() contract (WELD-2185)
      
      
      log veto...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The next version of the stable 2.3 branch has been released!
      See also &lt;a href=&quot;https://issues.jboss.org/projects/WELD/versions/12330052&quot; target=&quot;_blank&quot;&gt;the release details&lt;/a&gt;.
      Thanks to everyone involved in this release!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We plan to create the &lt;strong&gt;2.4 branch&lt;/strong&gt; of Weld within a few weeks.
      Weld 2.4 will remain a &lt;strong&gt;CDI 1.2&lt;/strong&gt; implementation.
      We would like to do some cleanup (e.g. remove deprecated classes from Weld SE), enhance the API and also add some new features.
      See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12330683&quot; target=&quot;_blank&quot;&gt;the list of issues for 2.4.0.CR1&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Notable bugfixes and improvements:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;fixed static disposer method invocation (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2176&quot; target=&quot;_blank&quot;&gt;WELD-2176&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;fixed private observer/producer/disposer invocation on a bean with decorator (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2179&quot; target=&quot;_blank&quot;&gt;WELD-2179&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;fixed &lt;code&gt;Instance.destroy()&lt;/code&gt; for dependent session beans (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2148&quot; target=&quot;_blank&quot;&gt;WELD-2148&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;fixed &lt;code&gt;ArraySet.hashCode()&lt;/code&gt; to comply with &lt;code&gt;java.util.Set.hashCode()&lt;/code&gt; contract (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2185&quot; target=&quot;_blank&quot;&gt;WELD-2185&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;log veto actions and modifications of lists returned by &lt;code&gt;AfterTypeDiscovery&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2170&quot; target=&quot;_blank&quot;&gt;WELD-2170&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2171&quot; target=&quot;_blank&quot;&gt;WELD-2171&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;log a warning when a class is annotated with a scope but does not declare an appropriate constructor (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2178&quot; target=&quot;_blank&quot;&gt;WELD-2178&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;support extension deployed in multiple WARs in an EAR (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2143&quot; target=&quot;_blank&quot;&gt;WELD-2143&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;detect non-unique &lt;code&gt;BeanDeploymentArchive&lt;/code&gt; identifier (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2165&quot; target=&quot;_blank&quot;&gt;WELD-2165&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld Servlet&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;fixed extraction of bean archive id - problem occures with embedded Jetty (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2161&quot; target=&quot;_blank&quot;&gt;WELD-2161&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;improve the way &lt;code&gt;JandexDiscoveryStrategy&lt;/code&gt; identifies an annotation annotated with &lt;code&gt;@NormalScope&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2160&quot; target=&quot;_blank&quot;&gt;WELD-2160&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;weld-servlet-core&lt;/code&gt; declares dependency on &lt;code&gt;weld-core-jsf&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld SE&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;do not pass system properties to Weld configuration (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2146&quot; target=&quot;_blank&quot;&gt;WELD-2146&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Probe - allow to test bean availability in a given bean archive&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;check for example the availability of an alternative in the &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess/weld-probe#/availableBeans?bda=2b32e9d8-9a3c-34e9-b3f6-49753fedc76e&amp;amp;requiredType=org.jboss.weld.examples.numberguess.AnotherGameBean&quot; target=&quot;_blank&quot;&gt;demo application&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;many documentation and reference guide updates&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.3.5.Final/wildfly-10.0.0.Final-weld-2.3.5.Final-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.0.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot; target=&quot;_blank&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
      [ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.5.Final/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12330052&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/06/21/update-on-weld-vertx/</id>
    <title>Update on weld-vertx</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-06-21T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/06/21/update-on-weld-vertx/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="vertx"></category>
    <category term="integration"></category>
    <summary>
      
      This is a follow-up on the article Weld meets Vert.x.
      Weld team has just released the first alpha version of weld-vertx (artifacts are available in Maven Central).
      Since the last time we talked about weld-vertx two new features were added.
      First, it&#8217;s possible to inject the relevant io.vertx.core.Vertx and io.vertx.core.Context instances direcly into beans.
      Also there is a new module called weld-vertx-web which extends functionality of weld-vertx-core and io.vertx:vertx-web and allows to register Route handlers discovered during container initialization.
      In other words, it&#8217;s possible to configure a Route in a declarative way:
      
      
      
      import javax.inject.Inject;
      
      import org.jboss.weld.vertx.web.WebRoute;
      
      import io.vertx.core.Handler;
      import io.vertx.ext.web.RoutingContext;
      
      // This annotation is used to configure a Route
      @WebRoute("/hello")
      public class...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This is a follow-up on the article &lt;a href=&quot;http://weld.cdi-spec.org/news/2016/04/11/weld-meets-vertx/&quot; target=&quot;_blank&quot;&gt;Weld meets Vert.x&lt;/a&gt;.
      Weld team has just released the first alpha version of &lt;a href=&quot;https://github.com/weld/weld-vertx&quot; target=&quot;_blank&quot;&gt;weld-vertx&lt;/a&gt; (artifacts are available in &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cweld-vertx&quot; target=&quot;_blank&quot;&gt;Maven Central&lt;/a&gt;).
      Since the last time we talked about &lt;code&gt;weld-vertx&lt;/code&gt; two new features were added.
      First, it’s possible to inject the relevant &lt;code&gt;io.vertx.core.Vertx&lt;/code&gt; and &lt;code&gt;io.vertx.core.Context&lt;/code&gt; instances direcly into beans.
      Also there is a new module called &lt;code&gt;weld-vertx-web&lt;/code&gt; which extends functionality of &lt;code&gt;weld-vertx-core&lt;/code&gt; and &lt;code&gt;io.vertx:vertx-web&lt;/code&gt; and allows to register &lt;code&gt;Route&lt;/code&gt; handlers discovered during container initialization.
      In other words, it’s possible to configure a &lt;code&gt;Route&lt;/code&gt; in a declarative way:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import javax.inject.Inject;
      
      import org.jboss.weld.vertx.web.WebRoute;
      
      import io.vertx.core.Handler;
      import io.vertx.ext.web.RoutingContext;
      
      // This annotation is used to configure a Route
      @WebRoute(&quot;/hello&quot;)
      public class HelloHandler implements Handler&amp;lt;RoutingContext&amp;gt; {
      
          @Inject
          SayHelloService service;
      
          @Override
          public void handle(RoutingContext ctx) {
              ctx.response().setStatusCode(200).end(service.hello());
          }
      
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The registered handler instances are NOT real bean instances, i.e. they’re not managed by the CDI container (similarly as &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#javaee_components&quot;&gt;Java EE components&lt;/a&gt;).
      However, the &lt;strong&gt;dependency injection&lt;/strong&gt; is supported.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The central point of integration is the &lt;code&gt;org.jboss.weld.vertx.web.WeldWebVerticle&lt;/code&gt;.
      This Verticle extends &lt;code&gt;org.jboss.weld.vertx.WeldVerticle&lt;/code&gt; and provides the &lt;code&gt;WeldWebVerticle.registerRoutes(Router)&lt;/code&gt; method:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; class MyApp {
      
           public static void main(String[] args) {
               final Vertx vertx = Vertx.vertx();
               final WeldWebVerticle weldVerticle = new WeldWebVerticle();
      
               vertx.deployVerticle(weldVerticle, result -&amp;gt; {
      
                   if (result.succeeded()) {
                       // Configure the router after Weld bootstrap finished
                       Router router = Router.router(vertx);
                       router.route().handler(BodyHandler.create());
                       weldVerticle.registerRoutes(router);
                       vertx.createHttpServer().requestHandler(router::accept).listen(8080);
                   }
               });
           }
       }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Give it a try and let us know if you have any idea how to extend the functionality of &lt;code&gt;weld-vertx&lt;/code&gt;.
      Any feedback is appreciated!&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/05/18/enhanced-instance/</id>
    <title>Programmatic lookup improvements</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-05-18T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/05/18/enhanced-instance/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="api"></category>
    <category term="draft"></category>
    <summary>
      
      javax.enterprise.inject.Instance is sometimes invaluable companion.
      For example, Instance allows you to handle unsatisfied and ambiguous dependencies gracefully.
      E.g. it&#8217;s possible to avoid unnecessary deployment problems:
      
      
      
      interface OrderProcessor {
        void process(Order order);
        int getPriority();
      }
      
      class OrderService {
      
        @Inject
        Instance&lt;OrderProcessor&gt; instance;
      
        void create(Order order) {
          if (!instance.isUnsatisfied() &amp;&amp; !instance.isAmbiguous()) {
              instance.get().process(order);
          } else {
              // Log a warning or throw an exception
          }
        }
      }
      
      
      
      It is less known that Instance extends Iterable and so it allows to iterate...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt; is sometimes invaluable companion.
      For example, &lt;code&gt;Instance&lt;/code&gt; allows you to handle unsatisfied and ambiguous dependencies gracefully.
      E.g. it’s possible to avoid unnecessary deployment problems:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;interface OrderProcessor {
        void process(Order order);
        int getPriority();
      }
      
      class OrderService {
      
        @Inject
        Instance&amp;lt;OrderProcessor&amp;gt; instance;
      
        void create(Order order) {
          if (!instance.isUnsatisfied() &amp;amp;&amp;amp; !instance.isAmbiguous()) {
              instance.get().process(order);
          } else {
              // Log a warning or throw an exception
          }
        }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It is less known that &lt;code&gt;Instance&lt;/code&gt; extends &lt;code&gt;Iterable&lt;/code&gt; and so it allows to iterate through contextual references of beans with the specified combination of required type and qualifiers.
      This might be useful if the set of beans satisfying the given type and qualifiers is not known beforehand.
      We may also need to resolve ambiguities manually, e.g. inspect all the instances and choose only those matching our needs.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
      class OrderService {
      
        @Inject
        @Any
        Instance&amp;lt;OrderProcessor&amp;gt; instance;
      
        void create(Order order) {
          for (OrderProcessor processor : instance) {
              if (processor.getPriority() &amp;gt; 10) {
                  processor.process(order);
              }
          }
        }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Another interesting use case might be selecting exactly one implementation:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
      class OrderService {
      
        @Inject
        @Any
        Instance&amp;lt;OrderProcessor&amp;gt; instance;
      
        void create(Order order) {
          List&amp;lt;OrderProcessor&amp;gt; processors = new ArrayList&amp;lt;&amp;gt;();
          for (OrderProcessor processor : instance) {
              processors.add(processor);
          }
          Collections.sort(processors, Comparator.&amp;lt;OrderProcessor&amp;gt; comparingInt(p -&amp;gt; p.getPriority()).reversed());
          // Use the processor with highest priority
          processors.get(0).ping();
        }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This works nice.
      But we have to pay extra attention to the scopes.
      If a &lt;code&gt;Processor&lt;/code&gt; implementation is &lt;code&gt;@Dependent&lt;/code&gt; a similar usage results in memory leaks.
      What’s the reason?
      The &lt;code&gt;Processor&lt;/code&gt; instance is the dependent object of &lt;code&gt;Instance&amp;lt;OrderProcessor&amp;gt;&lt;/code&gt; which is the dependent object of &lt;code&gt;OrderService&lt;/code&gt;.
      And so each &lt;code&gt;Instance.get()&lt;/code&gt; will produce a new &lt;code&gt;Processor&lt;/code&gt; bound to the lifecycle of the &lt;code&gt;OrderService&lt;/code&gt;.
      To avoid the leak we should always call &lt;code&gt;Instance.destroy()&lt;/code&gt; method in similar cases.
      However, &lt;code&gt;Instance.destroy()&lt;/code&gt; always destroys the underlying contextual instance!
      Even if you pass e.g. a client proxy of an &lt;code&gt;@ApplicationScoped&lt;/code&gt; bean.
      This is not always desirable.
      Currently, it’s quite complicated to detect a dependent bean inside the loop.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To extend the possibilities the Weld team is experimenting with &lt;code&gt;org.jboss.weld.inject.WeldInstance&lt;/code&gt; - an enhanced version of &lt;code&gt;javax.enterprise.inject.Instance&lt;/code&gt;.
      There are three new methods we find useful. The first one - &lt;code&gt;getHandler()&lt;/code&gt; - allows to obtain a contextual reference handler which not only holds the contextual reference but also allows to inspect the metadata of the relevant bean and to destroy the underlying contextual instance.
      Moreover, the handler implements &lt;code&gt;AutoCloseable&lt;/code&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.jboss.weld.inject.WeldInstance;
      
      class Foo {
      
        @Inject
        WeldInstance&amp;lt;Bar&amp;gt; instance;
      
        void doWork() {
          try (Handler&amp;lt;Bar&amp;gt; bar = instance.getHandler()) {
              bar.get().doBusiness();
              // Note that Bar will be automatically destroyed at the end of the try-with-resources statement
          }
      
          Handler&amp;lt;Bar&amp;gt; bar = instance.getHandler()
          bar.get().doBusiness();
          // Calls Instance.destroy()
          bar.destroy();
        }
      
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The next method - &lt;code&gt;handlerIterator()&lt;/code&gt; - returns an iterator over contextual reference handlers. This might be useful if you need more control over contextual references inside the loop:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@ApplicationScoped
      class OrderService {
      
        @Inject
        @Any
        WeldInstance&amp;lt;OrderProcessor&amp;gt; instance;
      
        void create(Order order) {
          for (Iterator&amp;lt;Handler&amp;lt;OrderProcessor&amp;gt;&amp;gt; iterator = instance.handlerIterator(); iterator.hasNext();) {
                  Handler&amp;lt;OrderProcessor&amp;gt; processor = iterator.next();
                  processor.get().process(order);
                  if (processor.getBean().getScope().equals(Dependent.class)) {
                      // Destroy only dependent processors
                      processor.destroy();
                  }
              }
        }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The last one is just a convenient method - &lt;code&gt;isResolvable()&lt;/code&gt; - a replacement for &lt;code&gt;!isUnsatisfied() &amp;amp;&amp;amp; !isAmbiguous()&lt;/code&gt; which is the expression most users are interested in:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class OrderService {
      
        @Inject
        Instance&amp;lt;OrderProcessor&amp;gt; instance;
      
        void create(Order order) {
          if (instance.isResolvable()) {
              instance.get().process(order);
          } else {
              // Log a warning or throw an exception
          }
        }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld team is considering adding &lt;code&gt;org.jboss.weld.inject.WeldInstance&lt;/code&gt; to the Weld API (2.4 and 3.0).
      &lt;code&gt;WeldInstance&lt;/code&gt; would be automatically available in Weld SE and Weld Servlet where the Weld API is always on the class path.
      It would be also available in Weld-powered EE containers - in this case, users would have to compile their application against the Weld API and exclude the Weld API artifact from the deployment (e.g. use &lt;code&gt;provided&lt;/code&gt; scope in Maven).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2151&quot; target=&quot;_blank&quot;&gt;WELD-2151&lt;/a&gt; and the work in progress: &lt;a class=&quot;bare&quot; href=&quot;https://github.com/mkouba/core/tree/WELD-2151&quot;&gt;https://github.com/mkouba/core/tree/WELD-2151&lt;/a&gt;.
      And feel free to add comments to this blog post.
      Any feedback is appreciated!&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/04/28/weld-300Alpha16/</id>
    <title>Weld 3.0.0.Alpha16</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-04-28T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/04/28/weld-300Alpha16/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <category term="cdi2"></category>
    <summary>
      
      The next experimental Weld version has been released!
      See also the release details.
      Thanks to everyone involved in this release!
      
      
      This release includes a lot of bugfixes and improvements (e.g. all the notable tasks implemented in the latest stable version: Weld 2.3.4.Final).
      However, the main goal of this release is to align with CDI API 2.0.Alpha4, and in particular to implement the current version of "metadata builders" API (CDI-558).
      So that everyone can play with the API, discover possibilities and find potential issues.
      Note that this release also introduces a non-standard experimental feature: Weld SE synthetic container lifecycle event observers.
      So it should be even easier to...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The next experimental Weld version has been released!
      See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12327858&quot; target=&quot;_blank&quot;&gt;the release details&lt;/a&gt;.
      Thanks to everyone involved in this release!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release includes a lot of bugfixes and improvements (e.g. all the notable tasks implemented in the latest stable version: &lt;a href=&quot;http://weld.cdi-spec.org/news/2016/04/22/weld-234Final/&quot;&gt;Weld 2.3.4.Final&lt;/a&gt;).
      However, the main goal of this release is to align with CDI API 2.0.Alpha4, and in particular to implement the current version of &quot;metadata builders&quot; API (&lt;a href=&quot;https://issues.jboss.org/browse/CDI-558&quot; target=&quot;_blank&quot;&gt;CDI-558&lt;/a&gt;).
      So that everyone can play with the API, discover possibilities and find potential issues.
      Note that this release also introduces a non-standard experimental feature: &lt;a href=&quot;http://weld.cdi-spec.org/news/2016/02/08/weld-se-synth-lifecycle-events/&quot;&gt;Weld SE synthetic container lifecycle event observers&lt;/a&gt;.
      So it should be even easier to get started - no extension class is needed in Weld SE.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_metadata_configurators_basic_ideas&quot;&gt;Metadata configurators - basic ideas&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Note that we don’t use the term &quot;builder&quot; because there is no &lt;code&gt;build()&lt;/code&gt; method in the API.
      Also note that the API is not intended to cover every possible case.
      Instead, we would like to help with common tasks.
      And if necessary, an extension developer can always use the original replacement methods for more complicated stuff.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;IMPORTANT POINTS:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;an extension developer receives a configurator instance from a container lifecycle event&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;a configurator instance is always automatically processed at the end of the observer invocation&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;for &lt;strong&gt;bean discovery events&lt;/strong&gt; (all events starting with &lt;code&gt;Process&lt;/code&gt;):&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;configureX()&lt;/code&gt; methods return the same configurator instance (for the given observer method invocation)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the configurator is initialized/preconfigured with the component being processed, e.g. &lt;code&gt;ProcessAnnotatedType.configureAnnotatedType()&lt;/code&gt; returns a configurator initialized with &lt;code&gt;ProcessAnnotatedType.getAnnotatedType()&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the result of the configurator will automatically replace the original component (e.g. &lt;code&gt;AnnotatedType&lt;/code&gt; in case of &lt;code&gt;ProcessAnnotatedType&lt;/code&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;replacement methods (e.g. &lt;code&gt;ProcessAnnotatedType.setAnnotatedType()&lt;/code&gt;) should not be used together with configurators (&lt;a href=&quot;https://issues.jboss.org/browse/CDI-596&quot; target=&quot;_blank&quot;&gt;CDI-596&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;for &lt;strong&gt;application lifecycle events&lt;/strong&gt; (e.g. &lt;code&gt;AfterBeanDiscovery&lt;/code&gt;):&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;addX()&lt;/code&gt; methods always return a new configurator instance&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the configurator is always uninitialized/empty, but we should probably define some default values wherever it makes sense (e.g. &lt;code&gt;Reception&lt;/code&gt; for observer methods)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the result of the configurator will be automatically added (e.g. &lt;code&gt;Bean&lt;/code&gt; in case of &lt;code&gt;AfterBeanDiscovery.addBean()&lt;/code&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We have prepared some simple examples - see below.
      More advanced examples can be found in &lt;a href=&quot;https://github.com/cdi-spec/cdi-tck/tree/master/impl/src/main/java/org/jboss/cdi/tck/tests/extensions/configurators&quot; target=&quot;_blank&quot;&gt;the TCK test cases&lt;/a&gt;.
      And as usual - feel free to add comments to this blog post. Any feedback is appreciated!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_beforebeandiscovery_example&quot;&gt;BeforeBeanDiscovery example&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Singleton
      class MyService {
          // This class is not placed in a bean archive
      }
      
      class MyExtension implements Extension {
      
          void beforeBeanDiscovery(@Observes BeforeBeanDiscovery event) {
              // Add MyService to the set of discovered classes and replace @Singleton with @ApplicationScoped
              event.addAnnotatedType(MyService.class.getName(), MyService.class)
                     .remove(Singleton.class)
                     .add(ApplicationScoped.Literal.INSTANCE);
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_processannotatedtype_example&quot;&gt;ProcessAnnotatedType example&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class MyExtension implements Extension {
      
          void processAnnotatedType(@Observes @WithAnnotations({ Observes.class, ObservesAsync.class }) ProcessAnnotatedType&amp;lt;?&amp;gt; event) {
              // Add interceptor binding to all methods annotated with @Observes or @ObservesAsync
              event.configureAnnotatedType()
                      .filterMethods(MyExtension::isObserver)
                      .forEach(methodConfigurator -&amp;gt; methodConfigurator.add(Monitored.Literal.INSTANCE))
          }
      
          static boolean isObserver(AnnotatedMethod&amp;lt;?&amp;gt; annotatedMethod) {
              return annotatedMethod.isAnnotationPresent(Observes.class) || annotatedMethod.isAnnotationPresent(ObservesAsync.class);
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_processbeanattributes_example&quot;&gt;ProcessBeanAttributes example&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class MyExtension implements Extension {
      
          void processBeanAttributes(@Observes ProcessBeanAttributes&amp;lt;?&amp;gt; event) {
              // For all beans remove the IllegalBeanType from the set of bean types
              if (event.getBeanAttributes().getTypes().contains(IllegalBeanType.class)) {
                  Set&amp;lt;Type&amp;gt; legalTypes = new HashSet(event.getBeanAttributes().getTypes());
                  legalTypes.remove(IllegalBeanType.class);
                  event.configureBeanAttributes().types(legalTypes);
              }
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_afterbeandiscovery_example&quot;&gt;AfterBeanDiscovery example&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class MyExtension implements Extension {
      
          void afterBeanDiscovery(@Observes AfterBeanDiscovery event) {
              //  Add a new synthetic observer method - no need to use the fluent API
              ObserverMethodConfigurator&amp;lt;Foo&amp;gt; configurator = event.&amp;lt;Foo&amp;gt;addObserverMethod();
              configurator.observedType(Foo.class);
              configurator.reception(Reception.ALWAYS);
              configurator.transactionPhase(TransactionPhase.IN_PROGRESS);
              configurator.notifyWith((foo) -&amp;gt; System.out.println(&quot;Foo observed: &quot; + foo));
      
              // Add dependent bean - Integer between 0 and 999
              event.addBean().addType(Integer.class).addQualifier(Random.Literal.INSTANCE)
                      .produceWith(() -&amp;gt; new java.util.Random().nextInt(1000))
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha16/wildfly-10.0.0.Final-weld-3.0.0.Alpha16-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.0.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.Alpha16/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12327858&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/04/22/weld-234Final/</id>
    <title>Weld 2.3.4.Final</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-04-22T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/04/22/weld-234Final/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <summary>
      
      Weld 2.3.4.Final the next version of the stable 2.3 branch has been released!
      See also the release details.
      Thanks to everyone involved in this release!
      
      
      Notable bugfixes and improvements:
      
      
      
      
      log important actions performed by extensions (WELD-2134)
      
      
      
      for example, if you want to track down all extensions modifying AnnotatedType definitions, then enable the debug logging for Weld and look for messages containing ProcessAnnotatedType.setAnnotatedType() called by &#8230;&#8203;
      
      
      
      
      
      Conversations - allow to configure the default timeout and the concurrent access timeout (WELD-2113)
      
      
      recover if a transaction is in progress but a JTA Synchronization callback cannot be registered (WELD-2120)
      
      
      EJB proxies do not implement private methods anymore (WELD-2119)
      
      
      interceptor instances used for @AroundConstruct...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 2.3.4.Final the next version of the stable 2.3 branch has been released!
      See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12329779&quot; target=&quot;_blank&quot;&gt;the release details&lt;/a&gt;.
      Thanks to everyone involved in this release!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Notable bugfixes and improvements:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;log important actions performed by extensions (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2134&quot; target=&quot;_blank&quot;&gt;WELD-2134&lt;/a&gt;)&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;for example, if you want to track down all extensions modifying &lt;code&gt;AnnotatedType&lt;/code&gt; definitions, then &lt;a href=&quot;http://weld.cdi-spec.org/documentation/#7&quot; target=&quot;_blank&quot;&gt;enable the debug logging for Weld&lt;/a&gt; and look for messages containing &lt;code&gt;ProcessAnnotatedType.setAnnotatedType() called by …​&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Conversations - allow to configure the default timeout and the concurrent access timeout (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2113&quot; target=&quot;_blank&quot;&gt;WELD-2113&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;recover if a transaction is in progress but a JTA Synchronization callback cannot be registered (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2120&quot; target=&quot;_blank&quot;&gt;WELD-2120&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;EJB proxies do not implement private methods anymore (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2119&quot; target=&quot;_blank&quot;&gt;WELD-2119&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;interceptor instances used for @AroundConstruct are now reused for other types of interception (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2131&quot; target=&quot;_blank&quot;&gt;WELD-2131&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld Servlet&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;fixed handling of archives from &lt;code&gt;WEB-INF/lib&lt;/code&gt; on Tomcat 8 with &lt;code&gt;unpackWARs=false&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2122&quot; target=&quot;_blank&quot;&gt;WELD-2122&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;WeldTerminalListener&lt;/code&gt; should not throw NPE if injection into listeners is not supported (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2123&quot; target=&quot;_blank&quot;&gt;WELD-2123&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld SE&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;improved support of &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.4.Final/en-US/html/environments.html#_implicit_bean_archive_support_2&quot;&gt;implicit bean archives&lt;/a&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2129&quot; target=&quot;_blank&quot;&gt;WELD-2129&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;there are two new built-in interceptor bindings - &lt;code&gt;@ActivateRequestScope&lt;/code&gt; and &lt;code&gt;@ActivateThreadScope&lt;/code&gt; - to activate the &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.4.Final/en-US/html/environments.html#_request_context&quot; target=&quot;_blank&quot;&gt;request scope&lt;/a&gt; or the &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.4.Final/en-US/html/environments.html#_thread_context&quot; target=&quot;_blank&quot;&gt;thread scope&lt;/a&gt; within a business method invocation&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld builder allows to configure bean archive isolation, development mode and registration of shutdown hook manually (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2135&quot; target=&quot;_blank&quot;&gt;WELD-2135&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;a basic nested archive support was added (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-1930&quot; target=&quot;_blank&quot;&gt;WELD-1930&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.3.4.Final/wildfly-10.0.0.Final-weld-2.3.4.Final-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.0.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot; target=&quot;_blank&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
      [ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.4.Final/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12329779&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/04/11/weld-meets-vertx/</id>
    <title>Weld meets Vert.x</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-04-11T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/04/11/weld-meets-vertx/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="vertx"></category>
    <category term="integration"></category>
    <summary>
      
      Vert.x defines itself as "a toolkit for building reactive applications on the JVM".
      Sounds cool and trendy.
      Weld, on the other hand, comes from the Java EE world, based on standards and traditional concepts.
      But wait, what if we try to combine the two worlds to get the best of them?
      
      
      Vert.x makes use of a light-weight distributed messaging system to allow application components to communicate in a loosely coupled way.
      This should sound familiar to all CDI users where beans may produce and consume events as well.
      Weld team developed a working prototype of Weld/Vert.x integration that allows to automatically register certain observer methods as...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://vertx.io/&quot; target=&quot;_blank&quot;&gt;Vert.x&lt;/a&gt; defines itself as &quot;a toolkit for building reactive applications on the JVM&quot;.
      Sounds cool and trendy.
      Weld, on the other hand, comes from the Java EE world, based on standards and traditional concepts.
      But wait, what if we try to combine the two worlds to get the best of them?&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Vert.x makes use of a light-weight distributed messaging system to allow application components to communicate in a loosely coupled way.
      This should sound familiar to all CDI users where beans may produce and consume events as well.
      Weld team developed a &lt;a href=&quot;https://github.com/weld/weld-vertx&quot;&gt;working prototype&lt;/a&gt; of Weld/Vert.x integration that allows to automatically register certain observer methods as Vert.x message consumers.
      A simple echo message consumer could look like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.jboss.weld.vertx.VertxConsumer;
      import org.jboss.weld.vertx.VertxEvent;
      
      class Foo {
          public void echoConsumer(@Observes @VertxConsumer(&quot;test.echo.address&quot;) VertxEvent event) {
              event.setReply(event.getMessageBody());
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;@VertxConsumer&lt;/code&gt; - a qualifier used to specify the address the consumer will be registered to: &lt;code&gt;test.echo.address&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;VertxEvent&lt;/code&gt; - a wrapper of a Vert.x message&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Since we’re working with a regular observer method, additional parameters may be declared (next to the event parameter).
      These parameters are injection points. So it’s easy to &lt;strong&gt;declare a message consumer dependencies&lt;/strong&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public void consumerWithDependencies(@Observes @VertxConsumer(&quot;test.dependencies.address&quot;) VertxEvent event, CoolService coolService, StatsService statsService) {
          coolService.process(event.getMessageBody());
          statsService.log(event);
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      If you inject a dependent bean, it will be destroyed when the invocation completes.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Last but not least - an observer may also &lt;strong&gt;send/publish messages using the Vert.x event bus&lt;/strong&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public void consumerStrikesBack(@Observes @VertxConsumer(&quot;test.publish.address&quot;) VertxEvent event) {
          event.messageTo(&quot;test.huhu.address&quot;).publish(&quot;huhu&quot;);
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;And how does it work under the hood?
      First of all, it’s necessary to deploy &lt;code&gt;org.jboss.weld.vertx.WeldVerticle&lt;/code&gt;.
      This &lt;code&gt;Verticle&lt;/code&gt; starts Weld SE container and automatically registers &lt;code&gt;org.jboss.weld.vertx.VertxExtension&lt;/code&gt; to process all observer methods and detect observers which should become message consumers.
      Then a special handler is registered for each address to bridge the event bus to the CDI world.
      Handlers use &lt;code&gt;Vertx.executeBlocking()&lt;/code&gt; since we expect the code to be blocking.
      Later on, whenever a new message is delivered to the handler, &lt;code&gt;Event.fire()&lt;/code&gt; is used to notify all relevant observers.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The prototype is surely missing some features. Nevertheless, it shows the CDI programming model might be applicable to the &quot;reactive&quot; world even if not a first class citizen.
      Moreover, the prototype demonstrates the flexibility of the CDI extension mechanism.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you want to try it out, you’ll have to clone the &lt;a class=&quot;bare&quot; href=&quot;https://github.com/weld/weld-vertx&quot;&gt;https://github.com/weld/weld-vertx&lt;/a&gt; repository and build it from source (i.e. run &lt;code&gt;mvn clean install&lt;/code&gt;).
      And if you find it useful feel free to add comments to this blog post. Any feedback is appreciated!&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/02/12/weld-233Final/</id>
    <title>Weld 2.3.3.Final</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-02-12T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/02/12/weld-233Final/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <summary>
      
      Weld 2.3.3.Final the next bug-fix version of the stable 2.3 branch has been released!
      See also the release details.
      Thanks to everyone involved in this release!
      Notable improvements:
      
      
      
      
      allow to proxy classes with non-static non-private final methods
      
      
      
      this is a non-portable way to get around the CDI spec restrictions, see also Proxying classes with final methods and CDI-527
      
      
      use with caution!
      
      
      
      
      
      other enhancements and bug-fixes around proxies:
      
      
      
      better support for DeltaSpike partial beans (WELD-2084)
      
      
      better support for Camel CDI (WELD-2089)
      
      
      better support for proxies with non public classes (WELD-2091)
      
      
      
      
      
      Weld Probe has a slightly redesigned menu and a new Dashboard view with some basic stats
      
      
      the decorator validation was improved (WELD-2085, WELD-1811,...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 2.3.3.Final the next bug-fix version of the stable 2.3 branch has been released!
      See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12328954&quot; target=&quot;_blank&quot;&gt;the release details&lt;/a&gt;.
      Thanks to everyone involved in this release!
      Notable improvements:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;allow to proxy classes with non-static non-private final methods&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;this is a non-portable way to get around the &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#unproxyable&quot; target=&quot;_blank&quot;&gt;CDI spec restrictions&lt;/a&gt;, see also &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.3.Final/en-US/html/configure.html#_proxying_classes_with_final_methods&quot; target=&quot;_blank&quot;&gt;Proxying classes with final methods&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/CDI-527&quot; target=&quot;_blank&quot;&gt;CDI-527&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;use with caution!&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;other enhancements and bug-fixes around proxies:&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;better support for DeltaSpike partial beans (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2084&quot; target=&quot;_blank&quot;&gt;WELD-2084&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;better support for Camel CDI (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2089&quot; target=&quot;_blank&quot;&gt;WELD-2089&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;better support for proxies with non public classes (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2091&quot; target=&quot;_blank&quot;&gt;WELD-2091&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld Probe has a slightly redesigned menu and a new &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess/weld-probe&quot; target=&quot;_blank&quot;&gt;Dashboard&lt;/a&gt; view with some basic stats&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the decorator validation was improved (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2085&quot; target=&quot;_blank&quot;&gt;WELD-2085&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-1811&quot; target=&quot;_blank&quot;&gt;WELD-1811&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2039&quot; target=&quot;_blank&quot;&gt;WELD-2039&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;minor SPI cleanup was performed  (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2077&quot; target=&quot;_blank&quot;&gt;WELD-2077&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2079&quot; target=&quot;_blank&quot;&gt;WELD-2079&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/2.3.3.Final/wildfly-10.0.0.Final-weld-2.3.3.Final-patch.zip&quot; target=&quot;_blank&quot;&gt;patch for WildFly&lt;/a&gt; is available. This time the target platform is &lt;strong&gt;WildFly 10.0.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot; target=&quot;_blank&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot; target=&quot;_blank&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
      [ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.3.Final/en-US/html/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12328954&quot; target=&quot;_blank&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/02/08/weld-se-synth-lifecycle-events/</id>
    <title>Weld SE and synthetic container lifecycle event observers</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-02-08T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/02/08/weld-se-synth-lifecycle-events/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="api"></category>
    <category term="draft"></category>
    <summary>
      
      Last week Weld 3.0.0.Alpha15 was released and so it&#8217;s time to reveal the features that should go into the next experimental release.
      The main goal of Weld 3.0.0.Alpha16 is to reflect the output of CDI-558.
      However, we would also like to continue to deliver experimental prototypes so that users could test a new functionality (that we find interesting and useful) and the CDI EG could eventually include this into CDI 2.0.
      
      
      It should be easier to start playing with extensions in Weld SE. Right now, it&#8217;s possible to pass an Extension instance to the Weld builder so that it&#8217;s not necessary to configure...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Last week Weld 3.0.0.Alpha15 was released and so it’s time to reveal the features that should go into the next experimental release.
      The main goal of Weld 3.0.0.Alpha16 is to reflect the output of &lt;a href=&quot;https://issues.jboss.org/browse/CDI-558&quot;&gt;CDI-558&lt;/a&gt;.
      However, we would also like to continue to deliver experimental prototypes so that users could test a new functionality (that we find interesting and useful) and the CDI EG could eventually include this into CDI 2.0.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It should be easier to start playing with extensions in Weld SE. Right now, it’s possible to pass an &lt;code&gt;Extension&lt;/code&gt; instance to the &lt;code&gt;Weld&lt;/code&gt; builder so that it’s not necessary to configure service providers (i.e. &lt;code&gt;META-INF/services/javax.enterprise.inject.spi.Extension&lt;/code&gt; file).
      In such case, the extension class is automatically scanned for observer methods and the instance is used as the receiver of the notifications.
      We would like to make this even easier.
      It is now possible to add a &lt;strong&gt;synthetic container lifecycle event observer&lt;/strong&gt; without declaring an extension class.
      The observer logic is represented as a lambda expression.
      This might be especially useful for prototyping and/or for discovering how extensions work.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The starting point is the &lt;code&gt;org.jboss.weld.environment.se.ContainerLifecycleObserver&lt;/code&gt; class.
      There are few static methods, each corresponding to a specific container lifecycle event (e.g. &lt;code&gt;beforeBeanDiscovery()&lt;/code&gt;).
      Some variants return a builder so that it’s possible to customize the observer (observed type, priority, etc.).
      Others accept a lambda and return an observer instance direcly.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A synthetic observer may be added to the builder directly - see &lt;code&gt;Weld.addContainerLifecycleObserver()&lt;/code&gt; - or grouped in a synthetic extension - see &lt;code&gt;ContainerLifecycleObserver.extensionBuilder()&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Extension testExtension = ContainerLifecycleObserver.extensionBuilder()
          .add(afterBeanDiscovery((e) -&amp;gt; System.out.println(&quot;Bean discovery completed!&quot;)))
          .add(processAnnotatedType().notify((e) -&amp;gt; {
                  if (e.getAnnotatedType().getJavaClass().getName().startsWith(&quot;com.foo&quot;)) {
                      e.veto();
                  }
              })).build();
      
      try (WeldContainer container = new Weld().addExtension(testExtension).initialize()) {
          // Use the container...
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This feature is merged in the master branch. If you want to try it out, you’ll have to use a &lt;strong&gt;3.0.0-SNAPSHOT&lt;/strong&gt; version or build the Weld from source: &lt;code&gt;mvn clean install&lt;/code&gt;.
      Do you find it useful? Any feedback is appreciated! Feel free to add comments to this blog post or to the corresponding issue: &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2102&quot;&gt;WELD-2012&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2016/02/04/weld-300Alpha15/</id>
    <title>Weld 3.0.0.Alpha15</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2016-02-04T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2016/02/04/weld-300Alpha15/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <category term="cdi2"></category>
    <summary>
      
      Weld 3.0.0.Alpha15 the next experimental Weld version has been released.
      See also the release details.
      
      
      The CompletionStage used to bind actions to the completion of the asynchronous delivery is now using org.jboss.weld.manager.api.ExecutorServices SPI as the default asynchronous execution facility.
      Previously, the ForkJoinPool#commonPool() (a default executor of the underlying CompletableFuture) was used.
      It&#8217;s an important change because the ForkJoinPool#commonPool() is not a good fit for Java EE.
      See also WELD-2073.
      
      
      The ExperimentalAfterBeanDiscovery receives two more methods: interceptorBuilder() and addInterceptor().
      An interceptor builder allows you to create an interceptor bean without the need to create an interceptor class.
      This might be handy for simple use cases:
      
      
      
      class MyExtension {
        void...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 3.0.0.Alpha15 the next experimental Weld version has been released.
      See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12327857&quot;&gt;the release details&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;code&gt;CompletionStage&lt;/code&gt; used to bind actions to the completion of the asynchronous delivery is now using &lt;code&gt;org.jboss.weld.manager.api.ExecutorServices&lt;/code&gt; SPI as the default asynchronous execution facility.
      Previously, the &lt;code&gt;ForkJoinPool#commonPool()&lt;/code&gt; (a default executor of the underlying &lt;code&gt;CompletableFuture&lt;/code&gt;) was used.
      It’s an important change because the &lt;code&gt;ForkJoinPool#commonPool()&lt;/code&gt; is not a good fit for Java EE.
      See also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2073&quot;&gt;WELD-2073&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;code&gt;ExperimentalAfterBeanDiscovery&lt;/code&gt; receives two more methods: &lt;code&gt;interceptorBuilder()&lt;/code&gt; and &lt;code&gt;addInterceptor()&lt;/code&gt;.
      An interceptor builder allows you to create an interceptor bean without the need to create an interceptor class.
      This might be handy for simple use cases:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class MyExtension {
        void afterBeanDiscovery(@Observes AfterBeanDiscovery event) {
          event.addInterceptor().intercept(InterceptionType.AROUND_INVOKE, (c) -&amp;gt; {
                  long start = System.currentTimeMillis();
                  try {
                      return c.proceed();
                  } finally {
                      System.out.println(&quot;Time: &quot; + System.currentTimeMillis() - start);
                  }
              }).priority(2600).addBinding(MonitoringBinding.Literal.INSTANCE);
        }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2008&quot;&gt;WELD-2008&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release also contains some enhancements and bugfixes around proxies.
      E.g. better support for DeltaSpike partial beans (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2084&quot;&gt;WELD-2084&lt;/a&gt;), better support for Camel CDI (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2089&quot;&gt;WELD-2089&lt;/a&gt;) and better support for proxies with non public classes (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2091&quot;&gt;WELD-2091&lt;/a&gt;).
      Furthermore, we are going to drop Jetty 7,8, 9.0, 9.1 and 9.2 support in Weld 3 (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2032&quot;&gt;WELD-2032&lt;/a&gt;).
      Also the decorator validation was improved (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2085&quot;&gt;WELD-2085&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-1811&quot;&gt;WELD-1811&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2039&quot;&gt;WELD-2039&lt;/a&gt;).
      Last but not least, we have performed some SPI cleanup (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2077&quot;&gt;WELD-2077&lt;/a&gt;, &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2079&quot;&gt;WELD-2079&lt;/a&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha15/wildfly-10.0.0.Final-weld-3.0.0.Alpha15-patch.zip&quot;&gt;patch for WildFly&lt;/a&gt; is available. This patch not only upgrades Weld within an existing WildFly instance but also upgrades CDI API to 2.0 EDR1. This time the target platform is &lt;strong&gt;WildFly 10.0.0.Final&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/package-frame.html&quot;&gt;Experimental API documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12327857&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha15/weld-3.0.0.Alpha15.zip&quot;&gt;Distribution&lt;/a&gt; ]
      [ &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha15/wildfly-10.0.0.Final-weld-3.0.0.Alpha15-patch.zip&quot;&gt;Patch for Wildfly 10.0.0.Final&lt;/a&gt;
      ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2015/12/10/weld-232Final/</id>
    <title>Weld 2.3.2.Final</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2015-12-10T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2015/12/10/weld-232Final/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <summary>
      
      Weld 2.3.2.Final the last version for this year has been released! It is a bug-fixing release with 15 issues resolved. See also the release details. Thanks to everyone involved in this release!
      
      
      Notable bug-fixes and enhancements
      
      
      
      
      Weld proxies - add workaround for IBM JVM 8 (WELD-2056 and DELTASPIKE-1010)
      
      
      Fix resource injection when using arquillian-weld-ee-embedded-1.1 (WELD-2065 and ARQ-2000)
      
      
      All conversation contexts should be destroyed after the Servlet.service() method completes (WELD-2052)
      
      
      Clear RequestScopedCache for remote EJB calls (WELD-2069)
      
      
      Weld Servlet
      
      
      
      Allow to perform dependency injection upon objects not having a CDI-compatible constructor (WELD-2039)
      
      
      Add Jandex support even for WARs not extracted to the file system (WELD-2070)
      
      
      
      
      
      Probe development tool is now...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 2.3.2.Final the last version for this year has been released! It is a bug-fixing release with 15 issues resolved. See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12328625&quot;&gt;the release details&lt;/a&gt;. Thanks to everyone involved in this release!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_notable_bug_fixes_and_enhancements&quot;&gt;Notable bug-fixes and enhancements&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Weld proxies - add workaround for IBM JVM 8 (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2056&quot;&gt;WELD-2056&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DELTASPIKE-1010&quot;&gt;DELTASPIKE-1010&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Fix resource injection when using &lt;code&gt;arquillian-weld-ee-embedded-1.1&lt;/code&gt; (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2065&quot;&gt;WELD-2065&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/ARQ-2000&quot;&gt;ARQ-2000&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;All conversation contexts should be destroyed after the &lt;code&gt;Servlet.service()&lt;/code&gt; method completes (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2052&quot;&gt;WELD-2052&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Clear &lt;code&gt;RequestScopedCache&lt;/code&gt; for remote EJB calls (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2069&quot;&gt;WELD-2069&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld Servlet&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Allow to perform dependency injection upon objects not having a CDI-compatible constructor (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2039&quot;&gt;WELD-2039&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Add Jandex support even for WARs not extracted to the file system (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2070&quot;&gt;WELD-2070&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Probe development tool is now part of the OSGi bundle (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2061&quot;&gt;WELD-2061&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
      [ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.2.Final/en-US/html/&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12328625&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2015/12/04/weld-300Alpha14/</id>
    <title>Weld 3.0.0.Alpha14</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2015-12-04T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2015/12/04/weld-300Alpha14/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <category term="cdi2"></category>
    <summary>
      
      Weld 3.0.0.Alpha14 the penultimate Weld version for this year has been released into the wild.
      It reflects some of the most recent changes in the CDI 2.0 specification, mostly related to asynchronous events.
      Moreover, this release also contains quite a lot of enhancements and bugfixes. See also the release details.
      
      
      WildFly Patch
      
      
      As usual, a patch for WildFly is available. This patch not only upgrades Weld within an existing WildFly instance but also upgrades CDI API to 2.0 EDR1. This time the target platform is WildFly 10.0.0.CR4.  If you’re not familiar with patching WildFly, check Markus&#8217;s tutorial.
      
      
      &#91; Experimental API documentation &#93;
      &#91; Release notes...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 3.0.0.Alpha14 the penultimate Weld version for this year has been released into the wild.
      It reflects some of the most recent changes in the CDI 2.0 specification, mostly related to asynchronous events.
      Moreover, this release also contains quite a lot of enhancements and bugfixes. See also &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12327856&quot;&gt;the release details&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha14/wildfly-10.0.0.CR4-weld-3.0.0.Alpha14-patch.zip&quot;&gt;patch for WildFly&lt;/a&gt; is available. This patch not only upgrades Weld within an existing WildFly instance but also upgrades CDI API to 2.0 EDR1. This time the target platform is &lt;strong&gt;WildFly 10.0.0.CR4&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/package-frame.html&quot;&gt;Experimental API documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12327856&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha14/weld-3.0.0.Alpha14.zip&quot;&gt;Distribution&lt;/a&gt; ]
      [ &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha14/wildfly-10.0.0.CR4-weld-3.0.0.Alpha14-patch.zip&quot;&gt;Patch for Wildfly 10 CR4&lt;/a&gt;
      ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2015/11/25/arq-container-se-CR1/</id>
    <title>Arquillian container SE 1.0.0.CR1 released!</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2015-11-25T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2015/11/25/arq-container-se-CR1/" rel="alternate" type="text/html" />
    <author>
      <name>Tomas Remes</name>
    </author>
    <category term="arquillian"></category>
    <category term="testing"></category>
    <summary>
      
      We are pleased to announce a new release of Arquillian container SE.
      If you are looking for a reliable way to test your application in Java SE then this is the right tool to try out!
      
      
      This managed SE container launches new JVM process for each of your test archives.
      This standalone process with isolated classpath is also the main reason why we introduced such tool  (and also the difference e.g to arquillian-weld-se-embedded).
      
      
      You can manage your classpath dependencies by using ShrinkWrap resolver.
      Another option is to provide path to your directory containing your dependencies jars via container property.
      You can get ready your dependencies...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are pleased to announce a new release of Arquillian container SE.
      If you are looking for a reliable way to test your application in Java SE then this is the right tool to try out!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This managed SE container launches new JVM process for each of your test archives.
      This standalone process with isolated classpath is also the main reason why we introduced such tool  (and also the difference e.g to &lt;code&gt;arquillian-weld-se-embedded&lt;/code&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can manage your classpath dependencies by using &lt;a href=&quot;https://github.com/shrinkwrap/resolver&quot;&gt;ShrinkWrap resolver&lt;/a&gt;.
      Another option is to provide path to your directory containing your dependencies jars via container property.
      You can get ready your dependencies jars by using e.g Maven dependency plugin. Another options which you would expect as debugging, setting system properties or exporting deployment archive are also available.
      Test execution is managed by Arquillian JMX protocol.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Finally you can find some basic tests using Arquillian
      container SE in &lt;a href=&quot;https://github.com/weld/core/tree/2.3/environments/se/tests&quot;&gt;Weld SE tests&lt;/a&gt; or in &lt;a href=&quot;https://github.com/cdi-spec/cdi-tck/tree/master/impl/src/main/java/org/jboss/cdi/tck/tests/se&quot;&gt;CDI TCK&lt;/a&gt;.
      Feedback is more than welcomed and if you have any questions don’t hesitate to ask!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Maven Coordinates:&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;org.jboss.arquillian.container&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;container-se-managed&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;1.0.0.CR1&amp;lt;/version&amp;gt;
      &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2015/11/10/weld-probe-jmx/</id>
    <title>Weld development mode and JMX support</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2015-11-10T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2015/11/10/weld-probe-jmx/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="probe"></category>
    <category term="jmx"></category>
    <summary>
      
      Weld comes with a special mode for application development.
      When enabled, some interesting data are collected so that it&#8217;s possible to inspect and monitor application components at runtime (see also the demo application hosted on OpenShift).
      Data in JSON format are available through the REST API,  eventually through the MXBean of name org.jboss.weld.probe:type=JsonData,context=ID where ID should be replaced with an identifier of an application.
      The JMX support might be especially useful for environments and applications which do not utilize a web container (Java SE, OSGi, etc.).
      
      
      How to enable JMX support
      
      
      Simply use the Weld configuration facility and org.jboss.weld.probe.jmxSupport configuration property. If set to...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld comes with a special mode for application development.
      When enabled, some interesting data are collected so that it’s possible to inspect and monitor application components at runtime (see also &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess/weld-probe&quot;&gt;the demo application hosted on OpenShift&lt;/a&gt;).
      Data in JSON format are available through the REST API,  eventually through the MXBean of name &lt;code&gt;org.jboss.weld.probe:type=JsonData,context=ID&lt;/code&gt; where ID should be replaced with an identifier of an application.
      The JMX support might be especially useful for environments and applications which do not utilize a web container (Java SE, OSGi, etc.).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_how_to_enable_jmx_support&quot;&gt;How to enable JMX support&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Simply use the &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#_weld_configuration&quot;&gt;Weld configuration facility&lt;/a&gt; and &lt;code&gt;org.jboss.weld.probe.jmxSupport&lt;/code&gt; configuration property. If set to &lt;code&gt;true&lt;/code&gt; one or more MBean components may be registered so that it is possible to use JMX to access the Probe development tool data.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_jmx_client&quot;&gt;JMX client&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So for example if using Weld SE without a web container it’s still possible to access the Probe data.
      There is a lot of JMX clients out there (for example jconsole or jvisualvm from the Oracle JDK).
      The problem is not all of us prefer reading JSON data.
      Hey wait! Weld Probe already has an HTML client, right?
      Yes, but this client works with REST API.
      We would have to embed a web container (e.g. Undertow) and add Weld Servlet or do some configuration manually.
      But what if there are multiple Weld instances in the same JVM? The configuration might become quite complex.
      Luckily, there is another solution - a &lt;strong&gt;working prototype&lt;/strong&gt; of &lt;a href=&quot;https://github.com/weld/weld-probe-jmx&quot;&gt;JMX client reusing the default HTML GUI&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_clone_build_and_run&quot;&gt;Clone, build and run&lt;/h3&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;    # Clone the git repo
          git clone git@github.com:weld/weld-probe-jmx.git
          # Specify the weld version used in your application and run the build
          mvn clean package -Dversion.weld=2.3.1.Final
          # Run the client
          java -jar target/weld-probe-jmx-1.0.0-SNAPSHOT-shaded.jar&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_how_does_it_work&quot;&gt;How does it work?&lt;/h3&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;First, the client attempts to connect to a JMX server (your application)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;User may select a Weld container to inspect&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Then the client starts an Undertow instance locally, HTML client is available at: &lt;a class=&quot;bare&quot; href=&quot;http://127.0.0.1:8181/probe-jmx/weld-probe&quot;&gt;http://127.0.0.1:8181/probe-jmx/weld-probe&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Data are fetched remotely through JMX&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;User may reconnect at any time&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See also the JBoss Forge example below to see an example output.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_configuration&quot;&gt;Configuration&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Moreover, it’s also possible to configure the JMX server URL, Undertow host and port - used to expose the HTML client. E.g. for WildFly (standalone mode) a different jmxServiceUrl must be specified and jboss-client.jar must be also on the class path, e.g.:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;java -Dorg.jboss.weld.probe.jmxServiceUrl=&quot;service:jmx:http-remoting-jmx://127.0.0.1:9990&quot; -cp '/opt/jboss/wildfly/bin/client/jboss-client.jar:target/weld-probe-jmx-1.0.0-SNAPSHOT-shaded.jar' org.jboss.weld.probe.ProbeJmx&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_jboss_forge_example&quot;&gt;JBoss Forge example&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;An interesting use case would be to inspect JBoss Forge addons powered by CDI (works with &lt;strong&gt;Forge 2.20.1.Final&lt;/strong&gt; and later).
      Before we start Forge we need to set some extra system properties:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;export FORGE_OPTS=&quot;-Dorg.jboss.weld.development=true -Dorg.jboss.weld.probe.jmxSupport=true -Dorg.jboss.weld.probe.eventMonitor.containerLifecycleEvents=true -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false&quot;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;System properties starting with &lt;code&gt;com.sun.management&lt;/code&gt; simply allow to connect to JMX remotely.
      &lt;code&gt;org.jboss.weld.development&lt;/code&gt; enables the development mode.
      &lt;code&gt;org.jboss.weld.probe.jmxSupport&lt;/code&gt; enables the JMX support.
      Finally, If &lt;code&gt;org.jboss.weld.probe.eventMonitor.containerLifecycleEvents&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; all the container lifecycle events are monitored during bootstrap.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Then start the Forge as usually and run the prototype. You should see a similar output:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;Connecting to a remote JMX server: service:jmx:rmi:///jndi/rmi://127.0.0.1:9999/jmxrmi
      Select a Weld container (JSON data provider):
      [0] org.jboss.weld.probe:type=JsonData,context=&quot;org.jboss.forge.addon:shell_1447145001728&quot;
      [1] org.jboss.weld.probe:type=JsonData,context=&quot;org.jboss.forge.addon:configuration_1447145001592&quot;
      [2] org.jboss.weld.probe:type=JsonData,context=&quot;org.jboss.forge.addon:parser-java_1447145002037&quot;
      [3] org.jboss.weld.probe:type=JsonData,context=&quot;org.jboss.forge.addon:bean-validation_1447145001526&quot;
      [4] org.jboss.weld.probe:type=JsonData,context=&quot;org.jboss.forge.addon:javaee_1447145003135&quot;
      [5] org.jboss.weld.probe:type=JsonData,context=&quot;org.jboss.forge.addon:ui_1447145001709&quot;
      [6] org.jboss.weld.probe:type=JsonData,context=&quot;org.jboss.forge.addon:convert_1447145001526&quot;
      
      [disconnected]$&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Now select a Weld container to inspect, e.g. &lt;code&gt;5&lt;/code&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;[disconnected]$ 5
      Connecting to the Weld container [5]: org.jboss.weld.probe:type=JsonData,context=&quot;org.jboss.forge.addon:ui_1447145001709&quot;
      Starting Undertow...
      Lis 10, 2015 9:44:16 DOP. org.xnio.Xnio &amp;lt;clinit&amp;gt;
      INFO: XNIO version 3.3.1.Final
      Lis 10, 2015 9:44:16 DOP. org.xnio.nio.NioXnio &amp;lt;clinit&amp;gt;
      INFO: XNIO NIO Implementation Version 3.3.1.Final
      Weld Probe HTML client available at: http://127.0.0.1:8181/probe-jmx/weld-probe
      
      [connected #5]$&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The HTML client is available at &lt;a class=&quot;bare&quot; href=&quot;http://127.0.0.1:8181/probe-jmx/weld-probe&quot;&gt;http://127.0.0.1:8181/probe-jmx/weld-probe&lt;/a&gt;. It’s also possible to reconnect or exit. Type &lt;code&gt;help&lt;/code&gt; to get a list of all possible commands.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2015/10/27/weld-231Final/</id>
    <title>Weld 2.3.1.Final arrives...</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2015-10-27T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2015/10/27/weld-231Final/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <summary>
      
      Weld 2.3.1.Final has been released! The delivery: a few killed bugs, couple of Weld SE enhancements and several Weld Probe improvements.
      
      
      Notable bug-fixes and enhancements:
      
      
      
      
      Private producer, disposer and observer methods should be intercepted (WELD-2043)
      
      
      Specializing bean - remove @Default qualifier unless explicitly declared (WELD-2046)
      
      
      Weld SE
      
      
      
      Fix the development mode enablement
      
      
      Allow to pass a ResourceLoader to be used for scanning (WELD-2044)
      
      
      Allow to skip the registration of a shutdown hook (WELD-2051)
      
      
      
      
      
      Weld Probe now supports monitoring of container lifecycle events during bootstrap (see also supported configuration properties)
      
      
      
      
      &#91; CDI 1.2 API &#93;
      &#91; Download &#93;
      &#91; Documentation &#93;
      &#91; Release notes &#93;
      ...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 2.3.1.Final has been released! The delivery: a few killed bugs, couple of Weld SE enhancements and several Weld Probe improvements.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Notable bug-fixes and enhancements:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Private producer, disposer and observer methods should be intercepted (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2043&quot;&gt;WELD-2043&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Specializing bean - remove @Default qualifier unless explicitly declared (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2043&quot;&gt;WELD-2046&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld SE&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Fix the development mode enablement&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Allow to pass a ResourceLoader to be used for scanning (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2043&quot;&gt;WELD-2044&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Allow to skip the registration of a shutdown hook (&lt;a href=&quot;https://issues.jboss.org/browse/WELD-2043&quot;&gt;WELD-2051&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld Probe now supports monitoring of container lifecycle events during bootstrap (see also &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/html/configure.html#config-dev-mode&quot;&gt;supported configuration properties&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
      [ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.1.Final/en-US/html/&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12327517&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2015/09/18/weld-230Final/</id>
    <title>Weld 2.3.0.Final released!</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2015-09-18T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2015/09/18/weld-230Final/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <summary>
      
      Weld 2.3.0.Final has been just released! From now on, 2.3 is the current stable version of Weld and 2.2 is not actively developed anymore - i.e. no new features are added, only bugs will be fixed. Weld 2.3 will remain a CDI 1.2 implementation. We are incrementing the minor version due to several new features added. Weld 2.3 is also included in WildFly 10 application server.
      
      
      Notable features and changes:
      
      
      
      
      Java 6 support was dropped - Java 7 is the minimal requirement for building and running Weld 2.3
      
      
      Weld 2.3 comes with a special mode for application development, the Probe development tool allows...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 2.3.0.Final has been just released! From now on, 2.3 is the current stable version of Weld and 2.2 is not actively developed anymore - i.e. no new features are added, only bugs will be fixed. Weld 2.3 will remain a &lt;strong&gt;CDI 1.2&lt;/strong&gt; implementation. We are incrementing the minor version due to several new features added. Weld 2.3 is also included in &lt;a href=&quot;http://wildfly.org/&quot;&gt;WildFly 10&lt;/a&gt; application server.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Notable features and changes:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Java 6 support was dropped - Java 7 is the minimal requirement for building and running Weld 2.3&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld 2.3 comes with a special mode for application development, the &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.0.Final/en-US/html/devmode.html#probe&quot;&gt;Probe development tool&lt;/a&gt; allows to inspect application CDI components at runtime&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld SE Bootstrap API was enhanced in many ways - new features are mostly backported from &lt;a href=&quot;http://weld.cdi-spec.org/news/2015/08/05/weld-300Alpha12/#_weld_se_bootstrap_api&quot;&gt;Weld 3 development branch&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld Servlet now supports Undertow web server&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Revised delivery of &lt;code&gt;@Initialized&lt;/code&gt;/&lt;code&gt;@Destroyed&lt;/code&gt; events for &lt;code&gt;@ApplicationScoped&lt;/code&gt; in an EAR (see also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-1821&quot;&gt;WELD-1821&lt;/a&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
      [ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.3.0.Final/en-US/html/&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/projects/WELD/versions/12328057&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_weld_2_2_16_sp1&quot;&gt;Weld 2.2.16.SP1&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition, Weld 2.2.16.SP1 has been also released. It’s a bugfix release for 2.2 branch.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12327594&quot;&gt;Weld 2.2.16.Final Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12328216&quot;&gt;Weld 2.2.16.SP1 Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2015/09/15/jdk-8u60-problem/</id>
    <title>JDK 8u60 reveals a problem in Weld</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2015-09-15T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2015/09/15/jdk-8u60-problem/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="bug"></category>
    <category term="jdk"></category>
    <summary>
      
      Recently released JDK 8u60 has revealed a problem in Weld where not all synthetic members were ignored correctly.
      This has been fixed in 2.2.16.Final, 2.3.0.CR2 and 3.0.0.Alpha14 (not released yet).
      However, if not using a lambda referencing an event/disposed parameter inside an observer/disposer method, your application is most probably not affected.
      See also the related issue - WELD-2019.
      
      
      Use case
      
      
      If there is a lambda referencing an event/disposed parameter inside an observer/disposer method, the compiler creates a synthetic method with the event parameter as one of the method parameters. Since 8u60 the parameter annotations are preserved even for the synthetic method.
      And so Weld incorrectly recognizes...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Recently released &lt;strong&gt;JDK 8u60&lt;/strong&gt; has revealed a problem in Weld where not all synthetic members were ignored correctly.
      This has been fixed in &lt;strong&gt;2.2.16.Final&lt;/strong&gt;, &lt;strong&gt;2.3.0.CR2&lt;/strong&gt; and &lt;strong&gt;3.0.0.Alpha14&lt;/strong&gt; (not released yet).
      However, if not using a lambda referencing an event/disposed parameter inside an observer/disposer method, your application is most probably not affected.
      See also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2019&quot;&gt;the related issue - WELD-2019&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_use_case&quot;&gt;Use case&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If there is a lambda referencing an event/disposed parameter inside an observer/disposer method, the compiler creates a synthetic method with the event parameter as one of the method parameters. Since 8u60 the parameter annotations are preserved even for the synthetic method.
      And so Weld incorrectly recognizes these synthetic methods as observer/disposer methods.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_symptoms&quot;&gt;Symptoms&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You may get &lt;code&gt;WELD-000409: Observer method for container lifecycle event can only…​&lt;/code&gt; if using such a lambda in an extension or even &lt;code&gt;WELD-001408 Unsatisfied dependencies for type…​&lt;/code&gt; if using such a lambda in a regular observer and the lambda is using more references (i.e. not only event/disposed parameter) - these are also the method parameters of the synthetic method, and in CDI these additional parameters are injection points.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_example&quot;&gt;Example&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class Foo {
        void observe(@Observes @Juicy String payload) {
          Arrays.asList(&quot;foo&quot;).stream().filter((s) -&amp;gt; s.equals(payload));
        }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A synthetic method is created for the lambda and the event parameter is passed as a method parameter. The annotations are preserved.
      As a result Weld creates two observer methods having the same event parameter: &lt;code&gt;@Observes @Juicy String payload&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_workaround&quot;&gt;Workaround&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Instead of the event parameter reference use an additional local variable with the same value assigned:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public void observe(@Observes @Juicy String payload) {
         String p = payload;
         Arrays.asList(&quot;foo&quot;).stream().filter((s) -&amp;gt; s.equals(p));
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2015/09/08/weld-team-changes/</id>
    <title>Weld team changes</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2015-09-08T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2015/09/08/weld-team-changes/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <category term="team"></category>
    <summary>
      
      I am pleased to announce a couple of changes coming to the Weld team:
      
      
      First of all, Martin will be taking over leadership of the project.
      Martin has proven himself to be an excellent engineer over all the years and I am happy that I can leave the project in his hands.
      His primary task is going to be leading the project towards the Weld 3 milestone.
      
      
      Secondly, I will be moving to work temporarily on a different project.
      I truly enjoyed working on Weld and with the CDI community.
      Now after almost 4 years on the project I was given an exciting opportunity which I...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I am pleased to announce a couple of changes coming to the Weld team:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;First of all, &lt;a href=&quot;https://developer.jboss.org/people/mkouba&quot;&gt;Martin&lt;/a&gt; will be taking over leadership of the project.
      Martin has proven himself to be an excellent engineer over all the years and I am happy that I can leave the project in his hands.
      His primary task is going to be leading the project towards the Weld 3 milestone.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Secondly, I will be moving to work temporarily on a different project.
      I truly enjoyed working on Weld and with the CDI community.
      Now after almost 4 years on the project I was given an exciting opportunity which I decided to pursuit.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Last but not least, Matěj Novotný is joining the team as a quality engineer.
      He’s going to work on expanding our testsuites and making sure Weld releases do not break anything :-)&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2015/08/05/weld-300Alpha12/</id>
    <title>Weld 3.0.0.Alpha12 - CDI 2.0 EDR1 Reference Implementation!</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2015-08-05T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2015/08/05/weld-300Alpha12/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <category term="release"></category>
    <category term="cdi2"></category>
    <summary>
      
      Weld 3.0.0.Alpha12 has been released. Compared to previous alpha releases this is an important milestone - it&#8217;s a reference implementation of CDI 2.0 Early Draft (EDR1). You can read more about CDI 2.0 EDR1 on the official blog: CDI 2.0 Early Draft Review 1 released.
      
      
      Bootstrapping a CDI container in Java SE
      
      
      Starting a CDI container is now really that easy:
      
      
      
      public static void main(String... args) {
          try(CDI&lt;Object&gt; cdi = CDI.getCDIProvider().initialize()) {
              ComputingService service = cdi.select(ComputingService.class).get();
              service.compute();
          }
      }
      
      
      
      javax.enterprise.inject.spi.CDI now implements AutoCloseable and can...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 3.0.0.Alpha12 has been released. Compared to previous alpha releases this is an important milestone - it’s a reference implementation of &lt;a href=&quot;http://docs.jboss.org/cdi/spec/2.0.EDR1/cdi-spec.html&quot;&gt;CDI 2.0 Early Draft&lt;/a&gt; (EDR1). You can read more about CDI 2.0 EDR1 on the official blog: &lt;a href=&quot;http://www.cdi-spec.org/news/2015/07/03/CDI-2_0-EDR1-released/&quot;&gt;CDI 2.0 Early Draft Review 1 released&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_bootstrapping_a_cdi_container_in_java_se&quot;&gt;Bootstrapping a CDI container in Java SE&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Starting a CDI container is now really that easy:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static void main(String... args) {
          try(CDI&amp;lt;Object&amp;gt; cdi = CDI.getCDIProvider().initialize()) {
              ComputingService service = cdi.select(ComputingService.class).get();
              service.compute();
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;javax.enterprise.inject.spi.CDI&lt;/code&gt; now implements &lt;code&gt;AutoCloseable&lt;/code&gt; and can therefore be used in a &lt;code&gt;try-with-resources&lt;/code&gt; block.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Note that the specification of the bean discovery process in Java SE is not finished yet. Therefore, bean archives which don’t contain a beans.xml file are not supported. The main reason is that we don’t want to implement a feature which is being discussed and will likely undergo some important changes. Nevertheless, the feature will be implemented in one of the next alpha versions.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_weld_se_bootstrap_api&quot;&gt;Weld SE bootstrap API&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;How does it compare to Weld SE bootstrap API? Weld has provided support for the Java SE environment for a long time. Recently, the &lt;code&gt;org.jboss.weld.environment.se.Weld&lt;/code&gt; class was turned into a powerful builder which allows to configure the Weld container before it is initialized.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Typical usage of the Weld SE API looks like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;try (WeldContainer container = new Weld().initialize()) {
          ComputingService service = container.select(ComputingService.class).get();
          service.compute();
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This looks very similar to CDI SE, right? However, there are several advanced feratures available:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;automatic scanning can be disabled, classes or packages can be selected explicitly&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;WeldContainer container = new Weld().disableDiscovery().beanClasses(Foo.class, Bar.class).alternatives(Bar.class).interceptors(FooInterceptor.class).initialize();&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;WeldContainer allows to fire events easily&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;container.event().select(Bar.class).fire(new Bar());&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld-specific &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest-master/en-US/html/configure.html#_weld_configuration&quot;&gt;configuration options&lt;/a&gt; can be specified using the builder&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;it is possible to start multiple independent Weld instances (specification does not require this)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See also &lt;a href=&quot;http://weld.cdi-spec.org/news/2015/04/21/weld-300Alpha8/&quot;&gt;Weld 3.0.0.Alpha8 announcement&lt;/a&gt; for more information.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_asynchronous_events&quot;&gt;Asynchronous Events&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;An experimental support of asynchronous events is implemented in Weld since 3.0.0.Alpha3. However, in this release the API was aligned with CDI 2.0 EDR1:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class OrderProcessor {
      
          @Inject Event&amp;lt;Order&amp;gt; orderEvent;
      
          public void process(Order order) {
              orderEvent.fireAsync(order).thenAccept((o)-&amp;gt;System.out.println(&quot;Asynchronous processing finished: &quot; + o.getId()));
          }
      
          public void processingOrder(@Observes Order event) {
              // This observer is notified synchronously, before the fireAsync() method returns
          }
      
          public void asyncProcessingOrder(@ObservesAsync Order event) {
              // This observer is notified asynchronously, in a different thread
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There are few important things to notice:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;the event was triggered with &lt;code&gt;fireAsync()&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the asynchronous observer is defined by &lt;code&gt;@ObservesAsync&lt;/code&gt;&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;this is required because of backward compatibilty with previous versions of CDI, see also &lt;a href=&quot;http://www.cdi-spec.org/news/2015/07/03/CDI-2_0-EDR1-released/#_why_this_double_activation_is_needed&quot;&gt;Why this double activation is needed?&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;synchronous observers defined by &lt;code&gt;@Observes&lt;/code&gt; are also notified!&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To sum it up:&lt;/p&gt;
      &lt;/div&gt;
      &lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
      &lt;colgroup&gt;
      &lt;col style=&quot;width: 33%;&quot;&gt;
      &lt;col style=&quot;width: 33%;&quot;&gt;
      &lt;col style=&quot;width: 33%;&quot;&gt;
      &lt;/colgroup&gt;
      &lt;thead&gt;
      &lt;tr&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Event method&lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;code&gt;@Observes&lt;/code&gt; notified&lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;code&gt;@ObservesAsync&lt;/code&gt; notified&lt;/th&gt;
      &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;fire()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;yes, in the same thread&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;no&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;fireAsync()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;yes, in the same thread&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;yes, in a different thread&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_observers_spi_changes&quot;&gt;Observers SPI Changes&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;javax.enterprise.inject.spi.ObserverMethod&lt;/code&gt; now extends &lt;code&gt;javax.enterprise.inject.spi.Prioritized&lt;/code&gt; and overrides the &lt;code&gt;ObserverMethod.getPriority()&lt;/code&gt; method which is used to determine the notification order in which the event observer methods are invoked. &lt;code&gt;Prioritized&lt;/code&gt; interface is currently only used for observers. However, the Weld team is working on a prototype where &lt;code&gt;Prioritized&lt;/code&gt; can be used to globally select/enable custom alternative beans, interceptors and decorators, see also &lt;a href=&quot;https://issues.jboss.org/browse/WELD-2000&quot;&gt;WELD-2000&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Furthermore, &lt;code&gt;ObserverMethod.isAsync()&lt;/code&gt; method was added to determine whether an observer method is asynchronous or not.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wildfly_patch&quot;&gt;WildFly Patch&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As usual, a &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha12/wildfly-10.0.0.Alpha6-weld-3.0.0.Alpha12-patch.zip&quot;&gt;patch for WildFly&lt;/a&gt; is available. This patch not only upgrades Weld within an existing WildFly instance but also upgrades CDI API to 2.0 EDR1. This time the target platform is &lt;strong&gt;WildFly 10.0.0.Alpha6&lt;/strong&gt;.  If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/package-frame.html&quot;&gt;Experimental API documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12327471&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha12/weld-3.0.0.Alpha12.zip&quot;&gt;Distribution&lt;/a&gt; ]
      [ &lt;a href=&quot;http://download.jboss.org/weld/3.0.0.Alpha12/wildfly-10.0.0.Alpha6-weld-3.0.0.Alpha12-patch.zip&quot;&gt;Patch for Wildfly 10 Alpha&lt;/a&gt;
      ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2015/04/21/weld-300Alpha8/</id>
    <title>Weld 3.0.0.Alpha8</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2015-04-21T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2015/04/21/weld-300Alpha8/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <category term="release"></category>
    <category term="cdi2"></category>
    <summary>
      
      Weld 3.0.0.Alpha8 has been released.
      The main change is the enhanced API for using Weld in Java SE environment. In addition, this release comes with several weld-probe improvements.
      
      
      Enhanced API for Weld SE
      
      
      Weld has provided support for the Java SE environment for a long time with the weld-se module.
      The API provides an easy way for an application to initialize Weld and use it in a standalone mode.
      On initialization Weld SE scans the classpath for bean archives with the beans.xml file, similarly to how it&#8217;s done in the Java EE environment.
      
      
      In this release we are extending the API further.
      This is partially inspired by...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 3.0.0.Alpha8 has been released.
      The main change is the enhanced API for using Weld in Java SE environment. In addition, this release comes with several weld-probe improvements.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_enhanced_api_for_weld_se&quot;&gt;Enhanced API for Weld SE&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld has provided &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest-2.2/en-US/html/environments.html#_java_se&quot;&gt;support for the Java SE environment&lt;/a&gt; for a long time with the weld-se module.
      The API provides an easy way for an application to initialize Weld and use it in a standalone mode.
      On initialization Weld SE scans the classpath for bean archives with the &lt;code&gt;beans.xml&lt;/code&gt; file, similarly to how it’s done in the Java EE environment.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In this release we are extending the API further.
      This is partially inspired by the current discussion in the CDI expert group where a standardized CDI API for Java SE is being proposed as part of &lt;a href=&quot;https://issues.jboss.org/browse/CDI-26&quot;&gt;CDI-26&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The following code snippet shows the new API in action:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Weld builder = new Weld()
          .disableDiscovery()
          .packages(Main.class, Utils.class)
          .interceptors(TransactionalInterceptor.class)
          .property(&quot;org.jboss.weld.construction.relaxed&quot;, true);
      
      try (WeldContainer weld = builder.initialize()) {
          MyBean bean = weld.select(MyBean.class).get();
          System.out.println(bean.computeResult());
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There are several new things to notice:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;the &lt;code&gt;Weld&lt;/code&gt; class is used as a builder to configure Weld before it is initialized&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;automatic scanning can be disabled&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;instead of scanning, classes or packages can be selected explicitly. All classes in those packages will be managed by Weld&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;interceptors, decorators, extensions and &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.Alpha8/en-US/html/configure.html#_weld_configuration&quot;&gt;Weld-specific configuration options&lt;/a&gt; can be specified using the builder&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;WeldContainer&lt;/code&gt; now implements &lt;code&gt;AutoCloseable&lt;/code&gt; and can therefore be used in a &lt;code&gt;try-with-resources&lt;/code&gt; block. At any time that execution gets outside of the code block, the Weld instance is shut down and all managed instances are safely destroyed.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It is also possible to start multiple independent Weld instances:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;new Weld().disableDiscovery().containerId(&quot;one&quot;).beanClasses(MyBean.class).initialize();
      new Weld().disableDiscovery().containerId(&quot;two&quot;).beanClasses(OtherBean.class).initialize();
      
      MyBean bean = WeldContainer.instance(&quot;one&quot;).select(MyBean.class).get();
      System.out.println(bean.computeResult());
      
      WeldContainer.instance(&quot;one&quot;).shutdown();
      WeldContainer.instance(&quot;two&quot;).shutdown();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here, two independent &lt;code&gt;WeldContainer&lt;/code&gt; instances are initialized.
      Each of them is given a unique ID.
      The ID can subsequently be used to obtain a &lt;code&gt;WeldContainer&lt;/code&gt; reference in a different place of the code.
      One possible use-case this enables is for a library or framework (e.g. a testing framework) to use an embedded instance of Weld internally for its own needs (dependency injection, events, extensibility).
      This instance would not interfere with the Weld instance used by the application.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Obviously, automatic classpath scanning can still be used as before:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;try (WeldContainer weld = new Weld().enableDiscovery().initialize()) {
          MyBean bean = weld.select(MyBean.class).get();
          System.out.println(bean.computeResult());
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To play with the new API use the following dependency in you Maven project:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;org.jboss.weld.se&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;weld-se-core&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;3.0.0.Alpha8&amp;lt;/version&amp;gt;
      &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Aforementioned classes are from the &lt;code&gt;org.jboss.weld.environment.se&lt;/code&gt; package.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_weld_probe_enhancements&quot;&gt;Weld Probe Enhancements&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Since the last Alpha releases there were several enhancements to Weld Probe.
      If you are not familiar with Weld Probe, check this &lt;a href=&quot;http://weld.cdi-spec.org/news/2015/02/05/weld-300Alpha4/&quot;&gt;introductory blog post first&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new feature of Probe is that, when the development mode is enabled, it now embeds a tiny information bar directly into the application’s HTML output.
      That makes it easy to navigate to Probe directly from the application anytime.
      Furthermore, if invocation tracking is enabled, the information bar helps navigate directly to the invocation tree related to the request that rendered the output.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Weld Probe information bar embedded in application's HTML output&quot; src=&quot;http://weld.cdi-spec.org/images/blog/probe-bar.png&quot;&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Additionally, the following Probe improvements were implemented:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;tracked invocations are now grouped into a invocation tree instead of being tracked in isolation&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;a special type of edges is now used in the overview graph to represent a &quot;declared by&quot; relation (when a bean declares a producer method or field)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Instance&amp;lt;?&amp;gt; injection points are now treated specially - a resolved bean is show as injection point’s dependency&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See this &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess&quot;&gt;live demo&lt;/a&gt; and try Weld Probe yourself.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/package-frame.html&quot;&gt;Experimental API documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12326881&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha8&quot;&gt;Distribution&lt;/a&gt; ]
      [ Patch for Wildfly
      (&lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha8/wildfly-8.2.0.Final-weld-3.0.0.Alpha8-patch.zip/download&quot;&gt;8.2&lt;/a&gt;,
      &lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha8/wildfly-9.0.0.Beta2-weld-3.0.0.Alpha8-patch.zip/download&quot;&gt;9 Beta&lt;/a&gt;)
      ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2015/02/25/weld-300Alpha5/</id>
    <title>Weld 3.0.0.Alpha5</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2015-02-25T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2015/02/25/weld-300Alpha5/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <category term="release"></category>
    <category term="cdi2"></category>
    <summary>
      
      Weld 3.0.0.Alpha5, the latest release in the series of CDI 2.0 prototypes, has been released.
      The highlights of the release include new Bean builder API and many improvements to Weld Probe.
      
      
      Bean Builder API
      
      
      The common way for frameworks and libraries to expose their API to applications via CDI is by using producer methods.
      An alternative approach is a custom implementation of the javax.enterprise.inject.spi.Bean interface that is registered by a CDI portable extension.
      This latter approach gives the extension more control but is also less straightforward.
      
      
      One of the goals of CDI 2.0 is to fill this gap and simplify extension development.
      This Weld release comes with...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 3.0.0.Alpha5, the latest release in the series of CDI 2.0 prototypes, has been released.
      The highlights of the release include new Bean builder API and many improvements to Weld Probe.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_bean_builder_api&quot;&gt;Bean Builder API&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The common way for frameworks and libraries to expose their API to applications via CDI is by using producer methods.
      An alternative approach is a custom implementation of the &lt;code&gt;javax.enterprise.inject.spi.Bean&lt;/code&gt; interface that is registered by a CDI portable extension.
      This latter approach gives the extension more control but is also less straightforward.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;One of the goals of CDI 2.0 is to fill this gap and simplify extension development.
      This Weld release comes with a preview of the &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/BeanBuilder.html&quot;&gt;Bean builder API&lt;/a&gt;.
      The API is inspired by Bean builder
      &lt;a href=&quot;http://deltaspike.apache.org/javadoc/1.2.1/org/apache/deltaspike/core/util/bean/BeanBuilder.html&quot;&gt;API provided by DeltaSpike&lt;/a&gt;.
      In addition, Java 8 lambdas are used in the API to simplify the entire process even further.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here’s an example of a simple extension that builds and registers a bean:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;void register(@Observes ExperimentalAfterBeanDiscovery event) {
          event.addBean()
              .addType(Integer.class)
              .addQualifier(Random.LITERAL)
              .produceWith(() -&amp;gt; new java.util.Random().nextInt(1000));
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;That’s it!
      Likewise, it is easy to can define a bean with custom disposal logic using a lambda expression:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;void register(@Observes ExperimentalAfterBeanDiscovery event) {
          event.addBean()
              .addType(Connection.class)
              .produceWith(this::newConnection)
              .disposeWith(connection -&amp;gt; connection.close());
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/BeanBuilder.html&quot;&gt;BeanBuilder Javadoc&lt;/a&gt; for more information.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_event_monitoring_with_probe&quot;&gt;Event monitoring with Probe&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We introduced Probe in the &lt;a href=&quot;http://weld.cdi-spec.org/news/2015/02/05/weld-300Alpha4/&quot;&gt;previous blog post&lt;/a&gt;.
      This release adds event monitoring view to Probe.
      In this view both system and application events are displayed.
      The events can be filtered by type and qualifiers.
      It is also possible to track which observer methods a particular event was delivered to.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Weld Probe event monitoring&quot; src=&quot;http://weld.cdi-spec.org/images/blog/probe-events.png&quot;&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_further_improvements&quot;&gt;Further improvements&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition, there were a couple of minor improvements to Probe, namely:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;better filtering of invocation trees - Probe now searches the whole tree, not just the entry points&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the context view now displays the conversation context&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Probe is now more careful and does not try to bind interceptors to classes that are not proxyable&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;all the configuration options for Probe are now &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.Alpha5/en-US/html/configure.html#config-dev-mode&quot;&gt;documented&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you haven’t tried Probe yet check this &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess/weld-probe#/events&quot;&gt;demo running on OpenShift&lt;/a&gt;.
      The easiest way to get Probe to run locally is to patch WildFly with a &lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha5&quot;&gt;Weld patch&lt;/a&gt;.
      If you’re not familiar with patching WildFly, check &lt;a href=&quot;http://blog.eisele.net/2015/02/playing-with-weld-probe-see-all-of-your.html&quot;&gt;Markus’s tutorial&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_relaxed_construction&quot;&gt;Relaxed construction&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI requires that beans that are normal-scoped, intercepted or decorated always define a no-argument constructor.
      This requirement applies even if the bean already defines an @Inject annotated constructor with parameters.
      This is purely a technical requirement implied by how Java allocates class instances.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld is however able to operate fine even if this requirement is not met.
      Weld uses special non-portable JVM APIs that allow it to allocate proxy instances without calling proxy’s constructor.
      This mode is non-portable and needs to be &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.Alpha5/en-US/html/configure.html#relaxedConstruction&quot;&gt;explicitly enabled using a configuration option&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This mode is not new but has been neglected in the past.
      For this release we added a bunch of tests for this mode, fixed a lot of bugs and enabled it by default in Weld-SE.
      Any feedback on this mode is appreciated.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/package-frame.html&quot;&gt;Experimental API documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12326167&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha5&quot;&gt;Distribution&lt;/a&gt; ]
      [ Patch for Wildfly
      (&lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha5/wildfly-8.2.0.Final-weld-3.0.0.Alpha5-patch.zip/download&quot;&gt;8.2&lt;/a&gt;,
      &lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha5/wildfly-9.0.0.Alpha1-weld-3.0.0.Alpha5-patch.zip/download&quot;&gt;9 Alpha&lt;/a&gt;)
      ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2015/02/05/weld-300Alpha4/</id>
    <title>Weld 3.0.0.Alpha4</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2015-02-05T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2015/02/05/weld-300Alpha4/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <category term="release"></category>
    <category term="cdi2"></category>
    <summary>
      
      Here we are again with the next Alpha release of Weld 3.
      This time there are no additional CDI 2.0 previews.
      Instead, this release contains multiple performance improvements, enables @Asynchronous
      calls to be implemented simply with CDI interceptors and most importantly, it comes with
      weld-probe.
      
      
      Weld Probe
      
      
      Why isn&#8217;t my field injected?
      Why isn&#8217;t my interceptor triggered?
      What extensions do third-party libraries register?
      
      
      Have you ever found yourself asking a similar question?
      Making Weld developer-friendly and helpful in troubleshooting is our priority.
      Yet, similar problems still occur sometimes.
      
      
      But we can do event better! In Alpha4 of Weld 3 we are introducing a new tool called Weld Probe.
      Probe is a built-in tool...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here we are again with the next Alpha release of Weld 3.
      This time there are no additional CDI 2.0 previews.
      Instead, this release contains multiple performance improvements, enables &lt;code&gt;@Asynchronous&lt;/code&gt;
      calls to be implemented simply with CDI interceptors and most importantly, it comes with
      &lt;strong&gt;weld-probe&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_weld_probe&quot;&gt;Weld Probe&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Why isn’t my field injected?
      Why isn’t my interceptor triggered?
      What extensions do third-party libraries register?&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Have you ever found yourself asking a similar question?
      Making Weld developer-friendly and helpful in troubleshooting is our priority.
      Yet, similar problems still occur sometimes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;But we can do event better! In Alpha4 of Weld 3 we are introducing a new tool called &lt;strong&gt;Weld Probe&lt;/strong&gt;.
      Probe is a built-in tool that provides a detailed view into internals of a CDI application.
      Weld Probe has a web UI and is provided out-of-the-box.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Probe makes it easy to inspect:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;beans, their properties such as qualifiers, stereotypes and name&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;a graph of bean dependencies&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;observers and producers declared by beans&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;interceptors and decorators bound to a bean&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;extensions&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;information about current contextual instances&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;tracking of invocations and invocation trees&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Plus more addons are planned in future.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Weld Probe Screenshot&quot; src=&quot;https://developer.jboss.org/servlet/JiveServlet/showImage/38-5641-24345/probe_bean_detail.png&quot;&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To try probe all that needs to be done is to upgrade to Alpha4, enable the development mode and point your browser to the URL
      of your CDI application plus &lt;code&gt;/weld-probe&lt;/code&gt; suffix.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For more thorough overview of what Probe provides see
      &lt;a href=&quot;http://goo.gl/ICQrRA&quot;&gt;Martin’s blog post&lt;/a&gt; or the
      &lt;a href=&quot;http://docs.jboss.org/weld/reference/3.0.0.Alpha4/en-US/html/devmode.html#_probe&quot;&gt;reference documentation&lt;/a&gt;.
      You can play with Probe using this
      &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess&quot;&gt;simple CDI application&lt;/a&gt;
      hosted on &lt;a href=&quot;https://www.openshift.com/&quot;&gt;OpenShift&lt;/a&gt;. Just append
      &lt;a href=&quot;http://probe-weld.itos.redhat.com/weld-numberguess/weld-probe&quot;&gt;/weld-probe&lt;/a&gt;
      to the URL.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Bear in mind that Probe is still work in progress and that this early preview may have defects
      here and there.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_implementing_asynchronous_using_cdi_interceptor&quot;&gt;Implementing @Asynchronous using CDI interceptor&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It &lt;strong&gt;is&lt;/strong&gt; possible to implement a substitute for EJB &lt;code&gt;@Asynchronous&lt;/code&gt; method calls using CDI interceptors.
      Arjan Tijms recently &lt;a href=&quot;http://jdevelopment.nl/cdi-based-asynchronous-alternative/&quot;&gt;blogged about his solution&lt;/a&gt;
      A similar one can be found in
      &lt;a href=&quot;https://github.com/weld/core/blob/master/tests-arquillian/src/test/java/org/jboss/weld/tests/interceptors/thread/async/AsyncInterceptor.java&quot;&gt;Weld’s testsuite&lt;/a&gt;.
      Long story short: This would not work smoothly until now because of a limitation in Weld. This limitation is now gone in Alpha4.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_performance&quot;&gt;Performance&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release integrates various runtime performance improvements mainly around bean instance construction,
      producer and observer method invocation.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_next&quot;&gt;Next&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 3.0.0.Alpha5 is planned in 3 weeks time from now, with some more CDI 2.0 previews.
      We are going to continue releasing Alpha versions of Weld 3.0 roughly every 3 weeks until
      the early draft of CDI 2.0, which should happen sometime in March.
      At that point, we’ll move to Beta releases.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the meantime, we’d like to hear your feedback on Probe or on Weld 3.0 Alpha releases in general.
      Feel free to use our &lt;a href=&quot;https://community.jboss.org/en/weld?view=discussions&quot;&gt;forums&lt;/a&gt; or &lt;a href=&quot;http://webchat.freenode.net/?channels=weld-dev&quot;&gt;#weld-dev on freenode&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/package-frame.html&quot;&gt;Experimental API documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12326166&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha4&quot;&gt;Distribution&lt;/a&gt; ]
      [ Patch for Wildfly
      (&lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha4/wildfly-8.2.0.Final-weld-3.0.0.Alpha4-patch.zip/download&quot;&gt;8.2&lt;/a&gt;,
      &lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha4/wildfly-9.0.0.Alpha1-weld-3.0.0.Alpha4-patch.zip/download&quot;&gt;9 Alpha&lt;/a&gt;)
      ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2014/12/10/an-update-on-weld-3/</id>
    <title>An update on Weld 3</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2014-12-10T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2014/12/10/an-update-on-weld-3/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <category term="cdi2"></category>
    <summary>
      
      Today we are releasing the third Alpha release of Weld 3. These Alpha releases serve
      as prototypes of changes currently being discussed by the CDI expert group for
      the upcoming CDI 2.0.
      
      
      The Alpha releases are not suitable for production use as the new API and functionality
      are still subject to change. We are releasing them to allow the community to test-drive
      the changes early in the development cycle. We want to shorten the feedback loop and
      identify possible glitches as soon as possible.
      
      
      Let’s just quickly review what has been available since Alpha1:
      
      
      
      
      declarative ordering of observer methods using @Priority
      
      
      ability for an extension to veto and modify...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Today we are releasing the third Alpha release of Weld 3. These Alpha releases serve
      as prototypes of changes currently being discussed by the CDI expert group for
      the upcoming CDI 2.0.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Alpha releases are not suitable for production use as the new API and functionality
      are still subject to change. We are releasing them to allow the community to test-drive
      the changes early in the development cycle. We want to shorten the feedback loop and
      identify possible glitches as soon as possible.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let’s just quickly review what has been available since Alpha1:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;declarative ordering of observer methods using &lt;code&gt;@Priority&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;ability for an extension to veto and modify an observer method&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;support for Java 8 repeatable annotations as qualifiers and interceptor bindings&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;enhanced &lt;code&gt;AnnotatedType&lt;/code&gt; API&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For more details and examples of these features see my
      &lt;a href=&quot;http://weld.cdi-spec.org/news/2014/10/02/weld-300Alpha1/&quot;&gt;previous blog post&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;On top of this, we’re now adding the &lt;strong&gt;following new features and enhancements&lt;/strong&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;asynchronous events&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;simplified configuration of Weld-specific properties&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Guava is no longer used internally&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_asynchronous_events&quot;&gt;Asynchronous events&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Since its first version CDI has provided events as a facility for component interaction.
      Events enable loose coupling while preserving type safety.
      So far, CDI has supported synchronous delivery of events - the calling thread blocks
      until invocations of all associated observer methods complete. An alternative to
      this are transactional observer methods which are called asynchronously at the end
      of a transaction.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For the upcoming CDI 2.0 specification one of the hot topics is enhancement of the
      events facility. The expert group is
      &lt;a href=&quot;https://docs.google.com/document/d/1pDO7gru6YuEyTDdK3XBozvXZYucT9uC7McZMffSZun4/edit?usp=sharing&quot;&gt;considering adding fully asynchronous event dispatching mechanism&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A working prototype of this is available in Weld 3.0.0.Alpha3. The current proposal
      adds a method called &lt;code&gt;fireAsync&lt;/code&gt; to the existing &lt;code&gt;Event&lt;/code&gt; interface.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Inject
      private ExperimentalEvent&amp;lt;Configuration&amp;gt; event;
      …
      event.fireAsync(new Configuration());&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The call to &lt;code&gt;event.fireAsync()&lt;/code&gt; returns immediately. The event is delivered to
      corresponding observers in a dedicated thread pool that can be configured.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_what_about_thread_safety&quot;&gt;What about thread-safety?&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There are two common usage pattens for events. In the first one an immutable event
      object is used. An alternative is to use mutable events. A mutable event allows
      observers to participate on the result which is later used by the component that
      fired the event. An example of this would be the
      &lt;a href=&quot;https://docs.oracle.com/javaee/6/api/javax/enterprise/inject/spi/ProcessAnnotatedType.html&quot;&gt;ProcessAnnotatedType&amp;lt;T&amp;gt;&lt;/a&gt;
      event used by CDI extensions. When events are fired synchronously, both
      approaches work fine but how does this work when we switch to async?&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Nothing changes actually. No matter if the event object is immutable or not, you
      do not have to worry about thread-safety of the event object. The current implementation
      comes with the guarantee that event object is safely published which means that
      an observer method observes the event in the state in which:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;it was left by an observer executing before the given observer, or&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the initial state of the event if the given observer is the first one&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Furthermore, the state is consistent throughout the execution of an observer method
      which means that we guarantee safe publication and prevent races for you. The only
      thing that should be avoided is modifying the state of the event object outside of
      an observer method. This behavior matches the
      &lt;a href=&quot;https://docs.google.com/document/d/1lFtgLm6hY-uECdA1r0Sfimq6vkVYThoUZsevPUaSP0E/edit?usp=sharing&quot;&gt;option 4.1.1.1 in the current spec proposal&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Update: new &lt;a href=&quot;https://docs.google.com/document/d/1pDO7gru6YuEyTDdK3XBozvXZYucT9uC7McZMffSZun4/edit?usp=sharing&quot;&gt;link for a planning document&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition, if observer methods are ordered (another new feature proposed for CDI 2.0)
      we preserve the ordering (as in such situation the observers are ordered for a reason!)
      and invoke observers in the given order.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Last but not least, if an observer is transactional, we again preserve this and
      invoke the observer method in the corresponding transaction phase.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_how_do_i_know_when_event_delivery_finishes_and_what_about_exceptions&quot;&gt;How do I know when event delivery finishes and what about exceptions?&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the current prototype we’re reusing the
      &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html&quot;&gt;CompletionStage&lt;/a&gt;
      API, introduced in Java 8, which allows actions (callbacks) to be bound to the completion of the
      asynchronous delivery process. This is what it looks like:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;event.fireAsync(new Configuration()).thenAccept(config -&amp;gt; master.compute(config));&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This piece of code starts with asynchronously firing a mutable configuration object
      allowing loosely-coupled observers to alter the configuration of a computation.
      Once all observers finish, computation is initiated based on the resulting configuration.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If an exception occurs this can be dealt with also, either by falling back to a default value&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;event.fireAsync(new Configuration())
          .exceptionally(throwable -&amp;gt; DEFAULT_CONFIGURATION)
          .thenAccept((config) -&amp;gt; master.compute(config));&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;or by executing arbitrary code:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;event.fireAsync(new Configuration()).whenComplete((config, throwable) -&amp;gt; {
          if (throwable != null) {
              System.err.println(&quot;Oops. Failed because of &quot; + throwable.getMessage());
          } else {
              master.compute(config);
          }
      });&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;CompletionStage&lt;/code&gt; allows much more. If you are unfamiliar with the API see the
      &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html&quot;&gt;Javadoc&lt;/a&gt;
      page for more information.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_how_do_i_try_this_myself&quot;&gt;How do I try this myself?&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It’s easy and multiple options are available. First of them is to use Weld in a
      &lt;strong&gt;standalone application&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;Create a new Java SE application.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Add dependency on Weld&lt;/p&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;org.jboss.weld.se&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;weld-se-core&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;3.0.0.Alpha3&amp;lt;/version&amp;gt;
      &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Create an empty &lt;code&gt;beans.xml&lt;/code&gt; file, e.g.&lt;/p&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;mkdir src/main/resources/META-INF
      touch src/main/resources/META-INF/beans.xml&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Launch Weld and fire an event asynchronously&lt;/p&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public static void main(String[] args) {
          WeldContainer weld = new Weld().initialize();
          Event&amp;lt;String&amp;gt; evnt = weld.event().select(String.class);
          ExperimentalEvent&amp;lt;String&amp;gt; event = (ExperimentalEvent&amp;lt;String&amp;gt;) evnt;
      
          event.fireAsync(&quot;message&quot;);
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;_wildfly&quot;&gt;WildFly&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Alternatively, a patch is available for WildFly that upgrades Weld within an existing WildFly instance. See the
      &lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha3&quot;&gt;download page&lt;/a&gt;
      for more details.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Note that these new prototyped APIs are not part of the CDI API yet. Instead, they are currently located
      in
      &lt;a href=&quot;http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.jboss.weld%22%20AND%20a%3A%22weld-api%22&quot;&gt;Weld API&lt;/a&gt;
      in a package named
      &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/package-frame.html&quot;&gt;org.jboss.weld.experimental&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;All these altered APIs have the &lt;code&gt;Experimental&lt;/code&gt; prefix (that’s why we are using &lt;code&gt;ExperimentalEvent&lt;/code&gt; in the examples)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;We would appreciate your feedback!&lt;/strong&gt; Feel free to use
      &lt;a href=&quot;https://community.jboss.org/en/weld?view=discussions&quot;&gt;Weld forums&lt;/a&gt;
      or the
      &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/cdi-dev&quot;&gt;cdi-dev mailing list&lt;/a&gt;
      for this purpose.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_what_s_next&quot;&gt;What’s next?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are going to continue releasing early prototypes of features currently proposed for
      CDI 2.0. The plan is to release a new Alpha version every 3 weeks. There are several
      areas we want to focus on:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;simplifying how extensions register beans and observers&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;monitoring and debugging of CDI applications&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;experimenting with full interception (intercepting even calls within a given component)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;splitting the codebase into a “light” and “full” version (to support proposed &lt;strong&gt;CDI light&lt;/strong&gt; version)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;bootstrap API for SE environment&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/package-frame.html&quot;&gt;Experimental API documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12325836&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha3&quot;&gt;Distribution&lt;/a&gt; ]
      [ Patch for Wildfly
      (&lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha3/wildfly-8.2.0.Final-weld-3.0.0.Alpha3-patch.zip/download&quot;&gt;8.2&lt;/a&gt;,
      &lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha3/wildfly-9.0.0.Alpha1-weld-3.0.0.Alpha3-patch.zip/download&quot;&gt;9 Alpha&lt;/a&gt;)
      ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2014/10/02/weld-300Alpha1/</id>
    <title>Weld 3.0.0.Alpha1 released!</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2014-10-02T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2014/10/02/weld-300Alpha1/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      Today we are releasing Weld 3.0.0.Alpha1. This release serves as an early proof of concept of some of the ideas that are being discussed by the CDI Expert Group for the upcoming
      CDI 2.0 specification. Furthermore, this is a great opportunity for the community to test-drive some of the proposed improvements and provide us with feedback.
      Be warned though that this released does not come with any guarantee of stability and that binary and functional compatibility is likely to be broken in the following releases.
      
      
      Ordering of observer methods
      
      
      The first of the new features are ordered observer methods. This requirement came up a...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Today we are releasing Weld 3.0.0.Alpha1. This release serves as an &lt;strong&gt;early proof of concept&lt;/strong&gt; of some of the ideas that are being discussed by the CDI Expert Group for the upcoming
      &lt;a href=&quot;http://cdi-spec.org/&quot;&gt;CDI 2.0 specification&lt;/a&gt;. Furthermore, this is a great opportunity for the community to test-drive some of the proposed improvements and &lt;strong&gt;provide us with feedback&lt;/strong&gt;.
      Be warned though that this released does not come with any guarantee of stability and that binary and functional compatibility is likely to be broken in the following releases.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_ordering_of_observer_methods&quot;&gt;Ordering of observer methods&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The first of the new features are ordered observer methods. This requirement came up a long ago and several approaches were proposed in the meantime, as documented by
      &lt;a href=&quot;https://issues.jboss.org/browse/CDI-4&quot;&gt;CDI-4&lt;/a&gt;.The Alpha1 release employs the general-purpose &lt;code&gt;@Priority&lt;/code&gt; annotation to determine the order in which observer methods are to be notified.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There are many open questions about this feature. Here are some of the rules we set for the purpose of this experimental implementation. These are by no means set in stone but instead we encourage you
      to give us feedback on these:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Each observer method has a certain priority value. An observer method that does not define a priority explicitly is given the default priority which is 2500 (in the middle of the &lt;code&gt;Interceptor.Priority.APPLICATION&lt;/code&gt; range)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The priority of an observer method determines the order. An observer method with lower value is called before an observer method with higher value&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;If multiple observer methods define the same priority value, the order is undefined&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Observer methods priorities should match &lt;a href=&quot;https://javaee-spec.java.net/nonav/javadocs/javax/interceptor/Interceptor.Priority.html&quot;&gt;existing priority range convention&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The ordering applies to both transactional and non-transactional observer methods&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The priority annotation is applied on the event parameter (not the observer method)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here’s an example:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public void sendWelcome(@Observes @Priority(APPLICATION + 800) @Registered User user) {
          // ...
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Note that &lt;code&gt;javax.annotation.Priority&lt;/code&gt; can currently only be applied to types. Therefore, we temporarily created a substitute called &lt;strong&gt;&lt;code&gt;org.jboss.weld.experimental.Priority&lt;/code&gt;&lt;/strong&gt; which is identical
      to the original except that it can also be applied on parameters (of observer methods). The plan is to propagate this change back to &lt;code&gt;javax.annotation.Priority&lt;/code&gt;. In the meantime, Weld’s twin
      gets the job done.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition to the &lt;code&gt;@Priority&lt;/code&gt; annotation, the SPI was also enhanced to expose the priority of an observer method. We are not touching &lt;code&gt;javax.enterprise&lt;/code&gt; interfaces just yet. Instead,
      the &lt;code&gt;org.jboss.weld.experimental&lt;/code&gt; package contains proposals for how the new SPI should look like. As the package name suggests, this SPI is good for a test-drive but do not expect it to be stable.
      To use the experimental SPIs, you’ll need to add a dependency on &lt;a href=&quot;http://search.maven.org/#artifactdetails%7Corg.jboss.weld%7Cweld-api%7C3.0.Alpha1%7Cjar&quot;&gt;weld-api&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here’s an example of reading the observer method priority using the SPI in an Extension. &lt;code&gt;ExperimentalProcessObserverMethod&lt;/code&gt; and &lt;code&gt;ExperimentalObserverMethod&lt;/code&gt; interfaces come from the
      &lt;code&gt;org.jboss.weld.experimental package&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class SimpleExtension implements Extension {
      
          void observe(@Observes ExperimentalProcessObserverMethod&amp;lt;User, ?&amp;gt; event) {
              ExperimentalObserverMethod&amp;lt;User&amp;gt; observerMethod = event.getObserverMethod();
              this.priority = observerMethod.getPriority();
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Use the &lt;a href=&quot;https://issues.jboss.org/browse/CDI-4&quot;&gt;corresponding CDI ticket&lt;/a&gt; for any feedback on these features.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_vetoing_and_modifying_observer_methods&quot;&gt;Vetoing and modifying observer methods&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We’ll stay with observer methods for a few more paragraphs. A &lt;a href=&quot;https://issues.jboss.org/browse/CDI-458&quot;&gt;request&lt;/a&gt; was raised in the CDI issue tracker for making it possible to disable an
      observer method using the &lt;code&gt;ProcessObserverMethod&lt;/code&gt; SPI.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This Alpha1 release introduces the &lt;code&gt;veto()&lt;/code&gt; methods (aligned with &lt;code&gt;ProcessAnnotatedType.veto()&lt;/code&gt;) for this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;void disableDebuggingObservers(@Observes ExperimentalProcessObserverMethod&amp;lt;?, Debug&amp;gt; event) {
          if (projectStage != ProjectStage.Development) {
              event.veto();
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition, the observer method metadata may be altered by an extension. This is done similarly to how &lt;code&gt;InjectionTarget&lt;/code&gt;, &lt;code&gt;InjectionPoint&lt;/code&gt; or &lt;code&gt;BeanAttribute&lt;/code&gt; metadata are modified which
      is most often by wrapping the original object (decorator design pattern). Any piece of metadata (including aforementioned priority) can be altered. For example, the transaction phase:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;void alterObserver(@Observes ExperimentalProcessObserverMethod&amp;lt;User, ?&amp;gt; event) {
          event.setObserverMethod(new ForwardingExperimentalObserverMethod&amp;lt;User&amp;gt;(event.getObserverMethod()) {
              @Override
              public TransactionPhase getTransactionPhase() {
                  return TransactionPhase.AFTER_SUCCESS;
              }
          });
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_repeatable_qualifiers_and_interceptor_bindings&quot;&gt;Repeatable qualifiers and interceptor bindings&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release serves as a proof of concept for supporting repeating qualifiers and interceptor bindings. You can now fully utilize Java 8 features and use multiple qualifiers or interceptor bindings
      of the same type in the same location, for example:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class School {
      
          @Produces
          @Speaks(&quot;English&quot;)
          @Speaks(&quot;French&quot;)
          public Student graduate() {
              // ...
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Repeating qualifiers can be used for both bean and event resolution. See the &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/annotations/repeating.html&quot;&gt;Java documentation&lt;/a&gt; for how to define
      a repeating annotation.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_interceptor_bindings_in_invocation_context&quot;&gt;Interceptor bindings in invocation context&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This is an often recurring scenario. An interceptor binding defines several &lt;code&gt;@NonBinding&lt;/code&gt; members which serve as configuration for the interceptor. How does an interceptor get hold of these values?
      This is not easy as the interceptor binding may often appear on the intercepted method, the class that defined it or may be inherited from another interceptor binding or stereotype (even transitively!).
      This problem gave birth to utilities such as
      &lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=deltaspike.git;a=blob;f=deltaspike/core/api/src/main/java/org/apache/deltaspike/core/util/AnnotationUtils.java;h=9d4c8e2f72936facf1ef0d8d9655c4186965afde;hb=HEAD&quot;&gt;this one&lt;/a&gt;.
      Still, even after all this effort the result is not entirely correct as it was obtained using Java reflection ignoring the fact that the interceptor binding may have been modified
      (e.g. using &lt;code&gt;ProcessAnnotatedType&lt;/code&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This problem is being addressed as &lt;a href=&quot;https://issues.jboss.org/browse/CDI-468&quot;&gt;CDI-468&lt;/a&gt;. The Alpha1 release of Weld implements this feature and exposes new methods for obtaining interceptor bindings
      that are in effect for the interception. This is done using &lt;code&gt;ExperimentalInvocationContext.getInterceptorBindings()&lt;/code&gt; or &lt;code&gt;ExperimentalInvocationContext.getInterceptorBindingsByType()&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Again, &lt;code&gt;ExperimentalInvocationContext&lt;/code&gt; can be found in the &lt;code&gt;org.jboss.weld.experimental&lt;/code&gt; package and depicts how the future version of &lt;code&gt;javax.interceptor.InvocationContext&lt;/code&gt; could look like.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Interceptor
      @Secure
      public class SecurityInterceptor {
      
          @Inject
          private User user;
      
          @AroundInvoke
          public Object intercept(ExperimentalInvocationContext ctx) throws Exception {
              Secure binding = ctx.getInterceptorBindingsByType(Secure.class).iterator().next();
              if (!user.getRoles().contains(binding.requireRole())) {
                  throw new SecurityException();
              }
              return ctx.proceed();
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Again, your feedback is welcome at &lt;a href=&quot;https://issues.jboss.org/browse/CDI-468&quot;&gt;CDI-468&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_changes_in_the_annotated_layer&quot;&gt;Changes in the Annotated layer&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI provides an abstraction over the Reflection API - &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/javax/enterprise/inject/spi/Annotated.html&quot;&gt;AnnotatedType and friends&lt;/a&gt; - which mostly allows extensions
      to alter the set of annotations present on a type, field, method, etc.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Alpha1 release contains two minor additions to this API. Firstly, the API now supports Java 8 repeating annotations with a new method &lt;code&gt;ExperimentalAnnotated.getAnnotationsByType(Class&amp;lt;T&amp;gt; annotationClass)&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Secondly, it is now possible to access the &lt;code&gt;java.lang.reflect.Parameter&lt;/code&gt; instance that is wrapped by &lt;code&gt;AnnotatedParameter&lt;/code&gt; using &lt;code&gt;ExperimentalAnnotatedParameter.getJavaParameter();&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See &lt;a href=&quot;https://issues.jboss.org/browse/CDI-471&quot;&gt;CDI-471&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/CDI-481&quot;&gt;CDI-481&lt;/a&gt; for details.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_give_it_a_try&quot;&gt;Give it a try!&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/3.0/weld-api/org/jboss/weld/experimental/package-frame.html&quot;&gt;Experimental API documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12322333&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha1&quot;&gt;Distribution&lt;/a&gt; ]
      [ &lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/3.0.0.Alpha1/wildfly-9.0.0.Alpha1-weld-3.0.0.Alpha1-patch.zip/download&quot;&gt;Patch for WildFly 9&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2014/09/18/weld-next/</id>
    <title>Weld.Next</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2014-09-18T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2014/09/18/weld-next/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      Today, we released Weld 2.2.5.Final. The fifth mostly bug-fixing release in the series addresses 23 issues.
      In addition, the Servlet module got an update and among other things now supports:
      
      
      
      
      all three bean discovery modes (e.g. only explicitly annotated classes will be loaded as CDI beans)
      
      
      bean archive isolation
      
      
      using Jandex for faster deployment discovery
      
      
      
      
      See the reference documentation 
      for details.
      
      
      Talking about documentation we are grateful to Antoine Sabot-Durand for migrating our reference documentation to AsciiDoc.
      We also thank our community contributors Antonin Stefanutti and Stefan Grossmann who contributed with pull requests.
      
      
      Weld 3.0
      
      
      In the coming months, our focus will be shifting towards Weld 3.0 - the...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Today, we released Weld 2.2.5.Final. The fifth mostly bug-fixing release in the series addresses &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12325389&quot;&gt;23 issues&lt;/a&gt;.
      In addition, the Servlet module got an update and among other things now supports:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;all three bean discovery modes (e.g. only explicitly annotated classes will be loaded as CDI beans)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;bean archive isolation&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;using Jandex for faster deployment discovery&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.2.5.Final/en-US/html/_application_servers_and_environments_supported_by_weld.html#_servlet_containers_such_as_tomcat_or_jetty&quot;&gt;reference documentation &lt;/a&gt;
      for details.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Talking about documentation we are grateful to &lt;a href=&quot;http://www.next-presso.com/author/antoine/&quot;&gt;Antoine Sabot-Durand&lt;/a&gt; for migrating our reference documentation to &lt;a href=&quot;http://www.methods.co.nz/asciidoc/&quot;&gt;AsciiDoc&lt;/a&gt;.
      We also thank our community contributors &lt;strong&gt;Antonin Stefanutti&lt;/strong&gt; and &lt;strong&gt;Stefan Grossmann&lt;/strong&gt; who contributed with pull requests.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_weld_3_0&quot;&gt;Weld 3.0&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the coming months, our focus will be shifting towards &lt;strong&gt;Weld 3.0&lt;/strong&gt; - the future reference implementation of &lt;a href=&quot;http://cdi-spec.org/&quot;&gt;CDI 2.0&lt;/a&gt;.
      Initially, we plan on releasing Alpha releases every two weeks starting in early October.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Alpha releases are likely to break compatibility from time to time and will often contain bleeding edge or prototype code.
      The goals is however to give the CDI community a chance to test drive the proposed changes in the CDI specification as soon as possible and give quick feedback to the CDI expert group.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 3.0 will also be a good opportunity to get involved in the development of this open-source project. &lt;strong&gt;Interested?&lt;/strong&gt; See our &lt;a href=&quot;http://weld.cdi-spec.org/community/&quot;&gt;community web page&lt;/a&gt; for more details.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2014/04/15/weld-220-final/</id>
    <title>Weld 2.2 (CDI 1.2 reference implementation) released!</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2014-04-15T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2014/04/15/weld-220-final/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      Today we released Weld 2.2.0.Final - the reference implementation of Contexts and Dependency Injection for Java EE 1.2 (CDI 1.2).
      Besides implementing the changes in the specification, this release comes with several new features, performance improvements and more than 50 bug fixes.
      
      
      CDI 1.2
      
      
      CDI 1.2 is a maintenance release of the CDI specification. It contains a number of small fixes and clarifications as well as several enhancements.
      Most notable changes for application developers are related to the definition of bean defining annotations.
      
      
      In CDI 1.2, the set of bean defining annotations now contains:
      
      
      
      
      all the normal scope annotations (e.g. @RequestScoped, @ApplicationScoped, &#8230;&#8203;)
      
      
      the built-in @Dependent scope
      
      
      @Interceptor...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Today we released Weld 2.2.0.Final - the reference implementation of &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html&quot;&gt;Contexts and Dependency Injection for Java EE 1.2 (CDI 1.2)&lt;/a&gt;.
      Besides implementing the changes in the specification, this release comes with several new features, performance improvements and more than 50 bug fixes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_cdi_1_2&quot;&gt;CDI 1.2&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI 1.2 is a maintenance release of the &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=346&quot;&gt;CDI specification&lt;/a&gt;. It contains a number of small fixes and clarifications as well as several enhancements.
      Most notable changes for application developers are related to the definition of &lt;em&gt;bean defining annotations&lt;/em&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In &lt;a href=&quot;http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#bean_defining_annotations&quot;&gt;CDI 1.2&lt;/a&gt;, the set of bean defining annotations now contains:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;all the normal scope annotations (e.g. @RequestScoped, @ApplicationScoped, …​)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the built-in @Dependent scope&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;@Interceptor and @Decorator annotations&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;stereotype annotations&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As a result, any class annotated with a &lt;em&gt;bean defining annotation&lt;/em&gt; is by default recognized by the application server and registered as a CDI bean. The beans.xml file is optional.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition, there are other fixes, clarifications and minor enhancements in this maintenance release of the CDI specification.
      See &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12311062&amp;amp;version=12323655&quot;&gt;the release notes&lt;/a&gt; for the complete list of changes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_performance&quot;&gt;Performance&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld is now capable of using bytecode-scanning utilities, such as the &lt;a href=&quot;https://github.com/wildfly/jandex&quot;&gt;Jandex&lt;/a&gt; tool, to speed up deployment.
      This is especially notable in extra large deployments (e.g. 5000+ classes) where we observed up to &lt;strong&gt;20% faster deployment&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition, there are noticeable improvements in the following areas:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;runtime performance of observers, interceptors and decorators&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;session replication overhead (failover)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;memory consumption&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_weld_2_2_on_wildfly&quot;&gt;Weld 2.2 on WildFly&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://wildfly.org&quot;&gt;WildFly&lt;/a&gt; does not come with Weld 2.2 support yet. It is however easy to patch an existing WildFly installation to use Weld 2.2.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To do so, follow these steps:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;Download a patch appropriate for the WildFly version (e.g. 8.0.0.Final) from the &lt;a href=&quot;http://sourceforge.net/projects/jboss/files/Weld/2.2.0.Final/&quot;&gt;download section&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;In the WildFly installation, run the CLI console&lt;/p&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;sh jboss-cli.sh&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;From the console run the following command:&lt;/p&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;patch apply /path/to/wildfly-8.0.0.Final-weld-2.2.0.Final-patch.zip&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Your installation is now patched!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_weld_se_and_servlet&quot;&gt;Weld SE and Servlet&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld comes with the SE module which allows CDI to be used in plain Java SE environment. In Weld 2.2 we added partial support for implicit bean archives.
      Partial support here means that the beans.xml file is still required, but &lt;strong&gt;bean-discovery-mode=”annotated”&lt;/strong&gt; can be specified for Weld to only discover classes explicitly annotated with bean defining annotations (see above).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition to the Weld SE module, Weld also provides the Weld Servlet module which makes it possible to use Weld on top of a plain Servlet container, such as Apache Tomcat or Jetty.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In this release we simplified configuration by bootstrapping Weld using the &lt;em&gt;ServletContainerInitializer&lt;/em&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Furthermore, Weld Servlet now supports &lt;strong&gt;Jetty 9.1&lt;/strong&gt;. At the same time, the support for &lt;strong&gt;Tomcat 6 was dropped&lt;/strong&gt;. To summarize, Weld Servlet is currently supported on the following Servlet containers:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Tomcat 7, 8&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Jetty 7, 8, 9.0, 9.1&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_acknowledgement&quot;&gt;Acknowledgement&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We greatly appreciate your contributions to this release.
      Big thanks go to: Martin Kouba, Matúš Abaffy, Matej Briškár, Ron Šmeral, Marek Schmidt, Marko Lukša, Tomáš Remeš, Stuart Douglas, Radoslav Husár, Max Pimm, Alexandre Gattiker, Antonin Stefanutti and Steve Moyer.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.2/&quot;&gt;CDI 1.2 API&lt;/a&gt; ]
      [ &lt;a href=&quot;http://weld.cdi-spec.org/download/&quot;&gt;Download&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.2.0.Final/en-US/html/&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/issues/?filter=12321473&quot;&gt;Release notes&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2014/02/04/weld-220-alpha1/</id>
    <title>CDI 1.2 and Weld 2.2</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2014-02-04T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2014/02/04/weld-220-alpha1/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      Work on a maintenance release of the CDI specification (CDI 1.2) has started recently. Now is the best time to add feedback on issues being addressed. Most of the discussion happens in the cdi-dev mailing list or the IRC channel.
      
      
      Weld 2.2 is going to be the reference implementation of CDI 1.2. Besides implementing the changes introduced in the maintenance release, we are going to focus on improving non-functional characteristics in this release of Weld:
      
      
      
      
      bootstrap time
      
      
      memory footprint
      
      
      throughput
      
      
      maximum number of concurrent clients
      
      
      session replication overhead
      
      
      
      
      Today, we released Weld 2.2.0.Alpha1. The most significant changes include:
      
      
      
      
      Added new SPI that allows bytecode-scanning frameworks (such as jandex)...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Work on a maintenance release of the CDI specification (CDI 1.2) has started recently. Now is the best time to add feedback on &lt;a href=&quot;http://www.cdi-spec.org/news/2013/12/16/CDI-1-2-issues-list/&quot;&gt;issues being addressed&lt;/a&gt;. Most of the discussion happens in the &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/cdi-dev&quot;&gt;cdi-dev mailing list&lt;/a&gt; or the &lt;a href=&quot;http://webchat.freenode.net/?channels=jsr346&quot;&gt;IRC channel&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Weld 2.2&lt;/strong&gt; is going to be the reference implementation of CDI 1.2. Besides implementing the changes introduced in the maintenance release, we are going to focus on improving non-functional characteristics in this release of Weld:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;bootstrap time&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;memory footprint&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;throughput&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;maximum number of concurrent clients&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;session replication overhead&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Today, we released &lt;strong&gt;Weld 2.2.0.Alpha1&lt;/strong&gt;. The most significant changes include:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Added &lt;a href=&quot;http://docs.jboss.org/weld/javadoc/2.2/weld-spi/org/jboss/weld/resources/spi/ClassFileInfo.html&quot;&gt;new SPI&lt;/a&gt; that allows bytecode-scanning frameworks (such as &lt;a href=&quot;https://github.com/wildfly/jandex&quot;&gt;jandex&lt;/a&gt;) to be integrated. This yields improved bootstrap time especially with large deployments.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Reduced memory consumption (our tests show 6-12% less memory used after bootstrap with large deployments)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Improved event/observer performance&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Java Web Start support finally got in (thanks to Alexandre Gattiker for the patch!)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Improved Servlet container support (Jetty 9.1, ServletContainerInitializer used to bootstrap Weld, Tomcat 8 support)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;A new Groovy example (groovy-numberguess) was added&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Many other bug fixes and improvements. See the &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12322332&quot;&gt;release notes&lt;/a&gt; for a complete list of changes&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Now, we continue to work on Weld 2.2. Expect the final version in late March. In the meantime, try this release and let us know what you think in the &lt;a href=&quot;https://community.jboss.org/en/weld&quot;&gt;forum&lt;/a&gt;. If you are interested in Weld make sure you check our &lt;a href=&quot;http://weld.cdi-spec.org/community/&quot;&gt;community page&lt;/a&gt; or the &lt;a href=&quot;https://issues.jboss.org/issues/?filter=12320398&quot;&gt;list of open issues awaiting contribution&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/Weld/2.2.0.Alpha1&quot;&gt;Distribution&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12322332&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.2.0.Alpha1/en-US/html/&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.1/&quot;&gt;CDI 1.1 Javadoc&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2014/01/14/weld-212-final/</id>
    <title>Three new Weld releases</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2014-01-14T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2014/01/14/weld-212-final/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      This week we are releasing three new builds of Weld. Firstly, Weld 2.1.2.Final was released. This is a bug-fixing release with 11 issues resolved. Most notably:
      
      
      
      
      The conversation context is now initialized lazily. This resolves the problem with custom character encoding that many of you run into. See the reference documentation for details.
      
      
      Weld now runs fine on JDK8
      
      
      Jetty 9.1 is now supported by weld-servlet
      
      
      
      
      In addition, Weld 1.1.17.Final (CDI 1.0) was released with several bug fixes.
      
      
      Last but not least, there was a memory leak identified in GlassFish caused partly by GlassFish and partly by Weld. GlassFish still uses Weld 2.0. Although we...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This week we are releasing three new builds of Weld. Firstly, &lt;strong&gt;Weld 2.1.2.Final&lt;/strong&gt; was released. This is a bug-fixing release with 11 issues resolved. Most notably:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;The conversation context is now initialized lazily. This resolves the problem with custom character encoding that many of you run into. See the &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.1.2.Final/en-US/html/scopescontexts.html#d0e2009&quot;&gt;reference documentation&lt;/a&gt; for details.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Weld now runs fine on JDK8&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Jetty 9.1 is now supported by weld-servlet&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In addition, &lt;strong&gt;Weld 1.1.17.Final&lt;/strong&gt; (CDI 1.0) was released with several bug fixes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Last but not least, there was a &lt;a href=&quot;https://java.net/jira/browse/GLASSFISH-20928&quot;&gt;memory leak identified in GlassFish&lt;/a&gt; caused partly by GlassFish and partly by Weld. GlassFish still uses Weld 2.0. Although we do not maintain the 2.0 branch any longer and advice everyone to upgrade to Weld 2.1, the memory leak may be a problem for GlassFish users that are not able to upgrade to Weld 2.1 themselves. Therefore, we decided to do one more 2.0 release where this problem is fixed so that GlassFish users stuck on Weld 2.0 have an easy fix. Enjoy &lt;strong&gt;Weld 2.0.5.Final!&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Now, our focus shifts completely towards Weld 2.2 where performance optimization and lowering memory consumption are the main goals. Expect first Alpha of Weld 2.2 by the end of January.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you are interested in Weld make sure you check our &lt;a href=&quot;http://weld.cdi-spec.org/community/&quot;&gt;community page&lt;/a&gt; or the &lt;a href=&quot;https://issues.jboss.org/issues/?filter=12320398&quot;&gt;list of open issues awaiting contribution&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2013/12/11/weld-211-final/</id>
    <title>Weld 2.1.1.Final</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2013-12-11T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2013/12/11/weld-211-final/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      Weld 2.1.1.Final was released. More than 20 issues were addressed in this release. See the release notes for details. Thanks to everyone involved in this release!
      
      
      &#91; Distribution &#93;
      &#91; Release notes &#93;
      &#91; Documentation &#93;
      &#91; CDI 1.1 Javadoc &#93;
      ...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld 2.1.1.Final was released. More than 20 issues were addressed in this release. See the &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12322670&quot;&gt;release notes&lt;/a&gt; for details. Thanks to everyone involved in this release!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/Weld/2.1.1.Final&quot;&gt;Distribution&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&amp;amp;version=12322670&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.1.1.Final/en-US/html/&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.1/&quot;&gt;CDI 1.1 Javadoc&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2013/10/22/weld-210-final/</id>
    <title>Weld 2.1.0.Final</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2013-10-22T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2013/10/22/weld-210-final/" rel="alternate" type="text/html" />
    <author>
      <name>Jozef Hartinger</name>
    </author>
    <summary>
      
      I am pleased to announce that Weld 2.1.0.Final has just been released. Weld is the reference implementation of Contexts and Dependency Injection for Java EE (CDI).
      Here is the highlight of what’s new in Weld 2.1.0:
      
      
      
      
      OSGi support with Pax CDI
      
      
      Improved runtime performance and memory consumption
      
      
      Better integration with various Servlet dispatch types
      
      
      SLF4j was replaced with jboss-logging
      
      
      30 fixed bugs
      
      
      
      
      The future of Weld-OSGi
      
      
      Weld-osgi is a framework that allows the CDI programming model to be used in the OSGi environment.
      The framework was developed entirely by the Weld community and became a part of Weld since version 1.2.0
      
      
      The framework provides three main features:
      
      
      
      
      The CDI programming model...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I am pleased to announce that Weld 2.1.0.Final has just been released. Weld is the reference implementation of &lt;a href=&quot;http://cdi-spec.org&quot;&gt;Contexts and Dependency Injection for Java EE (CDI)&lt;/a&gt;.
      Here is the highlight of what’s new in Weld 2.1.0:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;OSGi support with Pax CDI&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Improved runtime performance and memory consumption&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Better integration with various Servlet dispatch types&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;SLF4j was replaced with &lt;a href=&quot;https://github.com/jboss-logging&quot;&gt;jboss-logging&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;30 fixed bugs&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;weld-osgi&quot;&gt;The future of Weld-OSGi&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.slideshare.net/TrevorReznik/weldosgi-injecting-easiness-in-osgi&quot;&gt;Weld-osgi&lt;/a&gt; is a framework that allows the CDI programming model to be used in the OSGi environment.
      The framework was developed entirely by the Weld community and became a part of Weld since version 1.2.0&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The framework provides three main features:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;The CDI programming model can be used within OSGi bundles.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The OSGi service layer and utility facilities are accessible through CDI injection&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The CDI event bus can be used for both inter-bundle communication and delivering OSGi events.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The weld-osgi framework served as an inspiration for a standardization effort, known as &lt;a href=&quot;http://www.osgi.org/download/osgi-early-draft-2013-03.pdf&quot;&gt;RFC-193&lt;/a&gt; (formerly RFP-146).
      The proposal is now part of the &lt;a href=&quot;http://www.osgi.org/download/osgi-early-draft-2013-03.pdf&quot;&gt;OSGi early draft&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Due to the tight schedule of CDI 1.1, weld-osgi did never make it to Weld 2.0 and was therefore left behind, stuck in the gradually abandoned 1.2 branch.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the meantime, work on the reference implementation of RFC-193 begun. The reference implementation is known as &lt;a href=&quot;https://ops4j1.jira.com/wiki/display/PAXCDI/Documentation&quot;&gt;Pax CDI&lt;/a&gt; and it is an open-source project hosted on &lt;a href=&quot;https://github.com/ops4j/org.ops4j.pax.cdi&quot;&gt;GitHub&lt;/a&gt;.
      Pax CDI aims to be portable across OSGi implementations as well as CDI implementations.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We always wanted to bring OSGi support back in Weld 2.1. However, we decided not to revive the weld-osgi framework nor align it to the new RFC-193 specification. Therefore, weld-osgi will not be merged into Weld 2.x code base.
      Instead, we decided to shift our focus towards Pax CDI and make sure it works well with Weld.
      This was done and Weld 2.1.0 is now one of the CDI runtimes supported by Pax CDI. You can play with the current &lt;a href=&quot;https://ops4j1.jira.com/wiki/display/PAXCDI/Download&quot;&gt;Pax CDI SNAPSHOT&lt;/a&gt;
      or wait for the upcoming &lt;a href=&quot;https://ops4j1.jira.com/browse/PAXCDI/fixforversion/11996&quot;&gt;0.5 release&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;EDIT 2013-10-30: Pax CDI 0.5.0 was released. See the &lt;a href=&quot;http://team.ops4j.org/wiki/display/PAXCDI/2013/10/27/Pax+CDI+0.5.0+Released&quot;&gt;release announcement&lt;/a&gt; for more details.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_performance&quot;&gt;Performance&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The CDI specification requires the request, conversation and application contexts to be active during every HTTP request.
      Obviously, the CDI contexts are not necessary for every HTTP request. Fetching a static resource is an example of one such request.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In Weld 2.1.0 we optimized the component that handles context activation/deactivation and cut down the overhead.
      In addition, it is now possible to completely suppress CDI context activation on certain types of HTTP requests should this minimized overhead still be undesired.
      See &lt;a href=&quot;https://community.jboss.org/people/mkouba/blog/2013/09/18/weld—​skip-cdi-context-activation-for-some-http-requests&quot;&gt;Martin’s blog post&lt;/a&gt; or
      &lt;a href=&quot;http://docs.jboss.org/weld/reference/latest/en-US/html/configure.html#d0e6194&quot;&gt;the reference documentation&lt;/a&gt; for more details.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_acknowledgement&quot;&gt;Acknowledgement&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We greatly appreciate your contributions to this release. Big thanks go to: Martin Kouba, Matúš Abaffy, Matej Briškár, Marko Lukša, Stuart Douglas, Marek Schmidt, Ron Šmeral, Tomáš Remeš, Max Pimm, Jesse McConnell, Harald Wellmann and Dirk Strauss.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;[ &lt;a href=&quot;https://sourceforge.net/projects/jboss/files/Weld/2.1.0.Final&quot;&gt;Distribution&lt;/a&gt; ]
      [ &lt;a href=&quot;https://issues.jboss.org/issues/?jql=project%20%3D%20WELD%20AND%20fixVersion%20in%20%28%222.1.0.Final%22%2C%20%222.1.0.Alpha1%22%2C%20%222.1.0.Beta1%22%2C%20%222.1.0.Beta2%22%2C%20%222.1.0.CR1%22%29%20ORDER%20BY%20updated%20ASC&quot;&gt;Release notes&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/weld/reference/2.1.0.Final/en-US/html/&quot;&gt;Documentation&lt;/a&gt; ]
      [ &lt;a href=&quot;http://docs.jboss.org/cdi/api/1.1/&quot;&gt;CDI 1.1 Javadoc&lt;/a&gt; ]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2013/09/20/weld-210beta2-tip/</id>
    <title>Weld 2.1.0.Beta2 tip</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2013-09-20T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2013/09/20/weld-210beta2-tip/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <summary>
      
      A tip how to configure a new feature introduced in Weld 2.1.0.Beta2 which allows to skip CDI context activation for some HTTP requests: http://goo.gl/PAiwBS
      ...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A tip how to configure a new feature introduced in Weld 2.1.0.Beta2 which allows to skip CDI context activation for some HTTP requests: &lt;a class=&quot;bare&quot; href=&quot;http://goo.gl/PAiwBS&quot;&gt;http://goo.gl/PAiwBS&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://weld.cdi-spec.org/news/2013/06/20/new-weld-site/</id>
    <title>Weld has a new web site!</title>
    <updated>2017-09-22T09:45:46+02:00</updated>
    <published>2013-06-20T00:00:00+00:00</published>
    <link href="http://weld.cdi-spec.org/news/2013/06/20/new-weld-site/" rel="alternate" type="text/html" />
    <author>
      <name>Martin Kouba</name>
    </author>
    <summary>
      
      Weld has a new web site and it&#8217;s built with Awestruct!
      ...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Weld has a new web site and it’s built with Awestruct!&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
</feed>
